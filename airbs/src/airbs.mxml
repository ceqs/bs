<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:bs="library://ns.adobe.com/flex/mx"
					   xmlns:net="flash.net.*"
					   xmlns:imagecropper="com.flexblocks.imagecropper.*"
					   xmlns:utils="utils.*"
					   xmlns:ns1="*"
					   width="750" height="550" backgroundAlpha="0" creationComplete="initApp()"
					   currentState="stateMain" showStatusBar="false" styleName="main">
	
	<fx:Style source="assets/css/airbs.css"/>
	
	<fx:Script>
		
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import flash.filters.DropShadowFilter;
			import flash.sampler.NewObjectSample;
			
			import flashx.textLayout.formats.Float;
			import flashx.textLayout.tlf_internal;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Decoder;
			import mx.utils.Base64Encoder;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import utils.SQLbuckscore;
			import utils.ScoreUtils;
			import utils.albumbuckscore;
			import utils.albumitembuck;
			private var gVersion:String;
			private var shadowFilter:DropShadowFilter;
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			private var albumphoto:ArrayCollection= new ArrayCollection();
			private var createalbum:ArrayCollection = new ArrayCollection();
			private var fr:FileReference;
			private var prefsXML:XML;
			private var sqlscore:SQLbuckscore = new SQLbuckscore();
			[Bindable]
			public var array:ArrayCollection=new ArrayCollection;
			
			[Bindable]
			public var array2:ArrayCollection=new ArrayCollection;
			
			[Bindable]
			public var combo:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			private var competencyListData:XMLListCollection;
			
			[Bindable]
			private var competencyListDatAAge:XMLListCollection;
			
			private var coleccionpositionphoto:XMLListCollection;
			
			[Bindable]
			private var xmlURL:String;
			
			private var numbertypicalleft:int=1;
			private var numbertypicalrigth:int=1;
			private var numberabnormalleft:int=1;
			private var numberabnormalright:int=1;
			
			
			private var bandera:String;
			public static var birdList:Array=new Array(); 
			public static var textList:Array=new Array();
			public var arraybyte:ByteArray=new ByteArray();
			public var scoreutils:ScoreUtils=new ScoreUtils();
			
//////////////////////////////SCORE VARIABLE//////////////////////////////////////////////////////
			
			public var scoredeerage:String;
			public var scorestate:String;
			public var referencetype:String;
			public var inchvalue:Number;
			public var myangleoptions:XMLList;
			
///////////////////////////////////////////////////////////////////////////////////////////////			
			
			
			public function llenarTabla():void
			{   
				albumphoto=sqlscore.resault();
				for(var i:int = 0;i<albumphoto.length;i++)
				{	
					
					var photoItem:Object = albumphoto[i];
					
					var _deername:String= photoItem.deername as String;
					var _albumname:String= photoItem.albumname as String;
					var _images:String=photoItem.image as String;
					var byteArray:ByteArray;
					if(_images!=""){
						var encodedBytes:String = _images;
						
						var baseDecoder:Base64Decoder = new Base64Decoder();
						baseDecoder.decode(encodedBytes);
						byteArray= baseDecoder.toByteArray();
						trace("entre jiji");
					}else{
						byteArray=null;
					}
					
					
					var _score:String = photoItem.score as String;
					trace('Subject'+i+_deername);
					trace('From'+i+_albumname);
					array.addItem({name:_deername,type:_albumname});
					array2.addItem({image:byteArray ,name:_deername,type:_albumname,score:_score});
					
					trace(array);
					
					
				}
				
				trace("Iniciando grid...");
				
				createalbum=sqlscore.resaulta();
				trace("hay algo");
				for(var j:int = 0;j<createalbum.length;j++){
					var albumItem:Object = createalbum[j];
					var __albumname:String= albumItem.albumname as String;
					trace("muestra:"+__albumname);
					combo.addItem(__albumname);
				}
				
				
			}
			
			private function initApp():void {
				trace("Iniciando aplicacion...");
				
				if (sqlscore.isExist()) {
					// ceqs-revisar
					sqlscore.create();
				}
				else
					sqlscore.create();
				/*
				if(NativeWindow.supportsTransparency) {
				shadowFilter = new DropShadowFilter();
				shadowFilter.color = 0x000000;
				shadowFilter.alpha = 0.4;
				shadowFilter.blurX = 5;
				shadowFilter.blurY = 5;
				shadowFilter.distance = 5;
				addShadow(this.mainBox);
				}
				else { */
				this.borderLeft.width = 0;
				this.borderRight.width = 0;
				this.borderTop.height = 0;
				this.borderBottom.height = 0;
				//}
				
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;
				maximize();
				
				NativeApplication.nativeApplication.addEventListener( Event.EXITING, 
					function(e:Event):void {
						var opened:Array = NativeApplication.nativeApplication.openedWindows;
						for (var i:int = 0; i < opened.length; i ++) {
							opened[i].close();
						}
					});    
				
				setApplicationVersion();
				bandera="0";
				//appUpdater.updateURL = "http://localhost/buckscore/update.xml";
				appUpdater.updateURL = "http://www.complexless.com/buckscore/update.xml";
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onError);
				appUpdater.initialize();
				
				llenarTabla();	
				
			}
			
			 private function array2refresh():void
			{
				albumphoto=sqlscore.resault();
				for(var i:int = 0;i<albumphoto.length;i++)
				{	
					
					var photoItem:Object = albumphoto[i];
					
					var _deername:String= photoItem.deername as String;
					var _albumname:String= photoItem.albumname as String;
					var _images:String=photoItem.image as String;
					var byteArray:ByteArray;
					if(_images!=""){
						var encodedBytes:String = _images;
						
						var baseDecoder:Base64Decoder = new Base64Decoder();
						baseDecoder.decode(encodedBytes);
						byteArray= baseDecoder.toByteArray();
						trace("entre jiji");
					}else{
						byteArray=null;
					}
					var _score:String = photoItem.score as String;
					array2.addItem({image:byteArray ,name:_deername,type:_albumname,score:_score});
					
				}
				
			}
			
			private function addShadow(comp:DisplayObject):void {
				comp.filters = [this.shadowFilter];
			}
			
			private function onError(event:ErrorEvent):void {
				Alert.show(event.toString());
			}
			
			private function onUpdate(event:UpdateEvent):void {
				appUpdater.checkNow();
			}
			
			private function setApplicationVersion():void {
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				gVersion = appXML.ns::version;
			}
			//////////////////////////////SQL lite database///////////////////////////////////////////////////////////
			
			////////////////////////////////finish/////////////////////////////////////////////////////////////////////////	
			
			
			
			////////////////////////menu bar control///////////////////////////////////////////
			private function menuHandler(event:MenuEvent):void  {
				// Don't open the Alert for a menu bar item that 
				// opens a popup submenu.
				if (event.item.@label == "Album") {
					/*Alert.show("Label: " + event.item.@label + "\n" + 
					"Data: " + event.item.@data, "Clicked menu item");*/
					currentState='editAlbum';
				}
				else if(event.item.@label == "Deer"){
					currentState='editphoto';
				}else if(event.item.@label != "Deer" && event.item.@label != "Album"){
					Alert.show("Menu: " + event.item.@label, "Buckscore menu item");
				}
			}
			/////////////////////////////////////finish/////////////////////////////////////////	
			
			
			
			
			
			
			////////////////////////////////datagrid filtrer/////////////////////////////////	
			
			
			private var firstTime:Boolean = true;
			private function filter():void {
				array.filterFunction = filterMyArrayCollection;
				array.refresh();
			}
			
			private function filterMyArrayCollection(item:Object):Boolean {
				var searchString:String = txtfilterdatagrid.text.toLowerCase();
				var itemName:String = (item.name as String).toLowerCase();
				return itemName.indexOf(searchString) > -1;
			}
			
			private function clearMyTextInput():void {
				
				if (firstTime == true )
				{
					txtfilterdatagrid.text = "";
					firstTime = false;
				}
			}
			
			
			
			private var firstTime2:Boolean = true;
			private function filter2():void {
				array2.filterFunction = filterMyArrayCollection2;
				array2.refresh();
			}
			
			private function filterMyArrayCollection2(item:Object):Boolean {
				var searchString:String = txtexpandfilter.text.toLowerCase();
				var itemName:String = (item.name as String).toLowerCase();
				return itemName.indexOf(searchString) > -1;
			}
			
			private function clearMyTextInput2():void {
				
				if (firstTime2 == true )
				{
					txtexpandfilter.text = "";
					firstTime2 = false;
				}
			}
			
			
			
			
			
			
			
			
			/////////////////////////////////finish//////////////////////////////////////////	
			
			protected function button1_canceluploadphot(event:MouseEvent):void
			{
				currentState='stateMain';
				imgupload.visible=false;
				btnbrowsetoadd.visible=true;
				combophoto.selectedIndex=0;
			}
			
			protected function button2_callscore(event:MouseEvent):void
			{
				currentState='scorephoto';
				
				/*var file:File = File.documentsDirectory.resolvePath("lookups.xml"); 
				var fileStream:FileStream = new FileStream(); 
				fileStream.addEventListener(Event.COMPLETE, processXMLData); 
				fileStream.openAsync(file, FileMode.READ); 
				
				
				function processXMLData(event:Event):void  
				{ 
				prefsXML = XML(fileStream.readUTFBytes(fileStream.bytesAvailable)); 
				fileStream.close(); 
				}*/
				prefsXML = new XML();
				var XML_URL:String = "lookups.xml";
				var myXMLURL:URLRequest = new URLRequest(XML_URL);
				var myLoader:URLLoader = new URLLoader(myXMLURL);
				myLoader.addEventListener("complete", xmlLoaded);
				
				function xmlLoaded(event:Event):void
				{
					prefsXML = XML(myLoader.data);
					trace("Data loaded.");
					trace(prefsXML.child("States").child("State").attribute("Description").toString());
					var mylist:XMLList = prefsXML.child("States").child("State").attribute("Description");
					var mylistage:XMLList = prefsXML.child("AgeGroups").child("AgeGroup").attribute("Description");
					competencyListData =  new XMLListCollection(mylist);
					competencyListDatAAge = new XMLListCollection(mylistage);
					cmbstate.dataProvider=competencyListData;
					cmbstate.selectedIndex=0;
					cmbage.dataProvider=competencyListDatAAge;
					cmbage.selectedIndex=0;
				}
				
				
			}
			
			
			protected function button3_backeditphoto(event:MouseEvent):void
			{
				currentState='scorephoto';
				
			}
			protected function button3_backscorephoto(event:MouseEvent):void
			{
				currentState='stateMain';
				
			}
			protected function button3_referenceFeature(event:MouseEvent):void
			{
				currentState='positionphoto';
				
			}
			/////////////////////position foto////////////////////////////////////////
			
			protected function btnnext_nextphoto(event:MouseEvent):void
			{
				
				var mylistposition:XMLList = prefsXML.child("ModifiedImageOrientations").child("Orientation");
				
				trace(mylistposition[0].attribute("Code"));
				if(imageposition.source=="Image/0_RL.png")
				{
					imageposition.source="Image/22_L.png";
				}
				else if(imageposition.source=="Image/22_L.png")
				{
					imageposition.source="Image/45_L.png";
				}
				else if(imageposition.source=="Image/45_L.png")
				{
					imageposition.source="Image/66_L.png";
				}
				else if(imageposition.source=="Image/66_L.png")
				{
					imageposition.source="Image/90_L.png";
				}
				else if(imageposition.source=="Image/90_L.png")
				{
					
				}
					
				else if(imageposition.source=="Image/22_R.png")
				{
					imageposition.source="Image/0_RL.png";
				}
				else if(imageposition.source=="Image/45_R.png")
				{
					imageposition.source="Image/22_R.png";
				}
				else if(imageposition.source=="Image/66_R.png")
				{
					imageposition.source="Image/45_R.png";
				}
				else if(imageposition.source=="Image/90_R.png")
				{
					imageposition.source="Image/66_R.png";
				}
				
				for(var i:int=0; i<mylistposition.length();i++){
					
					if(mylistposition[i].attribute("ImagePath")==imageposition.source.toString()){
						
						lblpositionphoto.text=mylistposition[i].attribute("Description");
					}
				}
				
			}
			
			protected function btnback_backphoto(event:MouseEvent):void
			{
				
				var mylistposition:XMLList = prefsXML.child("ModifiedImageOrientations").child("Orientation");
				
				trace(mylistposition[0].attribute("Code"));
				
				if(imageposition.source=="Image/0_RL.png")
				{
					imageposition.source="Image/22_R.png";
				}
				else if(imageposition.source=="Image/22_R.png")
				{
					imageposition.source="Image/45_R.png";
				}
				else if(imageposition.source=="Image/45_R.png")
				{
					imageposition.source="Image/66_R.png";
				}
				else if(imageposition.source=="Image/66_R.png")
				{
					imageposition.source="Image/90_R.png";
				}
				else if(imageposition.source=="Image/90_R.png")
				{
					
					
				}
				else if(imageposition.source=="Image/22_L.png")
				{
					imageposition.source="Image/0_RL.png";
				}
				else if(imageposition.source=="Image/45_L.png")
				{
					imageposition.source="Image/22_L.png";
				}
				else if(imageposition.source=="Image/66_L.png")
				{
					imageposition.source="Image/45_L.png";
				}
				else if(imageposition.source=="Image/90_L.png")
				{
					imageposition.source="Image/66_L.png";
				}
				
				for(var i:int=0; i<mylistposition.length();i++){
					
					if(mylistposition[i].attribute("ImagePath")==imageposition.source.toString()){
						
						lblpositionphoto.text=mylistposition[i].attribute("Description");
					}
				}
				
			}
			
			
			/////////////////////////////////position foto////////////////////////////////////////
			
			
			
			protected function editAlbum_clickHandler(event:MouseEvent):void
			{	
				if(txtalbumname.text!=""){
				var banderaalbum:String="1";
				var itemalbum:albumitembuck = new albumitembuck();
				itemalbum.namealbum= txtalbumname.text;
				itemalbum.description=txtdescriptionalbum.text;
				var uniquealbum:ArrayCollection=sqlscore.resaulta();
				trace(uniquealbum);
				for(var i:int=0;i<uniquealbum.length;i++){
					var albumItem:Object = uniquealbum[i];
					if(albumItem.albumname as String==txtalbumname.text){
						
						banderaalbum="0";
					}
				}
	
				
				//createalbum.addItem(itemalbum);
				if( banderaalbum=="1"){
				var typeerror:String=sqlscore.addItemalbum(itemalbum.namealbum,itemalbum.description);	
					if(typeerror=="1"){
					combo.addItem(itemalbum.namealbum);
					txtalbumname.text='';
					txtdescriptionalbum.text="";
					combophoto.selectedIndex=0;
					currentState='stateMain';
					}
				}else Alert.show("Album Name Duplicate");
				}else Alert.show("Insert value for Album");
				
			}
			
			protected function DeleteAlbum_clickHandler(event:MouseEvent):void
			{
				createalbum= sqlscore.resaulta();
				var albumdelete:String=combodeletealbum.selectedItem;
				
				for(var i:int=0;i<createalbum.length;i++){
					var albumItem:Object = createalbum[i];
					var __albumname:String= albumItem.albumname as String;
					if(albumdelete==__albumname){
						
						combo.removeItemAt(i);
						sqlscore.removea(__albumname);
					}
				}
				txtalbumname.text='';
				txtdescriptionalbum.text="";
				combophoto.selectedIndex=0;
				//combophoto.selectedIndex=0;
				currentState='stateMain';
				
			}
			
			////////////////////////////////finish edition photo//////////////////////////////////////////////// 
			
			
			
			////////////////////////////////////////////////////upload photo file explorer///////////	
			public var banderadeer:String="0";
			protected function uploadfile():void{
				var arr:Array = [];
				arr.push(new FileFilter("Images Buckscore", ".gif;*.jpeg;*.jpg;*.png"));
				fileReference.browse(arr);
				banderadeer="1";
			}
			
			protected function uploadfile2():void{
				var arr:Array = [];
				arr.push(new FileFilter("Images Buckscore", ".gif;*.jpeg;*.jpg;*.png"));
				fileReference.browse(arr);
				bandera="1";
				
			}
			
			
			private function fileReference_select(evt:Event):void {
				fileReference.load();
			}
			
			private function fileReference_complete(evt:Event):void {
				imgupload.source = fileReference.data;
				imgupload.visible=true;
				if(bandera=="0")
					btnbrowsetoadd.visible=false;
				
				//Alert.show(ObjectUtil.toString(fileReference));
			}
			
			
			private  function savephotoedition():void
			{
				if(txtdeernamesave.text!="" &&	cmbalbumnameselection.selectedItem!="" && banderadeer=="1")
				{	
				var itemalbumphoto:albumbuckscore = new albumbuckscore();
				var banderaphoto:String="1";
				itemalbumphoto.deername=txtdeernamesave.text;
				itemalbumphoto.albumname=cmbalbumnameselection.selectedItem;
				itemalbumphoto.tagnumber=txttagnumbersave.text;
				itemalbumphoto.ranchname=txtranchnamesave.text;
				itemalbumphoto.posturename=txtposturenamesave.text;
				itemalbumphoto.score="0";
				var encodedBytes:String="";
				var byaarrayaux:ByteArray=null;
				if(fileReference.data!=null){
					var imageByteArray:ByteArray=fileReference.data;
					byaarrayaux=imageByteArray;
					var baseEncoder:Base64Encoder = new Base64Encoder();
					baseEncoder.encodeBytes(imageByteArray);
					encodedBytes= baseEncoder.toString();
				}
				var typeerror:String;
			
					
					
					var uniquealbum:ArrayCollection=sqlscore.resault();
					trace(uniquealbum);
					for(var i:int=0;i<uniquealbum.length;i++){
						var albumItem:Object = uniquealbum[i];
						if(albumItem.deername as String==itemalbumphoto.deername){
							
							banderaphoto="0";
						}
					}
					
					
					//createalbum.addItem(itemalbum);
			   if( banderaphoto=="1"){	
				typeerror=sqlscore.addItemphoto(itemalbumphoto.deername,itemalbumphoto.albumname,itemalbumphoto.tagnumber,itemalbumphoto.ranchname,itemalbumphoto.posturename,encodedBytes,itemalbumphoto.score);
				//saveAs("c:/tmp",itemalbumphoto.deername+".jpg");
				//albumphoto.addItem(itemalbumphoto);
				trace("codigo error:"+typeerror);

				if(typeerror=="1"){
				array.addItem({name:itemalbumphoto.deername,type:itemalbumphoto.albumname});
				array2.addItem({image:byaarrayaux ,name:itemalbumphoto.deername,type:itemalbumphoto.albumname,score:itemalbumphoto.score});
				currentState='stateMain';
				txtdeernamesave.text="";
				txttagnumbersave.text="";
				txtranchnamesave.text="";
				txtposturenamesave.text="";
				imgupload.visible=false;
				btnbrowsetoadd.visible=true;
				combophoto.selectedIndex=0;
				banderadeer="0";
				fileReference.data.clear();
				}
				}else{
					Alert.show("Name Duplicate");
				}
			  }else{
				  Alert.show("Insert Value for Deer");
			  }
				
			}
			public function saveAs(filepath:String,filename:String):void {
				var file:File = new File(filepath+File.separator+filename);
				var fileStream:FileStream = new FileStream();
				
				fileStream.open(file,FileMode.WRITE);
				fileStream.writeBytes(fileReference.data);
				fileStream.close();
				
			}
			
			///////////////////////////finish edition photo////////////////////////////////////////////
			
			
			////////////////////////////////datagrid edition filter///////////////////////////////	
			
			protected function datagrid1_selectionChangeHandler(event:GridSelectionEvent):void
			{
				albumphoto=sqlscore.resault();
				trace(datagridalbumname.selectedItem.name);
				var croper:ManageCropper;
				var byteArray:ByteArray;
				var images:String;
				for(var i:int;i<albumphoto.length;i++){
					var photoItem:Object = albumphoto[i];
					var __deername:String= photoItem.deername as String;
					
					if(datagridalbumname.selectedItem.name==__deername){
						deernamefinishscore=datagridalbumname.selectedItem.name; 
						images=photoItem.image as String;
						trace("image code"+images);
						if(images!=""){
							var encodedBytes:String = images;
							var baseDecoder:Base64Decoder = new Base64Decoder();
							baseDecoder.decode(encodedBytes);
							byteArray= baseDecoder.toByteArray();
						}
						else{
							byteArray=null;
						}
					}
					
					
				}
				
				
				imageforedition.source=byteArray;
				arraybyte=byteArray;
				//imageforedition0.source=byteArray;
				
				
				
				var loader:Loader = new Loader;
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loader_COMPLETE);
				loader.loadBytes(byteArray);
				
				
				
				//var image:BitmapData = new Image(
				
				
				
				btndeerscoresheet.enabled=true;
				btnScoreProccess.enabled=true;
				btndeerinfo.enabled=true;
				lbldeernastate.text=datagridalbumname.selectedItem.name;
				lbldeeralbumstate.text=datagridalbumname.selectedItem.type;
				txtNamepaneltitle.text=datagridalbumname.selectedItem.name;
			}
			
			
			private function loader_COMPLETE(event:Event):void
			{
				var bitmap:Bitmap = event.target.content;
				manageCropper.setImage(bitmap.bitmapData);
			}
			
			
			protected function mygridexpand_selectionChangeHandler(event:GridSelectionEvent):void
			{
				lblAlbumnameexpand.text=myGridExpand.selectedItem.type;
				lbldeernameexpand.text=myGridExpand.selectedItem.name;
				img_ExpandDeerName.source=myGridExpand.selectedItem.image;
				
			}
			
			
			protected function stateMain_clickHandler(event:MouseEvent):void
			{
				currentState='ExpandDeerName';
				var scoregraff:ArrayCollection= sqlscore.resault();
				var scoreprinting:ArrayCollection=new ArrayCollection();
				var counterscoremin:int;
				var counterscoremed:int;
				var counterscoremax:int;
				var scoremin:ArrayCollection= new ArrayCollection();
				
				var scoremedium:ArrayCollection= new ArrayCollection();
				var scoremax:ArrayCollection= new ArrayCollection();
				for(var i:int = 0;i<scoregraff.length;i++)
				{	
					
					var photoItem:Object = scoregraff[i];
					
					var _deername:String= photoItem.deername as String;
					var _albumname:String= photoItem.albumname as String;
					var _images:String=photoItem.image as String;
					var _score:String=photoItem.score as String;
					if(parseFloat(_score)<=100){
						counterscoremin++;
						scoremin.addItem({deername:_deername+"-"+_albumname});
					}else if(parseFloat(_score)>100 && parseFloat(_score)<=200){
						counterscoremed++;
						scoremedium.addItem({deername:_deername+"-"+_albumname});
						
					}else if(parseFloat(_score)>200){
						counterscoremax++;
						scoremax.addItem({deername:_deername+"-"+_albumname});
						
					}
					
					//if()
					
				}
				listscoremin.dataProvider=scoremin;
				listscoremedium.dataProvider=scoremedium;
				listscoremax.dataProvider=scoremax;
				scoreprinting.addItem({Score:counterscoremin,score:"0-100"});
				scoreprinting.addItem({Score:counterscoremed,score:"100-200"});
				scoreprinting.addItem({Score:counterscoremax,score:"200+"});
				scoreChart.dataProvider=scoreprinting;
				
			}
			
			
			
			////////////////////////////////datagrid edition filter finish///////////////////////////////	
			
			///////////////////////////////refence feature/////////////////////////
	
			/////////////////////////////////////////////update data statemain/////////////////////////////////////////////////
			private var idupdatedeername:int;
			protected function btnupdatedeername_clickHandler(event:MouseEvent):void
			{
				
				var namephoto:String=txtNamepaneltitle.text;
				albumphoto=sqlscore.resault();
				if(albumphoto.length!=0){
				currentState="updatephotodata";	
				
				imgupload.visible=true;
				txtdeernamesave.text=namephoto;
				txtNamepaneltitle.text=namephoto;
				
				for(var i:int =0;i<albumphoto.length;i++){
					var photoItem:Object = albumphoto[i];
					
					var _deername:String= photoItem.deername as String;
					
					if(_deername==txtdeernamesave.text){
						idupdatedeername=photoItem.id as int;
						var _albumname:String= photoItem.albumname as String;
						var _tagnumber:String= photoItem.tagnumber as String;
						var _ranchname:String= photoItem.ranchname as String;
						var _posturename:String= photoItem.posturename as String;
						var _images:String=photoItem.image as String;
						var byteArray:ByteArray;
						if(_images!=""){
							var encodedBytes:String = _images;
							
							var baseDecoder:Base64Decoder = new Base64Decoder();
							baseDecoder.decode(encodedBytes);
							byteArray= baseDecoder.toByteArray();
						}else{
							byteArray=null;
						}
						imgupload.source=byteArray;
						cmbalbumnameselection.selectedItem= _albumname;
						txttagnumbersave.text= _tagnumber;
						txtranchnamesave.text=_ranchname;
						txtposturenamesave.text=_posturename;
					}
				}
				
				}else Alert.show("No data ");	
				
			}
			var index:int;
			protected function updatesavephotoedition():void
			{
				var arrayauximage:ByteArray;
				var imageByteArray:ByteArray;
				var deernameaux:String;
				
				if(txtdeernamesave.text!=""){
				var albumphotoaux:ArrayCollection=new ArrayCollection();
				albumphoto=sqlscore.resault();
				
				for(var i:int=0;i<albumphoto.length;i++){
					var photoItem:Object = albumphoto[i];
					
					var _deername:String= photoItem.deername as String;
					
					if(_deername==txtNamepaneltitle.text){
						var _id:int=photoItem.id as int;
						var _albumname:String= photoItem.albumname as String;
						var _images:String=photoItem.image as String;
						
						
						
						var __score:String = photoItem.score as String;	
						var __deername:String=txtdeernamesave.text;
						deernameaux=__deername;
						var __albumname:String=cmbalbumnameselection.selectedItem;
						var __tagnumber:String=txttagnumbersave.text;
						var __ranchname:String=txtranchnamesave.text;
						var __posturename:String=txtposturenamesave.text;
						var encodedBytes:String="";
						if(bandera=="1"){
							
							if(fileReference.data!=null){
								imageByteArray=fileReference.data;
								var baseEncoder:Base64Encoder = new Base64Encoder();
								baseEncoder.encodeBytes(imageByteArray);
								encodedBytes= baseEncoder.toString();
							}
							//array.addItem({name:txtdeernamesave.text,type:cmbalbumnameselection.selectedItem});
						}
						
						if(encodedBytes!="") _images=encodedBytes; 
						
						sqlscore.updatephoto(idupdatedeername,__deername, __albumname,__tagnumber,__ranchname,__posturename,_images,__score);
						
						var uniquefinishscore:ArrayCollection=sqlscore.resaultscore(_deername);
						trace(uniquefinishscore.length);
						if(uniquefinishscore.length!=0){	
							var ScoreItem:Object = uniquefinishscore[0];
					   	
						var _idfinishscore:int= ScoreItem.id as int;
						
						sqlscore.updatebuckscorefinish(_idfinishscore,__deername);
						}
						array.removeItemAt(i);
						array.addItemAt({name:__deername,type:__albumname},i);
						index=i;
						array2refresh();
					}
					
					
				}
				
				
				txtdeernamesave.text="";
				txttagnumbersave.text="";
				txtranchnamesave.text="";
				txtposturenamesave.text="";
				imgupload.visible=false;
				
				currentState="stateMain";
				if(bandera=="1"){
				for(i=1;i<array2.length;i++){
					var objectaux:Object=array2[i];
					if(objectaux.name==deernameaux){
						imageforedition.source=objectaux.image;
					}
				}
				
				trace("entre");
				
				}
				
				txtNamepaneltitle.text=deernameaux;
				bandera="0";
				combophoto.selectedIndex=0;
				}else Alert.show("Insert value for deer");
				
			}
			
			
			
			protected function selectiontypefeature_clickHandler(event:MouseEvent):void
			{
				var index:int=birdlist.selectedIndex;
				if(index==0){currentState='RecordEarWidth'; referencetype='001';   }
				else if(index==1) 
				{
					if(lblEyetoEyewidth.text!="Eyeball Width"){ currentState='RecordEyetoEyeWidth'; referencetype='002';}
					else{ currentState='RecordEyeballWidthFeature'; referencetype='005';};
				}
				trace("reference feature:"+referencetype);
				manageCropper.beginDraw();
			}
			
			protected function toggle_EarWidthHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				
				if(arraypoints.length>1){
				var medida:Number=0;
				var x0:Number=0;
				var y0:Number=0;
				
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
						
						}else{
						
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
					
					
					}
					distance=distance/72;
				
					
						if(grade=="90"){
							currentState='RecorderInsideSpreadEstimate';
							var  stateReferenceRule:String=(parseInt(scoredeerage)<2 && referencetype=='005' ? "Rule1":
							parseInt(scoredeerage)<2 && referencetype=='004' ? "Rule2":
							parseInt(scoredeerage)<2 && referencetype=='003' ? "Rule3":
							parseInt(scoredeerage)<2 && referencetype=='001' ? "Rule4":
							parseInt(scoredeerage)<2 && referencetype=='002' ? "Rule5":
							parseInt(scoredeerage)>=2 && referencetype=='005' ? "Rule6":
							parseInt(scoredeerage)>=2 && referencetype=='004' ? "Rule7":
							parseInt(scoredeerage)>=2 && referencetype=='003' ? "Rule8":
							parseInt(scoredeerage)>=2 && referencetype=='001' ? "Rule9":
							parseInt(scoredeerage)>=2 && referencetype=='002' ? "Rule10":"Rule1");
						
							
							var mylistposition:XMLList = prefsXML.child("States").child("State");
							for(i=0;i<mylistposition.length();i++){
							if(mylistposition[i].attribute("Description")==scorestate){
								var rule:Number=Number(mylistposition[i].attribute(stateReferenceRule));
								inchvalue=distance/rule;
								trace("valueinch:"+inchvalue);
							}
								
							
						}
						//trace(mylistposition[0].attribute("Code"));
						
						}	
						else{
						
							currentState='MeasureInsideSpread';
							var  stateReferenceRule2:String=(parseInt(scoredeerage)<2 && referencetype=='005' ? "Rule1":
							parseInt(scoredeerage)<2 && referencetype=='004' ? "Rule2":
							parseInt(scoredeerage)<2 && referencetype=='003' ? "Rule3":
							parseInt(scoredeerage)<2 && referencetype=='001' ? "Rule4":
							parseInt(scoredeerage)<2 && referencetype=='002' ? "Rule5":
							parseInt(scoredeerage)>=2 && referencetype=='005' ? "Rule6":
							parseInt(scoredeerage)>=2 && referencetype=='004' ? "Rule7":
							parseInt(scoredeerage)>=2 && referencetype=='003' ? "Rule8":
							parseInt(scoredeerage)>=2 && referencetype=='001' ? "Rule9":
							parseInt(scoredeerage)>=2 && referencetype=='002' ? "Rule10":"Rule1");
						
						
						mylistposition = prefsXML.child("States").child("State");
						for( i=0;i<mylistposition.length();i++){
								if(mylistposition[i].attribute("Description")==scorestate){
								var rule2:Number=Number(mylistposition[i].attribute(stateReferenceRule2));
								inchvalue=distance/rule2;
								trace("valueinch:"+inchvalue);
								}
							
							}
						}
					manageCropper.endDraw();
				
			  
			  
				}	
					
			}
			
			
			
			public var grade:String="";
			protected function button4_positionphoto(event:MouseEvent):void
			{
				var mylistposition:XMLList = prefsXML.child("ModifiedImageOrientations").child("Orientation");
				
				var position:String =lblpositionphoto.text; 
				var key1:String="";
				var key2:String="";
				
				//trace(position.toString());	
				//birdList
				
				for(var i:int=0; i<mylistposition.length();i++){
					
					var desc:String=mylistposition[i].attribute("Description");
					
					trace(mylistposition[i].attribute("Description"));
					if(desc.toString()==position.toString()){
						trace("ntre");
						//var mylistcode:XMLList=prefsXML.child("ModifiedImageOrientations").child("Orientation").child("RelatedReferenceFeatures").child("RelatedReferenceFeature");
						//trace(mylistposition.child("RelatedReferenceFeatures").child("RelatedReferenceFeature").toString());
						var mylistcode:XMLList= mylistposition[i].child("RelatedReferenceFeatures");
						var mylistcode1:XMLList=mylistcode.child("RelatedReferenceFeature");
						//mylistcode.
						trace(mylistcode1.toString());
						key1=mylistcode1[0].attribute("key");
						key2=mylistcode1[1].attribute("key");
						trace(key1+"."+key2);
						grade=mylistposition[i].attribute("Code");
						trace("grado:"+grade);
					}
				}
				
				var mylistcodeImage:XMLList=prefsXML.child("ReferenceFeatures").child("ReferenceFeature");	
				var cont:int=0;
				var image1:String;
				var image2:String;
				for( i=1; i<mylistcodeImage.length();i++){
					
					//trace(mylistcodeImage[i].attribute("Description"));
					if(mylistcodeImage[i].attribute("Code")==key1.toString()){
						
						image1=mylistcodeImage[i].attribute("ImagePath");
						
						birdList[0]=image1;
						trace(mylistcodeImage[i].attribute("Description")+"--"+birdList[0]);
						textList[0]=mylistcodeImage[i].attribute("Description");
						
						
						
					}else if(mylistcodeImage[i].attribute("Code")==key2.toString()) {
						
						image2=mylistcodeImage[i].attribute("ImagePath");
						birdList[1]=image2;
						trace(mylistcodeImage[i].attribute("Description")+"--"+birdList[1]);
						textList[1]=mylistcodeImage[i].attribute("Description");
					}
					
					
				}
				
				if(grade!="0"){
					Alert.show("The view you have chosen is not an exact match to the Buscksocre requirements. Your result may vary."+"Do yo wish to continue", "Irregular Image Orientation COnfirmation",
						Alert.OK | Alert.CANCEL, this,
						alertListener, null, Alert.OK);
				}else{
					currentState='referenceFeature';
					birdlist.dataProvider.refresh();
					lblEarWidth.text=textList[0];
					lblEyetoEyewidth.text=textList[1];
				}
				//birdlist=new Array[image1),StringUtil.trim(image2)];
				
				
				
				
				//initCatalog(birdList);
			}
			
			private function alertListener(eventObj:CloseEvent):void {
				// Check to see if the OK button was pressed.
				if (eventObj.detail==Alert.OK) {
					currentState='referenceFeature';
					birdlist.dataProvider.refresh();
					lblEarWidth.text=textList[0];
					lblEyetoEyewidth.text=textList[1];
				}
			}
			
			
			//private static var birdList:Array ; 
			
			
			[Bindable] 
			private static var birdListAC:ArrayCollection;
			
			
			
			protected function birdlist_complete(event:FlexEvent):void
			{
				trace(birdList[0],birdList[1]);
				birdList[0]=StringUtil.trim(birdList[0]);
				birdList[1]=StringUtil.trim(birdList[1]);
				
				birdListAC = new ArrayCollection(birdList);
				
				birdlist.dataProvider = birdListAC;
				
				
				
			}
			public var cancel:String;
			public var si:String;
			private function alertListenerScoringFinal(eventObj:CloseEvent):void
			{
				// Check to see if the OK button was pressed.
				if (eventObj.detail==Alert.CANCEL) {
					cancel='1';
				}else{
					if (eventObj.detail==Alert.YES) {
						var adjustement:String=prefsXML.child("VelvetAdjustment").attribute("A").toString();
						
						if(scoreutils.Circumferenceleft1!="0")	scoreutils.Circumferenceleft1=(Number(scoreutils.Circumferenceleft1)*Number(adjustement)).toString();
						if(scoreutils.Circumferenceleft2!="0")	scoreutils.Circumferenceleft2=(Number(scoreutils.Circumferenceleft2)*Number(adjustement)).toString();
						if(scoreutils.Circumferenceleft3!="0")	scoreutils.Circumferenceleft3=(Number(scoreutils.Circumferenceleft3)*Number(adjustement)).toString();
						if(scoreutils.Circumferenceleft4!="0")	scoreutils.Circumferenceleft4=(Number(scoreutils.Circumferenceleft4)*Number(adjustement)).toString();
						if(scoreutils.Circumferencerigth1!="0")	scoreutils.Circumferencerigth1=(Number(scoreutils.Circumferencerigth1)*Number(adjustement)).toString();
						if(scoreutils.Circumferencerigth2!="0")	scoreutils.Circumferencerigth2=(Number(scoreutils.Circumferencerigth2)*Number(adjustement)).toString();
						if(scoreutils.Circumferencerigth3!="0")	scoreutils.Circumferencerigth3=(Number(scoreutils.Circumferencerigth3)*Number(adjustement)).toString();
						if(scoreutils.Circumferencerigth4!="0")	scoreutils.Circumferencerigth4=(Number(scoreutils.Circumferencerigth4)*Number(adjustement)).toString();
						trace("entre si")
					}
					else{
						trace("nada ajuste");
						
					}
					currentState='ScoringFinalBuck';
					
					txtDeerNickName.text=deernamefinishscore;
					txtLocationDeer.text=location;
					var someBirthday:Date = new Date();
					txtdatedeer.text=someBirthday.toDateString();
					imageforedition0.source=arraybyte;
					numberleftponitsgrid.text=cmbletftypical.selectedItem;
					numberrigthponitsgrid.text=cmbrigthtypical.selectedItem;
					insidespread.text=scoreutils.insidespread;
					mainbeamleftgrid.text=scoreutils.mainbeamleft;
					mainbeamrigthgrid.text=scoreutils.mainbeamrigth;
					mainbeamdiferene.text=(Math.abs(Number(scoreutils.mainbeamleft)-Number(scoreutils.mainbeamrigth))).toString();
					t1l.text=scoreutils.Typicalpointleft1;
					t1r.text=scoreutils.Typicalpointrigth1;
					t1d.text=(Math.abs(Number(scoreutils.Typicalpointleft1)-Number(scoreutils.Typicalpointrigth1))).toString();
					t2l.text=scoreutils.Typicalpointleft2;
					t2r.text=scoreutils.Typicalpointrigth2;
					t2d.text=(Math.abs(Number(scoreutils.Typicalpointleft2)-Number(scoreutils.Typicalpointrigth2))).toString();
					t3l.text=scoreutils.Typicalpointleft3;
					t3r.text=scoreutils.Typicalpointrigth3;
					t3d.text=(Math.abs(Number(scoreutils.Typicalpointleft3)-Number(scoreutils.Typicalpointrigth3))).toString();
					t4l.text=scoreutils.Typicalpointleft4;
					t4r.text=scoreutils.Typicalpointrigth4;
					t4d.text=(Math.abs(Number(scoreutils.Typicalpointleft4)-Number(scoreutils.Typicalpointrigth4))).toString();
					t5l.text=scoreutils.Typicalpointleft5;
					t5r.text=scoreutils.Typicalpointrigth5;
					t5d.text=(Math.abs(Number(scoreutils.Typicalpointleft5)-Number(scoreutils.Typicalpointrigth5))).toString();
					t6l.text=scoreutils.Typicalpointleft6;
					t6r.text=scoreutils.Typicalpointrigth6;
					t6d.text=(Math.abs(Number(scoreutils.Typicalpointleft6)-Number(scoreutils.Typicalpointrigth6))).toString();
					t7l.text=scoreutils.Typicalpointleft7;
					t7r.text=scoreutils.Typicalpointrigth7;
					t7d.text=(Math.abs(Number(scoreutils.Typicalpointleft7)-Number(scoreutils.Typicalpointrigth7))).toString();
					t8l.text=scoreutils.Typicalpointleft8;
					t8r.text=scoreutils.Typicalpointrigth8;
					t8d.text=(Math.abs(Number(scoreutils.Typicalpointleft8)-Number(scoreutils.Typicalpointrigth8))).toString();
					t9l.text=scoreutils.Typicalpointleft9;
					t9r.text=scoreutils.Typicalpointrigth9;
					t9d.text=(Math.abs(Number(scoreutils.Typicalpointleft9)-Number(scoreutils.Typicalpointrigth9))).toString();
					t10l.text=scoreutils.Typicalpointleft10;
					t10r.text=scoreutils.Typicalpointrigth10;
					t10d.text=(Math.abs(Number(scoreutils.Typicalpointleft10)-Number(scoreutils.Typicalpointrigth10))).toString();
					
					c1l.text=scoreutils.Circumferenceleft1;
					c1r.text=scoreutils.Circumferencerigth1;
					c1d.text=(Math.abs(Number(scoreutils.Circumferenceleft1)-Number(scoreutils.Circumferencerigth1))).toString();
					c2l.text=scoreutils.Circumferenceleft2;
					c2r.text=scoreutils.Circumferencerigth2;
					c2d.text=(Math.abs(Number(scoreutils.Circumferenceleft2)-Number(scoreutils.Circumferencerigth2))).toString();
					c3l.text=scoreutils.Circumferenceleft3;
					c3r.text=scoreutils.Circumferencerigth3;
					c3d.text=(Math.abs(Number(scoreutils.Circumferenceleft3)-Number(scoreutils.Circumferencerigth3))).toString();
					c4l.text=scoreutils.Circumferenceleft4;
					c4r.text=scoreutils.Circumferencerigth4;
					c4d.text=(Math.abs(Number(scoreutils.Circumferenceleft4)-Number(scoreutils.Circumferencerigth4))).toString();
					a1.text=scoreutils.Abnormalpointleft1;
					ar1.text=scoreutils.Abnormalpointrigth1;
					a2.text=scoreutils.Abnormalpointleft2;
					ar2.text=scoreutils.Abnormalpointrigth2;
					a3.text=scoreutils.Abnormalpointleft3;
					ar3.text=scoreutils.Abnormalpointrigth3;
					a4.text=scoreutils.Abnormalpointleft4;
					ar4.text=scoreutils.Abnormalpointrigth4;
					a5.text=scoreutils.Abnormalpointleft5;
					ar5.text=scoreutils.Abnormalpointrigth5;
					a6.text=scoreutils.Abnormalpointleft6;
					ar6.text=scoreutils.Abnormalpointrigth6;
					a7.text=scoreutils.Abnormalpointleft7;
					ar7.text=scoreutils.Abnormalpointrigth7;
					a8.text=scoreutils.Abnormalpointleft8;
					ar8.text=scoreutils.Abnormalpointrigth8;
					a9.text=scoreutils.Abnormalpointleft9;
					ar9.text=scoreutils.Abnormalpointrigth9;
					a10.text=scoreutils.Abnormalpointleft10;
					ar10.text=scoreutils.Abnormalpointrigth10;
					a11.text=scoreutils.Abnormalpointleft11;
					ar11.text=scoreutils.Abnormalpointrigth11;
					a12.text=scoreutils.Abnormalpointleft12;
					ar12.text=scoreutils.Abnormalpointrigth12;
					a13.text=scoreutils.Abnormalpointleft13;
					ar13.text=scoreutils.Abnormalpointrigth13;
					a14.text=scoreutils.Abnormalpointleft14;
					ar14.text=scoreutils.Abnormalpointrigth14;
					a15.text=scoreutils.Abnormalpointleft15;
					ar15.text=scoreutils.Abnormalpointrigth15;
					a16.text=scoreutils.Abnormalpointleft16;
					ar16.text=scoreutils.Abnormalpointrigth16;
					a17.text=scoreutils.Abnormalpointleft17;
					ar17.text=scoreutils.Abnormalpointrigth17;
					a18.text=scoreutils.Abnormalpointleft18;
					ar18.text=scoreutils.Abnormalpointrigth18;
					a19.text=scoreutils.Abnormalpointleft19;
					ar19.text=scoreutils.Abnormalpointrigth19;
					a20.text=scoreutils.Abnormalpointleft20;
					ar20.text=scoreutils.Abnormalpointrigth20;
					var totalleft:Number=scoreutils.calculateleft();
					var totalrigth:Number=scoreutils.calculaterigth();
					var totalabnormal:Number=scoreutils.calculateabnormal();
					var totaldiference:Number=Math.abs(totalleft-totalrigth);
					tleft.text=totalleft.toString();
					trigth.text=totalrigth.toString();
					tdiference.text=totaldiference.toString();
					
					grossscore.text=(totalleft+ totalrigth+ totalabnormal).toString();
					totaldiferencefinal.text=totaldiference.toString();
					
				}
				
			}
			
			
			
			protected function ScoringDeer_btn(event:MouseEvent):void
			{
				manageCropper.endDraw();
				Alert.show("Is this deer in velvet", "Velvet Adjustement",
					Alert.YES | Alert.NO | Alert.CANCEL, this, alertListenerScoringFinal)
					
				
			}
			public var statescoringview:String;
			protected function btn_scoringreview(event:MouseEvent):void
			{
				var scoresheet:ArrayCollection=new ArrayCollection();
				scoresheet=sqlscore.resaultscore(deernamefinishscore);
				trace("tamaño:"+scoresheet.length)
				if(scoresheet.length==1){
					var photoItem:Object =scoresheet[0];
					statescoringview=currentState;
					currentState='ScoringFinalBuck';
					txtDeerNickName.text= photoItem.deername as String;
					txtLocationDeer.text= photoItem.location as String;
					txtdatedeer.text=photoItem.date as String;
				
				
					if(arraybyte!=null){
					imageforedition0.source=arraybyte;
					}
				var sumleft:Number=0;
				var sumrigth:Number=0;
				var diference:Number=0;
				numberleftponitsgrid.text=photoItem.leftpoints as String;
				numberrigthponitsgrid.text=photoItem.rigthpoints as String;
				insidespread.text=photoItem.insidespread as String;
				mainbeamleftgrid.text=photoItem.mainbeamleft as String;
				mainbeamrigthgrid.text=photoItem.mainbeamrigth as String;
				mainbeamdiferene.text=(Math.abs(Number(photoItem.mainbeamleft as String)-Number(photoItem.mainbeamrigth as String))).toString() ;
				
				sumleft=sumleft+Number(mainbeamleftgrid.text);
				sumrigth=sumrigth+Number(mainbeamrigthgrid.text);
				diference=diference+Number(mainbeamdiferene.text);
				
				t1l.text=photoItem.Typicalpointleft1 as String;
				t1r.text=photoItem.Typicalpointrigth1 as String;
				t1d.text=(Math.abs(Number(photoItem.Typicalpointleft1 as String)-Number(photoItem.Typicalpointrigth1 as String))).toString() ;
				
				sumleft=sumleft+Number(t1l.text);
				sumrigth=sumrigth+Number(t1r.text);
				diference=diference+Number(t1d.text);
				
				t2l.text=photoItem.Typicalpointleft2 as String;
				t2r.text=photoItem.Typicalpointrigth2 as String;
				t2d.text=(Math.abs(Number(photoItem.Typicalpointleft2 as String)-Number(photoItem.Typicalpointrigth2 as String))).toString();
				
				sumleft=sumleft+Number(t2l.text);
				sumrigth=sumrigth+Number(t2r.text);
				diference=diference+Number(t2d.text);
				
				t3l.text=photoItem.Typicalpointleft3 as String;
				t3r.text=photoItem.Typicalpointrigth3 as String;
				t3d.text=(Math.abs(Number(photoItem.Typicalpointleft3 as String)-Number(photoItem.Typicalpointrigth3 as String))).toString();
				
				sumleft=sumleft+Number(t3l.text);
				sumrigth=sumrigth+Number(t3r.text);
				diference=diference+Number(t3d.text);
				
				
				t4l.text=photoItem.Typicalpointleft4 as String;
				t4r.text=photoItem.Typicalpointrigth4 as String;
				t4d.text=(Math.abs(Number(photoItem.Typicalpointleft4 as String)-Number(photoItem.Typicalpointrigth4 as String))).toString();
				
				sumleft=sumleft+Number(t4l.text);
				sumrigth=sumrigth+Number(t4r.text);
				diference=diference+Number(t4d.text);
				
				t5l.text=photoItem.Typicalpointleft5 as String;
				t5r.text=photoItem.Typicalpointrigth5 as String;
				t5d.text=(Math.abs(Number(photoItem.Typicalpointleft5 as String)-Number(photoItem.Typicalpointrigth5 as String))).toString();
				
				sumleft=sumleft+Number(t5l.text);
				sumrigth=sumrigth+Number(t5r.text);
				diference=diference+Number(t5d.text);
				
				t6l.text=photoItem.Typicalpointleft6 as String;
				t6r.text=photoItem.Typicalpointrigth6 as String;
				t6d.text=(Math.abs(Number(photoItem.Typicalpointleft6 as String)-Number(photoItem.Typicalpointrigth6 as String))).toString();
				
				sumleft=sumleft+Number(t6l.text);
				sumrigth=sumrigth+Number(t6r.text);
				diference=diference+Number(t6d.text);
				
				t7l.text=photoItem.Typicalpointleft7 as String;
				t7r.text=photoItem.Typicalpointrigth7 as String;
				t7d.text=(Math.abs(Number(photoItem.Typicalpointleft7 as String)-Number(photoItem.Typicalpointrigth7 as String))).toString();
				
				
				sumleft=sumleft+Number(t7l.text);
				sumrigth=sumrigth+Number(t7r.text);
				diference=diference+Number(t7d.text);
				
				t8l.text=photoItem.Typicalpointleft8 as String;
				t8r.text=photoItem.Typicalpointrigth8 as String;
				t8d.text=(Math.abs(Number(photoItem.Typicalpointleft8 as String)-Number(photoItem.Typicalpointrigth8 as String))).toString();
				
				sumleft=sumleft+Number(t8l.text);
				sumrigth=sumrigth+Number(t8r.text);
				diference=diference+Number(t8d.text);
				
				
				t9l.text=photoItem.Typicalpointleft9 as String;
				t9r.text=photoItem.Typicalpointrigth9 as String;
				t9d.text=(Math.abs(Number(photoItem.Typicalpointleft9 as String)-Number(photoItem.Typicalpointrigth9 as String))).toString();
				
				sumleft=sumleft+Number(t9l.text);
				sumrigth=sumrigth+Number(t9r.text);
				diference=diference+Number(t9d.text);
				
				t10l.text=photoItem.Typicalpointleft10 as String;
				t10r.text=photoItem.Typicalpointrigth10 as String;
				t10d.text=(Math.abs(Number(photoItem.Typicalpointleft10 as String)-Number(photoItem.Typicalpointrigth10 as String))).toString();
				
				sumleft=sumleft+Number(t10l.text);
				sumrigth=sumrigth+Number(t10r.text);
				diference=diference+Number(t10d.text);
				
				
				c1l.text=photoItem.Circumferenceleft1 as String;
				c1r.text=photoItem.Circumferencerigth1 as String;
				c1d.text=(Math.abs(Number(photoItem.Circumferenceleft1 as String)-Number(photoItem.Circumferencerigth1 as String))).toString();
				
				sumleft=sumleft+Number(c1l.text);
				sumrigth=sumrigth+Number(c1r.text);
				diference=diference+Number(c1d.text);
				
				c2l.text=photoItem.Circumferenceleft2 as String;
				c2r.text=photoItem.Circumferencerigth2 as String;
				c2d.text=(Math.abs(Number(photoItem.Circumferenceleft2 as String)-Number(photoItem.Circumferencerigth2 as String))).toString();
				
				sumleft=sumleft+Number(c2l.text);
				sumrigth=sumrigth+Number(c2r.text);
				diference=diference+Number(c2d.text);
				
				
				c3l.text=photoItem.Circumferenceleft3 as String;
				c3r.text=photoItem.Circumferencerigth3 as String;
				c3d.text=(Math.abs(Number(photoItem.Circumferenceleft3 as String)-Number(photoItem.Circumferencerigth3 as String))).toString();
				
				sumleft=sumleft+Number(c3l.text);
				sumrigth=sumrigth+Number(c3r.text);
				diference=diference+Number(c3d.text);
				
				
				c4l.text=photoItem.Circumferenceleft4 as String;
				c4r.text=photoItem.Circumferencerigth4 as String;
				c4d.text=(Math.abs(Number(photoItem.Circumferenceleft4 as String)-Number(photoItem.Circumferencerigth4 as String))).toString();
				
				sumleft=sumleft+Number(c4l.text);
				sumrigth=sumrigth+Number(c4r.text);
				diference=diference+Number(c4d.text);
				
				
				a1.text=photoItem.Abnormalpointleft1 as String;
				ar1.text=photoItem.Abnormalpointrigth1 as String;	
				a2.text=photoItem.Abnormalpointleft2 as String;
				ar2.text=photoItem.Abnormalpointrigth2 as String;
				a3.text=photoItem.Abnormalpointleft3 as String;
				ar3.text=photoItem.Abnormalpointrigth3 as String;
				a4.text=photoItem.Abnormalpointleft4 as String;
				ar4.text=photoItem.Abnormalpointrigth4 as String;
				a5.text=photoItem.Abnormalpointleft5 as String;
				ar5.text=photoItem.Abnormalpointrigth5 as String;
				a6.text=photoItem.Abnormalpointleft6 as String;
				ar6.text=photoItem.Abnormalpointrigth6 as String;
				a7.text=photoItem.Abnormalpointleft7 as String;
				ar7.text=photoItem.Abnormalpointrigth7 as String;
				a8.text=photoItem.Abnormalpointleft8 as String;
				ar8.text=photoItem.Abnormalpointrigth8 as String;
				a9.text=photoItem.Abnormalpointleft9 as String;
				ar9.text=photoItem.Abnormalpointrigth9 as String;
				a10.text=photoItem.Abnormalpointleft10 as String;
				ar10.text=photoItem.Abnormalpointrigth10 as String;
				a11.text=photoItem.Abnormalpointleft11 as String;
				ar11.text=photoItem.Abnormalpointrigth11 as String;
				a12.text=photoItem.Abnormalpointleft12 as String;
				ar12.text=photoItem.Abnormalpointrigth12 as String;
				a13.text=photoItem.Abnormalpointleft13 as String;
				ar13.text=photoItem.Abnormalpointrigth13 as String;
				a14.text=photoItem.Abnormalpointleft14 as String;
				ar14.text=photoItem.Abnormalpointrigth14 as String;
				a15.text=photoItem.Abnormalpointleft15 as String;
				ar15.text=photoItem.Abnormalpointrigth15 as String;
				a16.text=photoItem.Abnormalpointleft16 as String;
				ar16.text=photoItem.Abnormalpointrigth16 as String;
				a17.text=photoItem.Abnormalpointleft17 as String;
				ar17.text=photoItem.Abnormalpointrigth17 as String;
				a18.text=photoItem.Abnormalpointleft18 as String;
				ar18.text=photoItem.Abnormalpointrigth18 as String;
				a19.text=photoItem.Abnormalpointleft19 as String;
				ar19.text=photoItem.Abnormalpointrigth19 as String;
				a20.text=photoItem.Abnormalpointleft20 as String;
				ar20.text=photoItem.Abnormalpointrigth20 as String;
				
				
				tleft.text=sumleft.toString();
				trigth.text=sumrigth.toString();
				tdiference.text=diference.toString();
				
				grossscore.text=photoItem.socorefinal as String;
				totaldiferencefinal.text=diference.toString();
				}else{
					Alert.show("No data found deer");
				}
				
				
			}
			
			protected function button5_numberpoint(event:MouseEvent):void
			{
				txttypicalleft.text=cmbletftypical.selectedItem;
				txttypicalrigth.text=cmbrigthtypical.selectedItem;
				
			}
			///////////////zoom image buckscore//////////////////////////////////////////////
			public function doZoomProduct (event:MouseEvent): void {
				
				if (zoomProduct.isPlaying) {
					zoomProduct.reverse();
					trace("hola reverse");
				}
				else {
					// If this is a ROLL_OUT event, play the effect backwards. 
					
					// If this is a ROLL_OVER event, play the effect forwards.
					zoomProduct.play([event.target], event.type == MouseEvent.ROLL_OUT ? true : false);
					trace("hola play");
				}
				
			}
			
			private function launchPopUp(e:MouseEvent):void {
				
				var win : Window = new Window();
				win.sourceImage = imagezoomscoring.source.toString();
				win.title =  "Buckscore";
				PopUpManager.addPopUp(win,this,true);
				PopUpManager.centerPopUp(win);
				
			}
			private function launchPopUp2(e:MouseEvent):void {
				
				var win : Window = new Window();
				win.sourceImage = imagebusckscorezoom.source.toString();
				win.title =  "Buckscore";
				PopUpManager.addPopUp(win,this,true);
				PopUpManager.centerPopUp(win);
				
			}
			
			/////////////////////////////finish////////////////////////////////////////////////
			
			
			
			
			////////////////////////////navigation in points ///////////////////
			protected function TypicalPoints_clickHandler(event:MouseEvent):void
			{	
				currentState='MeasureLeftMainBeam';
				txttypicalleft.text=cmbletftypical.selectedItem;
				txttypicalrigth.text=cmbrigthtypical.selectedItem;
				manageCropper.endDraw();
				
			}
			
			protected function LeftMainBeam_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLeftMainBeamLine';	
				txtRecordMainLeftPoints.text=cmbletftypical.selectedItem;
				txtRecordMainRigthPoints.text=cmbrigthtypical.selectedItem;
				manageCropper.beginDraw();
			}
			
			
			
			protected function MeasureRigthMainBeam_clickHandler(event:MouseEvent):void
			{
				currentState='RecordRigthMainBeam';
				txtTypicalLeftRecordRigth.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordRigth.text=cmbrigthtypical.selectedItem;
				manageCropper.beginDraw();
			}
			
			
			
			
			
			
			
			
			
			
			
			/////////////////////abnormal points ////////////////////////////////////
			
			
			protected function MeasureAnormalPoints_clickHandler(event:MouseEvent):void
			{
				
				
				if(parseInt(cmbabnormalpointsleft.selectedItem)==0 && parseInt(cmbabnormalpointsrigth.selectedItem)==0){
					currentState='CompleteScoringfinal';
				}
				else if(parseInt(cmbabnormalpointsleft.selectedItem)>0){
					currentState='MeasureLeftAnormalTine';
				}
				else if(parseInt(cmbabnormalpointsrigth.selectedItem)>0){
					currentState='MeasureRigthAnormalTine';
				}
			
				txtleftanormalpoints.text=cmbabnormalpointsleft.selectedItem;
				txtrigthanormalpoints.text=cmbabnormalpointsrigth.selectedItem;	
				manageCropper.endDraw();
			}
			
			
			
			
			/////////////////////////////////Close General buckscore general//////////////
			protected function closebutton_buckscore():void{
				currentState='stateMain';
			}
			
			
			
			
			protected function BackMeasureInsideSpread_clickHandler(event:MouseEvent):void
			{
				var index:int=birdlist.selectedIndex;
				trace("indez-->"+index);
				if(index==0){currentState='RecordEarWidth';}
				else if(index==1) 
				{
					if(lblEyetoEyewidth.text!="Eyeball Width") currentState='RecordEyetoEyeWidth';
					else currentState='RecordEyeballWidthFeature';
				}
				manageCropper.beginDraw();
			}
			
			//////////////////////////////////////////////////////////DELELTE PHOTO/////////////////////////////////////////////////////////
			
			protected function deletephoto_clickHandler(event:MouseEvent):void
			{
				var deletename:String=txtNamepaneltitle.text;
				if(deletename.toLowerCase()==""){
					Alert.show("Selection DeerName");
					trace("no entro");
					
				}else{
					sqlscore.remove(deletename);
					var deletephotocolecction:ArrayCollection=new ArrayCollection();
					for(var i:int=0;i<array.length;i++){
						var photoItem:Object = array[i];
						trace("photo"+photoItem.name);
						if(photoItem.name==txtNamepaneltitle.text){
							array.removeItemAt(i);
							array2.removeItemAt(i);
							
							trace("entro o no");
						}
					}
					txtNamepaneltitle.text="Name";
					imageforedition.source="";
					btnScoreProccess.enabled=false;
					//manageCropper.clearImage();       descomentarlooooooooooooooooo
					btndeerscoresheet.enabled=false;
					btndeerinfo.enabled=false;
					trace("entro");
				}
				
			}
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			protected function printingscore_clickHandler(event:MouseEvent):void
			{
				// Create an instance of the FlexPrintJob class.
				var printJob:FlexPrintJob = new FlexPrintJob();
				
				// Start the print job.
				if (printJob.start() != true) return;
				
				
				// Add the object to print. Do not scale it.
				//printJob.p
				printJob.addObject(printingbody, FlexPrintJobScaleType.SHOW_ALL);
		
				//printJob.addObject(printingbody,FlexPrintJobScaleType.SHOW_ALL);
				
				// Send the job to the printer.
				printJob.send();
			}
			
			protected function mygridexpand_changeHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			/////////////////////////change of list in state Expand////////////////////////////////////////////	
			
			protected function listscoremin_changeHandler(event:Event):void
			{
				var filter:Object=listscoremin.selectedItem;
				trace(filter.deername);
				var filtername:String=filter.deername;	
				
				if(filter!=null){
					trace(filtername.length);
					for(var i:int=0;i<filtername.length;i++){
						trace(filtername.charAt(i).toString());
						if(filtername.charAt(i)=="-"){
							
							txtexpandfilter.text=filtername.substring(0,i);
							filter2();
							
							break;
						}
						
					}
					
				}
				
			}
			
			protected function listscoremedium_changeHandler(event:IndexChangeEvent):void
			{
				var filter:Object=listscoremedium.selectedItem;
				trace(filter.deername);
				var filtername:String=filter.deername;	
				
				if(filter!=null){
					trace(filtername.length);
					for(var i:int=0;i<filtername.length;i++){
						trace(filtername.charAt(i).toString());
						if(filtername.charAt(i)=="-"){
							
							txtexpandfilter.text=filtername.substring(0,i);
							filter2();
							
							break;
						}
						
					}
					
				}
				
			}
			
			protected function listscoremax_changeHandler(event:IndexChangeEvent):void
			{
				var filter:Object=listscoremax.selectedItem;
				trace(filter.deername);
				var filtername:String=filter.deername;	
				
				if(filter!=null){
					trace(filtername.length);
					for(var i:int=0;i<filtername.length;i++){
						trace(filtername.charAt(i).toString());
						if(filtername.charAt(i)=="-"){
							
							txtexpandfilter.text=filtername.substring(0,i);
							filter2();
							
							break;
						}
						
					}
					
				}
				
			}
			/////////////////////////////////////FINISH//////////////////////////////////////7	
///////////////////////////////////////library SCORE EVALUATION////////////////////////////////		
			public var location:String;
			public var deernamefinishscore:String;
			protected function scorephoto_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				currentState='positionphoto'
				scoredeerage=cmbage.selectedItem;
				scorestate=cmbstate.selectedItem;
				//deernamefinishscore=txtNamepaneltitle.text;
				if(cmbstate.selectedIndex>9)
				location="00"+cmbstate.selectedIndex;
				else
				location="000"+cmbstate.selectedIndex;	
				trace(location);
				trace("age:"+scoredeerage+" state:"+scorestate);
			}
			
			protected function toggle_RecorderInsideSpread(event:MouseEvent):void
			{
				
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				if(arraypoints.length>1){
				var medida:Number=0;
				var x0:Number=0;
				var y0:Number=0;
				for(var i:int=0;i<arraypoints.length;i++){
					trace(arraypoints[i].x);
					trace(arraypoints[i].y);
					if(i==0){
						x0=Number(arraypoints[i].x);
						y0=Number(arraypoints[i].y);
						
					}else{
						
						distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
						x0=arraypoints[i].x;
						y0=arraypoints[i].y
					}
					
					
				}
				distance=distance/72;
				var options:XMLList;
				
					options=prefsXML.child("Equations").child("Equation");
					
					var j:int=0;
					for(i=0;options.length();i++){
						if(options[i].attribute("ImageOrientation")==grade){
							myangleoptions=options[i].child("Entity");
							j=i;
							trace(j);
							trace(myangleoptions.toString());
							break;
						}
					}
					
					trace(myangleoptions.toString());
					
					var ldistance:Number=(distance)/(inchvalue);
					
					
					var ISP:Number=Number(myangleoptions[0].attribute("A"))*ldistance+
					Number(myangleoptions[0].attribute("B"));
					scoreutils.insidespread=ISP.toString();
					
					
					
					currentState='NumberTypicalPoints';
					lbllasmeasurement.text="Inside Spread:"+scoreutils.insidespread.toString();
				
				manageCropper.endDraw();
			
				}
			}
			
			protected function RecorderInsideSpreadEstimate_clickHandler(event:MouseEvent):void
			{
				
				currentState='NumberTypicalPoints';
				lbllasmeasurement.text="Inside Spread: To Be Determined";
				
			}
			
			protected function RecordLeftMainBeamLine_clickHandler(event:MouseEvent):void
			{
				
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					distance=distance/72;
				var ISP:Number;
				var ldistance:Number=(distance)/(inchvalue);
				if(grade=='0'){
					ISP=Number(myangleoptions[1].attribute("A"))*ldistance+Number(myangleoptions[1].attribute("B"))+
						Number(myangleoptions[1].attribute("C"))*Number(cmbletftypical.selectedItem);
					
				}else{
					ISP=Number(myangleoptions[1].attribute("A"))*ldistance+Number(myangleoptions[1].attribute("B"))+
						Number(myangleoptions[1].attribute("C"))*Number(cmbletftypical.selectedItem);
				}
				scoreutils.mainbeamleft=ISP.toString();
				
				
				currentState='MeasureRigthMainBeam';
				txtTypicalLeftPonitsRigthMain.text=cmbletftypical.selectedItem;
				txtTypicalRigthPonitsRigthMain.text=cmbrigthtypical.selectedItem;
				lbllasmeasurement.text="LeftMainBeam="+scoreutils.mainbeamleft.toString();
				manageCropper.endDraw();
				
				}
			}
			
			
			protected function RecordRigthMainBeam_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					distance=distance/72;
					var ISP:Number;
					var ldistance:Number=(distance)/(inchvalue);
					if(grade=='0'){
						ISP=Number(myangleoptions[1].attribute("A"))*ldistance+Number(myangleoptions[1].attribute("B"))+
						Number(myangleoptions[1].attribute("C"))*Number(cmbrigthtypical.selectedItem);
					
					}else{
						ISP=Number(myangleoptions[2].attribute("A"))*ldistance+Number(myangleoptions[2].attribute("B"))+
						Number(myangleoptions[2].attribute("C"))*Number(cmbrigthtypical.selectedItem);
					}
					scoreutils.mainbeamrigth=ISP.toString();
				
					currentState='MeasureLeftTine';
				
					lbllasmeasurement.text="Rigth Main Beam="+scoreutils.mainbeamrigth.toString();
					manageCropper.endDraw();
				}
			}
			
			/////////////typical points lef//////////////////
			protected function MeasureLeftTine_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLeftTineLine';
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Recorder Left Tine "+numbertypicalleft;
				manageCropper.beginDraw();
				
			}
			public var cont:int=0;
			protected function RecordLeftTineLine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					distance=distance/72;
				var ISP:Number;
				var ldistance:Number=(distance)/(inchvalue);
				if(numbertypicalleft<parseInt(cmbletftypical.selectedItem)){
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[3+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[3+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numbertypicalleft==1){
						scoreutils.Typicalpointleft1=ISP.toString();
						if(scoreutils.Typicalpointrigth1=="1") scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
					}	
					if(numbertypicalleft==2){
						scoreutils.Typicalpointleft2=ISP.toString();
						if(scoreutils.Typicalpointrigth2=="1") scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
					}	
					if(numbertypicalleft==3){
						scoreutils.Typicalpointleft3=ISP.toString();
						if(scoreutils.Typicalpointrigth3=="1") scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
					}	
					if(numbertypicalleft==4){
						scoreutils.Typicalpointleft4=ISP.toString();
						if(scoreutils.Typicalpointrigth4=="1") scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
					}	
					if(numbertypicalleft==5){
						scoreutils.Typicalpointleft5=ISP.toString();
						if(scoreutils.Typicalpointrigth5=="1") scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
					}	
					if(numbertypicalleft==6){
						scoreutils.Typicalpointleft6=ISP.toString();
						if(scoreutils.Typicalpointrigth6=="1") scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
					}	
					if(numbertypicalleft==7){
						scoreutils.Typicalpointleft7=ISP.toString();
						if(scoreutils.Typicalpointrigth7=="1") scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
					}	
					if(numbertypicalleft==8){
						scoreutils.Typicalpointleft8=ISP.toString();
						if(scoreutils.Typicalpointrigth8=="1") scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
					}	
					if(numbertypicalleft==9){
						scoreutils.Typicalpointleft9=ISP.toString();
						if(scoreutils.Typicalpointrigth9=="1") scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
					}	
					if(numbertypicalleft==10){
						scoreutils.Typicalpointleft10=ISP.toString();
						if(scoreutils.Typicalpointrigth10=="1") scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
					}	
					
					currentState='MeasureLeftTine';
					
					
					lbllasmeasurement.text="Typical Left Line "+numbertypicalleft+"="+ISP.toString();
					numbertypicalleft++;
					btnRecordLeftTine.label="Measure Left Tine "+numbertypicalleft;
				}else{
					if(grade=='0')
					{
						
							ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
					}else{
						
							ISP=Number(myangleoptions[3+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[3+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numbertypicalleft==1){
						scoreutils.Typicalpointleft1=ISP.toString();
						if(scoreutils.Typicalpointrigth1=="1") scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
					}	
					if(numbertypicalleft==2){
						scoreutils.Typicalpointleft2=ISP.toString();
						if(scoreutils.Typicalpointrigth2=="1") scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
					}	
					if(numbertypicalleft==3){
						scoreutils.Typicalpointleft3=ISP.toString();
						if(scoreutils.Typicalpointrigth3=="1") scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
					}	
					if(numbertypicalleft==4){
						scoreutils.Typicalpointleft4=ISP.toString();
						if(scoreutils.Typicalpointrigth4=="1") scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
					}	
					if(numbertypicalleft==5){
						scoreutils.Typicalpointleft5=ISP.toString();
						if(scoreutils.Typicalpointrigth5=="1") scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
					}	
					if(numbertypicalleft==6){
						scoreutils.Typicalpointleft6=ISP.toString();
						if(scoreutils.Typicalpointrigth6=="1") scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
					}	
					if(numbertypicalleft==7){
						scoreutils.Typicalpointleft7=ISP.toString();
						if(scoreutils.Typicalpointrigth7=="1") scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
					}	
					if(numbertypicalleft==8){
						scoreutils.Typicalpointleft8=ISP.toString();
						if(scoreutils.Typicalpointrigth8=="1") scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
					}	
					if(numbertypicalleft==9){
						scoreutils.Typicalpointleft9=ISP.toString();
						if(scoreutils.Typicalpointrigth9=="1") scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
					}	
					if(numbertypicalleft==10){
						scoreutils.Typicalpointleft10=ISP.toString();
						if(scoreutils.Typicalpointrigth10=="1") scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
					}	
					currentState='MeasureRigthTine';
					lbllasmeasurement.text="Typical Left Line "+numbertypicalleft+"="+ISP.toString();
					numbertypicalleft=1;
					cont=0;
				}
				manageCropper.endDraw();
			  }
			}
			
			/////////////typical points Rigth//////////////////
			
			protected function MeasureRigthTine_clickHandler(event:MouseEvent):void
			{
				currentState='RecordRigthTineLine';
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Record Rigth Tine "+numbertypicalrigth;
				manageCropper.beginDraw();
				
			}
			protected function RecordRigthTineLine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
				
				distance=distance/72;
				var ISP:Number;
				var ldistance:Number=(distance)/(inchvalue);
				if(numbertypicalrigth<parseInt(cmbrigthtypical.selectedItem)){
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[4+2*cont].attribute("A"))*ldistance+Number(myangleoptions[4+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0) cont++;
					if(numbertypicalrigth==1){
						scoreutils.Typicalpointrigth1=ISP.toString();
						if(scoreutils.Typicalpointleft1=="1") scoreutils.Typicalpointleft1=scoreutils.Typicalpointrigth1;
					}	
					if(numbertypicalrigth==2){
						scoreutils.Typicalpointrigth2=ISP.toString();
						if(scoreutils.Typicalpointleft2=="1") scoreutils.Typicalpointleft2=scoreutils.Typicalpointrigth2;
					}	
					if(numbertypicalrigth==3){
						scoreutils.Typicalpointrigth3=ISP.toString();
						if(scoreutils.Typicalpointleft3=="1") scoreutils.Typicalpointleft3=scoreutils.Typicalpointrigth3;
					}	
					if(numbertypicalrigth==4){
						scoreutils.Typicalpointrigth4=ISP.toString();
						if(scoreutils.Typicalpointleft4=="1") scoreutils.Typicalpointleft4=scoreutils.Typicalpointrigth4;
					}	
					if(numbertypicalrigth==5){
						scoreutils.Typicalpointrigth5=ISP.toString();
						if(scoreutils.Typicalpointleft5=="1") scoreutils.Typicalpointleft5=scoreutils.Typicalpointrigth5;
					}	
					if(numbertypicalrigth==6){
						scoreutils.Typicalpointrigth6=ISP.toString();
						if(scoreutils.Typicalpointleft6=="1") scoreutils.Typicalpointleft6=scoreutils.Typicalpointrigth6;
					}	
					if(numbertypicalrigth==7){
						scoreutils.Typicalpointrigth7=ISP.toString();
						if(scoreutils.Typicalpointleft7=="1") scoreutils.Typicalpointleft7=scoreutils.Typicalpointrigth7;
					}	
					if(numbertypicalrigth==8){
						scoreutils.Typicalpointrigth8=ISP.toString();
						if(scoreutils.Typicalpointleft8=="1") scoreutils.Typicalpointleft8=scoreutils.Typicalpointrigth8;
					}	
					if(numbertypicalrigth==9){
						scoreutils.Typicalpointrigth9=ISP.toString();
						if(scoreutils.Typicalpointleft9=="1") scoreutils.Typicalpointleft9=scoreutils.Typicalpointrigth9;
					}	
					if(numbertypicalrigth==10){
						scoreutils.Typicalpointrigth10=ISP.toString();
						if(scoreutils.Typicalpointleft10=="1") scoreutils.Typicalpointleft10=scoreutils.Typicalpointrigth10;
					}	
					currentState='MeasureRigthTine';
					lbllasmeasurement.text="Typical Rigth Line "+numbertypicalrigth+"="+ISP.toString();
					numbertypicalrigth++;
					btnRecordLeftTine.label="Measure Rigth Tine "+numbertypicalrigth;
					
				}else{
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[4+2*(cont)].attribute("A"))*ldistance+Number(myangleoptions[4+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numbertypicalrigth==1){
						scoreutils.Typicalpointrigth1=ISP.toString();
						if(scoreutils.Typicalpointleft1=="1") scoreutils.Typicalpointleft1=scoreutils.Typicalpointrigth1;
					}	
					if(numbertypicalrigth==2){
						scoreutils.Typicalpointrigth2=ISP.toString();
						if(scoreutils.Typicalpointleft2=="1") scoreutils.Typicalpointleft2=scoreutils.Typicalpointrigth2;
					}	
					if(numbertypicalrigth==3){
						scoreutils.Typicalpointrigth3=ISP.toString();
						if(scoreutils.Typicalpointleft3=="1") scoreutils.Typicalpointleft3=scoreutils.Typicalpointrigth3;
					}	
					if(numbertypicalrigth==4){
						scoreutils.Typicalpointrigth4=ISP.toString();
						if(scoreutils.Typicalpointleft4=="1") scoreutils.Typicalpointleft4=scoreutils.Typicalpointrigth4;
					}	
					if(numbertypicalrigth==5){
						scoreutils.Typicalpointrigth5=ISP.toString();
						if(scoreutils.Typicalpointleft5=="1") scoreutils.Typicalpointleft5=scoreutils.Typicalpointrigth5;
					}	
					if(numbertypicalrigth==6){
						scoreutils.Typicalpointrigth6=ISP.toString();
						if(scoreutils.Typicalpointleft6=="1") scoreutils.Typicalpointleft6=scoreutils.Typicalpointrigth6;
					}	
					if(numbertypicalrigth==7){
						scoreutils.Typicalpointrigth7=ISP.toString();
						if(scoreutils.Typicalpointleft7=="1") scoreutils.Typicalpointleft7=scoreutils.Typicalpointrigth7;
					}	
					if(numbertypicalrigth==8){
						scoreutils.Typicalpointrigth8=ISP.toString();
						if(scoreutils.Typicalpointleft8=="1") scoreutils.Typicalpointleft8=scoreutils.Typicalpointrigth8;
					}	
					if(numbertypicalrigth==9){
						scoreutils.Typicalpointrigth9=ISP.toString();
						if(scoreutils.Typicalpointleft9=="1") scoreutils.Typicalpointleft9=scoreutils.Typicalpointrigth9;
					}	
					if(numbertypicalrigth==10){
						scoreutils.Typicalpointrigth10=ISP.toString();
						if(scoreutils.Typicalpointleft10=="1") scoreutils.Typicalpointleft10=scoreutils.Typicalpointrigth10;
					}	
					currentState='MeasureLeftCircunference';
					lbllasmeasurement.text="Typical Rigth Line "+numbertypicalrigth+"="+ISP.toString();
					numbertypicalrigth=1;
					cont=0;
				}
				manageCropper.endDraw();
				}	
			}
			
			
			/////////////Circumference points lef//////////////////
			private var numbercincumferenceleft:int=1;
			
			protected function MeasureLeftCircunference_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLeftCircunference';
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Record Letf Circumference "+numbercincumferenceleft;
				manageCropper.beginDraw();
				
			}
			
			
			protected function RecordLeftCircunference_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
				distance=distance/72;	
				var ISP:Number;
				var ldistance:Number=(3.14)*(distance)/(inchvalue);
				if(numbercincumferenceleft<4){
					
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[7+2*cont].attribute("A"))*ldistance+Number(myangleoptions[7+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[13+2*cont].attribute("A"))*ldistance+Number(myangleoptions[13+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0) cont++;
					if(numbercincumferenceleft==1)
						scoreutils.Circumferenceleft1=ISP.toString();
					if(numbercincumferenceleft==2)
						scoreutils.Circumferenceleft2=ISP.toString();
					if(numbercincumferenceleft==3)
						scoreutils.Circumferenceleft3=ISP.toString();
					if(numbercincumferenceleft==4)
						scoreutils.Circumferenceleft4=ISP.toString();
					
					
					
					
					currentState='MeasureLeftCircunference';
					lbllasmeasurement.text="Letf Circumference "+numbercincumferenceleft+"="+ISP.toString();
					numbercincumferenceleft++;
					btnRecordLeftTine.label="Measure Letf Circumference "+numbercincumferenceleft;
					
				}else{
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[7+2*cont].attribute("A"))*ldistance+Number(myangleoptions[7+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[13+2*cont].attribute("A"))*ldistance+Number(myangleoptions[13+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0) cont++;
					if(numbercincumferenceleft==1)
						scoreutils.Circumferenceleft1=ISP.toString();
					if(numbercincumferenceleft==2)
						scoreutils.Circumferenceleft2=ISP.toString();
					if(numbercincumferenceleft==3)
						scoreutils.Circumferenceleft3=ISP.toString();
					if(numbercincumferenceleft==4)
						scoreutils.Circumferenceleft4=ISP.toString();
					
					
					
					currentState='MeasureRigthCircumference'
					lbllasmeasurement.text="Letf Circumference "+numbercincumferenceleft+"="+ISP.toString();
					numbercincumferenceleft=1;
					cont=0;
				}
				manageCropper.endDraw();
			  }	
			}
			
			
			/////////////Circumference  points Rigth//////////////////
			private var numbercincumferencerigth:int=1;
			
			protected function MeasureRigthCircumference_clickHandler(event:MouseEvent):void
			{
				currentState='RecordRigthCircumference';
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Record Rigth Circumference "+numbercincumferencerigth;
				manageCropper.beginDraw();
			}
			
			
			protected function RecordRigthCircumference_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					distance=distance/72;
				var ISP:Number;
				var ldistance:Number=(3.14)*(distance)/(inchvalue);
				
				if(numbercincumferencerigth<4){
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[8+2*cont].attribute("A"))*ldistance+Number(myangleoptions[8+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[14+2*cont].attribute("A"))*ldistance+Number(myangleoptions[14+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numbercincumferencerigth==1){
						scoreutils.Circumferencerigth1=ISP.toString();
						if(scoreutils.Circumferenceleft1=="1") scoreutils.Circumferenceleft1=scoreutils.Circumferencerigth1;
					}	
					if(numbercincumferencerigth==2){
						scoreutils.Circumferencerigth2=ISP.toString();
						if(scoreutils.Circumferenceleft2=="1") scoreutils.Circumferenceleft2=scoreutils.Circumferencerigth2;
					}	
					if(numbercincumferencerigth==3){
						scoreutils.Circumferencerigth3=ISP.toString();
						if(scoreutils.Circumferenceleft3=="1") scoreutils.Circumferenceleft3=scoreutils.Circumferencerigth3;
					}	
					if(numbercincumferencerigth==4){
						scoreutils.Circumferencerigth4=ISP.toString();
						if(scoreutils.Circumferenceleft4=="1") scoreutils.Circumferenceleft4=scoreutils.Circumferencerigth4;
					}	
					
					currentState='MeasureRigthCircumference';
					lbllasmeasurement.text="Rigth Circumference "+numbercincumferencerigth+"="+ISP.toString();
					numbercincumferencerigth++;
					btnRecordLeftTine.label="Measure Rigth Circumference "+numbercincumferencerigth;
					
				}else{
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[8+2*cont].attribute("A"))*ldistance+Number(myangleoptions[8+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[14+2*cont].attribute("A"))*ldistance+Number(myangleoptions[14+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numbercincumferencerigth==1){
						scoreutils.Circumferencerigth1=ISP.toString();
						if(scoreutils.Circumferenceleft1=="1") scoreutils.Circumferenceleft1=scoreutils.Circumferencerigth1;
					}	
					if(numbercincumferencerigth==2){
						scoreutils.Circumferencerigth2=ISP.toString();
						if(scoreutils.Circumferenceleft2=="1") scoreutils.Circumferenceleft2=scoreutils.Circumferencerigth2;
					}	
					if(numbercincumferencerigth==3){
						scoreutils.Circumferencerigth3=ISP.toString();
						if(scoreutils.Circumferenceleft3=="1") scoreutils.Circumferenceleft3=scoreutils.Circumferencerigth3;
					}	
					if(numbercincumferencerigth==4){
						scoreutils.Circumferencerigth4=ISP.toString();
						if(scoreutils.Circumferenceleft4=="1") scoreutils.Circumferenceleft4=scoreutils.Circumferencerigth4;
					}	
					currentState='MeasureAnormalPoints'
					lbllasmeasurement.text="Rigth Circumference "+numbercincumferencerigth+"="+ISP.toString();
					numbercincumferencerigth=1;
					cont=0;
				}
				manageCropper.endDraw();
			  } 	
			}
			
			////abnormal point
			protected function MeasureLeftAnormalTine_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLefAbnormalTine';
				
				btnRecordLeftTine.label="Record Left Abnormal Tine "+numberabnormalleft;
				manageCropper.beginDraw();
			}
			
			
			protected function RecordLefAbnormalTine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					distance=distance/72;
				var ISP:Number;
				var ldistance:Number=(distance)/(inchvalue);
				if(numberabnormalleft<parseInt(cmbabnormalpointsleft.selectedItem)){
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[21+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[21+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numberabnormalleft==1)
						scoreutils.Abnormalpointleft1=ISP.toString();
					if(numberabnormalleft==2)
						scoreutils.Abnormalpointleft2=ISP.toString();
					if(numberabnormalleft==3)
						scoreutils.Abnormalpointleft3=ISP.toString();
					if(numberabnormalleft==4)
						scoreutils.Abnormalpointleft4=ISP.toString();
					if(numberabnormalleft==5)
						scoreutils.Abnormalpointleft5=ISP.toString();
					if(numberabnormalleft==6)
						scoreutils.Abnormalpointleft6=ISP.toString();
					if(numberabnormalleft==7)
						scoreutils.Abnormalpointleft7=ISP.toString();
					if(numberabnormalleft==8)
						scoreutils.Abnormalpointleft8=ISP.toString();
					if(numberabnormalleft==9)
						scoreutils.Abnormalpointleft9=ISP.toString();
					if(numberabnormalleft==10)
						scoreutils.Abnormalpointleft10=ISP.toString();
					if(numberabnormalleft==11)
						scoreutils.Abnormalpointleft11=ISP.toString();
					if(numberabnormalleft==12)
						scoreutils.Abnormalpointleft12=ISP.toString();
					if(numberabnormalleft==13)
						scoreutils.Abnormalpointleft13=ISP.toString();
					if(numberabnormalleft==14)
						scoreutils.Abnormalpointleft14=ISP.toString();
					if(numberabnormalleft==15)
						scoreutils.Abnormalpointleft15=ISP.toString();
					if(numberabnormalleft==16)
						scoreutils.Abnormalpointleft16=ISP.toString();
					if(numberabnormalleft==17)
						scoreutils.Abnormalpointleft17=ISP.toString();
					if(numberabnormalleft==18)
						scoreutils.Abnormalpointleft18=ISP.toString();
					if(numberabnormalleft==19)
						scoreutils.Abnormalpointleft19=ISP.toString();
					if(numberabnormalleft==20)
						scoreutils.Abnormalpointleft20=ISP.toString();
					
					currentState='MeasureLeftAnormalTine';
					//lbllasmeasurement.text="Abnormal Left Line "+numberabnormalleft+"="+ISP.toString();
					numberabnormalleft++;
					btnRecordLeftTine.label="Measure Left Anormal Tine "+numberabnormalleft;
					
				}else{
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[21+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[21+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numberabnormalleft==1)
						scoreutils.Abnormalpointleft1=ISP.toString();
					if(numberabnormalleft==2)
						scoreutils.Abnormalpointleft2=ISP.toString();
					if(numberabnormalleft==3)
						scoreutils.Abnormalpointleft3=ISP.toString();
					if(numberabnormalleft==4)
						scoreutils.Abnormalpointleft4=ISP.toString();
					if(numberabnormalleft==5)
						scoreutils.Abnormalpointleft5=ISP.toString();
					if(numberabnormalleft==6)
						scoreutils.Abnormalpointleft6=ISP.toString();
					if(numberabnormalleft==7)
						scoreutils.Abnormalpointleft7=ISP.toString();
					if(numberabnormalleft==8)
						scoreutils.Abnormalpointleft8=ISP.toString();
					if(numberabnormalleft==9)
						scoreutils.Abnormalpointleft9=ISP.toString();
					if(numberabnormalleft==10)
						scoreutils.Abnormalpointleft10=ISP.toString();
					if(numberabnormalleft==11)
						scoreutils.Abnormalpointleft11=ISP.toString();
					if(numberabnormalleft==12)
						scoreutils.Abnormalpointleft12=ISP.toString();
					if(numberabnormalleft==13)
						scoreutils.Abnormalpointleft13=ISP.toString();
					if(numberabnormalleft==14)
						scoreutils.Abnormalpointleft14=ISP.toString();
					if(numberabnormalleft==15)
						scoreutils.Abnormalpointleft15=ISP.toString();
					if(numberabnormalleft==16)
						scoreutils.Abnormalpointleft16=ISP.toString();
					if(numberabnormalleft==17)
						scoreutils.Abnormalpointleft17=ISP.toString();
					if(numberabnormalleft==18)
						scoreutils.Abnormalpointleft18=ISP.toString();
					if(numberabnormalleft==19)
						scoreutils.Abnormalpointleft19=ISP.toString();
					if(numberabnormalleft==20)
						scoreutils.Abnormalpointleft20=ISP.toString();
					
					if(parseInt(cmbabnormalpointsrigth.selectedItem)==0) currentState='CompleteScoringfinal';
					else currentState='MeasureRigthAnormalTine'
					
					//lbllasmeasurement.text="Abnormal Left Line "+numberabnormalleft+"="+ISP.toString();
					numberabnormalleft=1;
					cont=0;
				}
			  	manageCropper.endDraw();
			  }
			}
			
			
			protected function MeasureRigthAnormalTine_clickHandler(event:MouseEvent):void
			{
				currentState='RecordRigthAbnormalTine';
				
				btnRecordLeftTine.label="Record Rigth Abnormal Tine "+numberabnormalright;
				
				manageCropper.beginDraw();
				
			}
			
			protected function RecordRigthAbnormalTine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var arraypoints:Array=manageCropper.getPoints();
				
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					distance=distance/72;	
				var ISP:Number;
				var ldistance:Number=(distance)/(inchvalue);
				if(numberabnormalright<parseInt(cmbabnormalpointsrigth.selectedItem)){
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[22+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[22+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0)cont++;
					if(numberabnormalright==1)
						scoreutils.Abnormalpointrigth1=ISP.toString();
					if(numberabnormalright==2)
						scoreutils.Abnormalpointrigth2=ISP.toString();
					if(numberabnormalright==3)
						scoreutils.Abnormalpointrigth3=ISP.toString();
					if(numberabnormalright==4)
						scoreutils.Abnormalpointrigth4=ISP.toString();
					if(numberabnormalright==5)
						scoreutils.Abnormalpointrigth5=ISP.toString();
					if(numberabnormalright==6)
						scoreutils.Abnormalpointrigth6=ISP.toString();
					if(numberabnormalright==7)
						scoreutils.Abnormalpointrigth7=ISP.toString();
					if(numberabnormalright==8)
						scoreutils.Abnormalpointrigth8=ISP.toString();
					if(numberabnormalright==9)
						scoreutils.Abnormalpointrigth9=ISP.toString();
					if(numberabnormalright==10)
						scoreutils.Abnormalpointrigth10=ISP.toString();
					if(numberabnormalright==11)
						scoreutils.Abnormalpointrigth11=ISP.toString();
					if(numberabnormalright==12)
						scoreutils.Abnormalpointrigth12=ISP.toString();
					if(numberabnormalright==13)
						scoreutils.Abnormalpointrigth13=ISP.toString();
					if(numberabnormalright==14)
						scoreutils.Abnormalpointrigth14=ISP.toString();
					if(numberabnormalright==15)
						scoreutils.Abnormalpointrigth15=ISP.toString();
					if(numberabnormalright==16)
						scoreutils.Abnormalpointrigth16=ISP.toString();
					if(numberabnormalright==17)
						scoreutils.Abnormalpointrigth17=ISP.toString();
					if(numberabnormalright==18)
						scoreutils.Abnormalpointrigth18=ISP.toString();
					if(numberabnormalright==19)
						scoreutils.Abnormalpointrigth19=ISP.toString();
					if(numberabnormalright==20)
						scoreutils.Abnormalpointrigth20=ISP.toString();
					
					currentState='MeasureRigthAnormalTine';
					//lbllasmeasurement.text="Abnormal Rigth Tine "+numberabnormalright+"="+ISP.toString();
					numberabnormalright++;
					btnRecordLeftTine.label="Measure Rigth Anormal Tine "+numberabnormalright;
					
				}else{
					if(grade=='0')
					{
						
						ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}else{
						
						ISP=Number(myangleoptions[22+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[22+(2*cont)].attribute("B"));
						if(cont!=0 && cont<4) cont++;
					}
					if(cont==0) cont++;
					if(numberabnormalright==1)
						scoreutils.Abnormalpointrigth1=ISP.toString();
					if(numberabnormalright==2)
						scoreutils.Abnormalpointrigth2=ISP.toString();
					if(numberabnormalright==3)
						scoreutils.Abnormalpointrigth3=ISP.toString();
					if(numberabnormalright==4)
						scoreutils.Abnormalpointrigth4=ISP.toString();
					if(numberabnormalright==5)
						scoreutils.Abnormalpointrigth5=ISP.toString();
					if(numberabnormalright==6)
						scoreutils.Abnormalpointrigth6=ISP.toString();
					if(numberabnormalright==7)
						scoreutils.Abnormalpointrigth7=ISP.toString();
					if(numberabnormalright==8)
						scoreutils.Abnormalpointrigth8=ISP.toString();
					if(numberabnormalright==9)
						scoreutils.Abnormalpointrigth9=ISP.toString();
					if(numberabnormalright==10)
						scoreutils.Abnormalpointrigth10=ISP.toString();
					if(numberabnormalright==11)
						scoreutils.Abnormalpointrigth11=ISP.toString();
					if(numberabnormalright==12)
						scoreutils.Abnormalpointrigth12=ISP.toString();
					if(numberabnormalright==13)
						scoreutils.Abnormalpointrigth13=ISP.toString();
					if(numberabnormalright==14)
						scoreutils.Abnormalpointrigth14=ISP.toString();
					if(numberabnormalright==15)
						scoreutils.Abnormalpointrigth15=ISP.toString();
					if(numberabnormalright==16)
						scoreutils.Abnormalpointrigth16=ISP.toString();
					if(numberabnormalright==17)
						scoreutils.Abnormalpointrigth17=ISP.toString();
					if(numberabnormalright==18)
						scoreutils.Abnormalpointrigth18=ISP.toString();
					if(numberabnormalright==19)
						scoreutils.Abnormalpointrigth19=ISP.toString();
					if(numberabnormalright==20)
						scoreutils.Abnormalpointrigth20=ISP.toString();
					currentState='CompleteScoringfinal'
					lbllasmeasurement.text="Abnormal Rigth Line "+numberabnormalright+"="+ISP.toString();	
					numberabnormalright=1;
					cont=0;
				}
				manageCropper.endDraw();
			  }	
				
			}
			
			
//////////////////////////////////////////////////////////			
			
			
			
			
			
			
			
			protected function RecordLeftTineLineMirror_clickHandler(event:MouseEvent):void
			{
				
				if(numbertypicalleft<parseInt(cmbletftypical.selectedItem)){
					cont++;
					if(numbertypicalleft==1)
						scoreutils.Typicalpointleft1="1";
					if(numbertypicalleft==2)
						scoreutils.Typicalpointleft2="1";
					if(numbertypicalleft==3)
						scoreutils.Typicalpointleft3="1";
					if(numbertypicalleft==4)
						scoreutils.Typicalpointleft4="1";
					if(numbertypicalleft==5)
						scoreutils.Typicalpointleft5="1";
					if(numbertypicalleft==6)
						scoreutils.Typicalpointleft6="1";
					if(numbertypicalleft==7)
						scoreutils.Typicalpointleft7="1";
					if(numbertypicalleft==8)
						scoreutils.Typicalpointleft8="1";
					if(numbertypicalleft==9)
						scoreutils.Typicalpointleft9="1";
					if(numbertypicalleft==10)
						scoreutils.Typicalpointleft10="1";
					
					currentState='MeasureLeftTine';
					lbllasmeasurement.text="Typical Left Line "+numbertypicalleft+"= To be Determinated";
					numbertypicalleft++;
					btnRecordLeftTine.label="Measure Left Tine "+numbertypicalleft;
				}else{
					if(numbertypicalleft==1)
						scoreutils.Typicalpointleft1="1";
					if(numbertypicalleft==2)
						scoreutils.Typicalpointleft2="1";
					if(numbertypicalleft==3)
						scoreutils.Typicalpointleft3="1";
					if(numbertypicalleft==4)
						scoreutils.Typicalpointleft4="1";
					if(numbertypicalleft==5)
						scoreutils.Typicalpointleft5="1";
					if(numbertypicalleft==6)
						scoreutils.Typicalpointleft6="1";
					if(numbertypicalleft==7)
						scoreutils.Typicalpointleft7="1";
					if(numbertypicalleft==8)
						scoreutils.Typicalpointleft8="1";
					if(numbertypicalleft==9)
						scoreutils.Typicalpointleft9="1";
					if(numbertypicalleft==10)
						scoreutils.Typicalpointleft10="1";
					cont++;
					currentState='MeasureRigthTine';
					lbllasmeasurement.text="Typical Left Line "+numbertypicalleft+"= To be Determinated";
					numbertypicalleft=1;
					cont=0;
				}
				
			}
			
			
			protected function RecordRigthTineLineMirror_clickHandler(event:MouseEvent):void
			{
				
				if(numbertypicalrigth<parseInt(cmbrigthtypical.selectedItem)){
					cont++;
					if(numbertypicalrigth==1){
					   scoreutils.Typicalpointrigth1="0";
					   if(scoreutils.Typicalpointleft1!="1"){
						   scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
					   }else{
						   scoreutils.Typicalpointleft1='0';
					   }
					   
					}	
					if(numbertypicalrigth==2){
						scoreutils.Typicalpointrigth2="0";
						if(scoreutils.Typicalpointleft2!="1"){
							scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
						}else{
							scoreutils.Typicalpointleft2='0';
						}
						
					}	
					if(numbertypicalrigth==3){
						scoreutils.Typicalpointrigth3="0";
						if(scoreutils.Typicalpointleft3!="1"){
							scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
						}else{
							scoreutils.Typicalpointleft3='0';
						}
						
					}	
					if(numbertypicalrigth==4){
						scoreutils.Typicalpointrigth4="0";
						if(scoreutils.Typicalpointleft4!="1"){
							scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
						}else{
							scoreutils.Typicalpointleft4='0';
						}
						
					}	
					if(numbertypicalrigth==5){
						scoreutils.Typicalpointrigth5="0";
						if(scoreutils.Typicalpointleft5!="1"){
							scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
						}else{
							scoreutils.Typicalpointleft5='0';
						}
						
					}	
					if(numbertypicalrigth==6){
						scoreutils.Typicalpointrigth6="0";
						if(scoreutils.Typicalpointleft6!="1"){
							scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
						}else{
							scoreutils.Typicalpointleft6='0';
						}
						
					}	
					if(numbertypicalrigth==7){
						scoreutils.Typicalpointrigth7="0";
						if(scoreutils.Typicalpointleft7!="1"){
							scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
						}else{
							scoreutils.Typicalpointleft7='0';
						}
						
					}	
					if(numbertypicalrigth==8){
						scoreutils.Typicalpointrigth8="0";
						if(scoreutils.Typicalpointleft8!="1"){
							scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
						}else{
							scoreutils.Typicalpointleft8='0';
						}
						
					}	
					if(numbertypicalrigth==9){
						scoreutils.Typicalpointrigth9="0";
						if(scoreutils.Typicalpointleft9!="1"){
							scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
						}else{
							scoreutils.Typicalpointleft9='0';
						}
						
					}	
					if(numbertypicalrigth==10){
						scoreutils.Typicalpointrigth10="0";
						if(scoreutils.Typicalpointleft10!="1"){
							scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
						}else{
							scoreutils.Typicalpointleft10='0';
						}
						
					}	
					currentState='MeasureRigthTine';
					lbllasmeasurement.text="Typical Rigth Line "+numbertypicalrigth+"=To be Determinated";
					numbertypicalrigth++;
					btnRecordLeftTine.label="Measure Rigth Tine "+numbertypicalrigth;
					
				}else{
					
					cont++;
					if(numbertypicalrigth==1){
						scoreutils.Typicalpointrigth1="0";
						if(scoreutils.Typicalpointleft1!="1"){
							scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
						}else{
							scoreutils.Typicalpointleft1='0';
						}
						
					}	
					if(numbertypicalrigth==2){
						scoreutils.Typicalpointrigth2="0";
						if(scoreutils.Typicalpointleft2!="1"){
							scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
						}else{
							scoreutils.Typicalpointleft2='0';
						}
						
					}	
					if(numbertypicalrigth==3){
						scoreutils.Typicalpointrigth3="0";
						if(scoreutils.Typicalpointleft3!="1"){
							scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
						}else{
							scoreutils.Typicalpointleft3='0';
						}
						
					}	
					if(numbertypicalrigth==4){
						scoreutils.Typicalpointrigth4="0";
						if(scoreutils.Typicalpointleft4!="1"){
							scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
						}else{
							scoreutils.Typicalpointleft4='0';
						}
						
					}	
					if(numbertypicalrigth==5){
						scoreutils.Typicalpointrigth5="0";
						if(scoreutils.Typicalpointleft5!="1"){
							scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
						}else{
							scoreutils.Typicalpointleft5='0';
						}
						
					}	
					if(numbertypicalrigth==6){
						scoreutils.Typicalpointrigth6="0";
						if(scoreutils.Typicalpointleft6!="1"){
							scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
						}else{
							scoreutils.Typicalpointleft6='0';
						}
						
					}	
					if(numbertypicalrigth==7){
						scoreutils.Typicalpointrigth7="0";
						if(scoreutils.Typicalpointleft7!="1"){
							scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
						}else{
							scoreutils.Typicalpointleft7='0';
						}
						
					}	
					if(numbertypicalrigth==8){
						scoreutils.Typicalpointrigth8="0";
						if(scoreutils.Typicalpointleft8!="1"){
							scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
						}else{
							scoreutils.Typicalpointleft8='0';
						}
						
					}	
					if(numbertypicalrigth==9){
						scoreutils.Typicalpointrigth9="0";
						if(scoreutils.Typicalpointleft9!="1"){
							scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
						}else{
							scoreutils.Typicalpointleft9='0';
						}
						
					}	
					if(numbertypicalrigth==10){
						scoreutils.Typicalpointrigth10="0";
						if(scoreutils.Typicalpointleft10!="1"){
							scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
						}else{
							scoreutils.Typicalpointleft10='0';
						}
						
					}	
					currentState='MeasureLeftCircunference';
					lbllasmeasurement.text="Typical Rigth Line "+numbertypicalrigth+"=To be Determinated";
					numbertypicalrigth=1;
					cont=0;
				}
				
			}
			
			
			
						
			
			protected function RecordLeftCircunferenceMirror_clickHandler(event:MouseEvent):void
			{
				
				
				if(numbercincumferenceleft<4){
					cont++;
					if(numbercincumferenceleft==1)
						scoreutils.Circumferenceleft1="1";
					if(numbercincumferenceleft==2)
						scoreutils.Circumferenceleft2="1";
					if(numbercincumferenceleft==3)
						scoreutils.Circumferenceleft3="1";
					if(numbercincumferenceleft==4)
						scoreutils.Circumferenceleft4="1";
					
					
					
					
					currentState='MeasureLeftCircunference';
					lbllasmeasurement.text="Letf Circumference "+numbercincumferenceleft+"=To be Determinated";
					numbercincumferenceleft++;
					btnRecordLeftTine.label="Measure Letf Circumference "+numbercincumferenceleft;
					
				}else{
					
					cont++;
					if(numbercincumferenceleft==1)
						scoreutils.Circumferenceleft1="1";
					if(numbercincumferenceleft==2)
						scoreutils.Circumferenceleft2="1";
					if(numbercincumferenceleft==3)
						scoreutils.Circumferenceleft3="1";
					if(numbercincumferenceleft==4)
						scoreutils.Circumferenceleft4="1";
					
					
					
					currentState='MeasureRigthCircumference'
					lbllasmeasurement.text="Letf Circumference "+numbercincumferenceleft+"=To be Determinated";
					numbercincumferenceleft=1;
					cont=0;
				}
				
				
			}
			
			protected function RecordRigthCircumferenceMirror_clickHandler(event:MouseEvent):void
			{
				var distance:Number=12;
				
				
				if(numbercincumferencerigth<4){
					cont++;
					if(numbercincumferencerigth==1){
						scoreutils.Circumferencerigth1="0";
						if(scoreutils.Circumferenceleft1!="1") scoreutils.Circumferencerigth1=scoreutils.Circumferenceleft1;
						else scoreutils.Circumferenceleft1="0";
					}	
					if(numbercincumferencerigth==2){
						scoreutils.Circumferencerigth2="0";
						if(scoreutils.Circumferenceleft2!="1") scoreutils.Circumferencerigth2=scoreutils.Circumferenceleft2;
						else scoreutils.Circumferenceleft2="0";
					}	
					if(numbercincumferencerigth==3){
						scoreutils.Circumferencerigth3="0";
						if(scoreutils.Circumferenceleft3!="1") scoreutils.Circumferencerigth3=scoreutils.Circumferenceleft3;
						else scoreutils.Circumferenceleft3="0";
					}	
					if(numbercincumferencerigth==4){
						scoreutils.Circumferencerigth4="0";
						if(scoreutils.Circumferenceleft4!="1") scoreutils.Circumferencerigth4=scoreutils.Circumferenceleft4;
						else scoreutils.Circumferenceleft4="0";
					}	
					
					currentState='MeasureRigthCircumference';
					lbllasmeasurement.text="Rigth Circumference "+numbercincumferencerigth+"=To be Determinated";
					numbercincumferencerigth++;
					btnRecordLeftTine.label="Measure Rigth Circumference "+numbercincumferencerigth;
					
				}else{
					cont++;
					if(numbercincumferencerigth==1){
						scoreutils.Circumferencerigth1="0";
						if(scoreutils.Circumferenceleft1!="1") scoreutils.Circumferencerigth1=scoreutils.Circumferenceleft1;
						else scoreutils.Circumferenceleft1="0";
					}	
					if(numbercincumferencerigth==2){
						scoreutils.Circumferencerigth2="0";
						if(scoreutils.Circumferenceleft2!="1") scoreutils.Circumferencerigth2=scoreutils.Circumferenceleft2;
						else scoreutils.Circumferenceleft2="0";
					}	
					if(numbercincumferencerigth==3){
						scoreutils.Circumferencerigth3="0";
						if(scoreutils.Circumferenceleft3!="1") scoreutils.Circumferencerigth3=scoreutils.Circumferenceleft3;
						else scoreutils.Circumferenceleft3="0";
					}	
					if(numbercincumferencerigth==4){
						scoreutils.Circumferencerigth4="0";
						if(scoreutils.Circumferenceleft4!="1") scoreutils.Circumferencerigth4=scoreutils.Circumferenceleft4;
						else scoreutils.Circumferenceleft4="0";
					}	
					currentState='MeasureAnormalPoints'
					lbllasmeasurement.text="Rigth Circumference "+numbercincumferencerigth+"=To be Determinated";
					numbercincumferencerigth=1;
					cont=0;
				}
				
			}
			
			////////////////////////////////////////////////////////////////////////////////////	
			
			
			protected function callResultHandler(event:ResultEvent):void
			{
				var respuesta:Object = event.result;
				trace(respuesta.toString());
				var xml:XML=XML(event.result);
				trace(xml.child("Email"));
				if(xml.child("Email").toString()=="" && xml.child("ErrorCode").toString()=="101"){
					currentState='stateLogin';
				}else{
					currentState='stateMain';
				}
				
			}
			public var state:String;
			protected function ViewScoreNoFinish_clickHandler(event:MouseEvent):void
			{
				state=currentState;
				currentState='ScoringFinalBuckView';
				txtDeerNickName.text=deernamefinishscore;
				txtLocationDeer.text=location;
				var someBirthday:Date = new Date();
				txtdatedeer.text=someBirthday.toDateString();
				imageforedition0.source=arraybyte;
				
				numberleftponitsgrid.text=cmbletftypical.selectedItem;
				numberrigthponitsgrid.text=cmbrigthtypical.selectedItem;
				insidespread.text=scoreutils.insidespread;
				mainbeamleftgrid.text=scoreutils.mainbeamleft;
				mainbeamrigthgrid.text=scoreutils.mainbeamrigth;
				mainbeamdiferene.text=(Math.abs(Number(scoreutils.mainbeamleft)-Number(scoreutils.mainbeamrigth))).toString();
				t1l.text=scoreutils.Typicalpointleft1;
				t1r.text=scoreutils.Typicalpointrigth1;
				t1d.text=(Math.abs(Number(scoreutils.Typicalpointleft1)-Number(scoreutils.Typicalpointrigth1))).toString();
				t2l.text=scoreutils.Typicalpointleft2;
				t2r.text=scoreutils.Typicalpointrigth2;
				t2d.text=(Math.abs(Number(scoreutils.Typicalpointleft2)-Number(scoreutils.Typicalpointrigth2))).toString();
				t3l.text=scoreutils.Typicalpointleft3;
				t3r.text=scoreutils.Typicalpointrigth3;
				t3d.text=(Math.abs(Number(scoreutils.Typicalpointleft3)-Number(scoreutils.Typicalpointrigth3))).toString();
				t4l.text=scoreutils.Typicalpointleft4;
				t4r.text=scoreutils.Typicalpointrigth4;
				t4d.text=(Math.abs(Number(scoreutils.Typicalpointleft4)-Number(scoreutils.Typicalpointrigth4))).toString();
				t5l.text=scoreutils.Typicalpointleft5;
				t5r.text=scoreutils.Typicalpointrigth5;
				t5d.text=(Math.abs(Number(scoreutils.Typicalpointleft5)-Number(scoreutils.Typicalpointrigth5))).toString();
				t6l.text=scoreutils.Typicalpointleft6;
				t6r.text=scoreutils.Typicalpointrigth6;
				t6d.text=(Math.abs(Number(scoreutils.Typicalpointleft6)-Number(scoreutils.Typicalpointrigth6))).toString();
				t7l.text=scoreutils.Typicalpointleft7;
				t7r.text=scoreutils.Typicalpointrigth7;
				t7d.text=(Math.abs(Number(scoreutils.Typicalpointleft7)-Number(scoreutils.Typicalpointrigth7))).toString();
				t8l.text=scoreutils.Typicalpointleft8;
				t8r.text=scoreutils.Typicalpointrigth8;
				t8d.text=(Math.abs(Number(scoreutils.Typicalpointleft8)-Number(scoreutils.Typicalpointrigth8))).toString();
				t9l.text=scoreutils.Typicalpointleft9;
				t9r.text=scoreutils.Typicalpointrigth9;
				t9d.text=(Math.abs(Number(scoreutils.Typicalpointleft9)-Number(scoreutils.Typicalpointrigth9))).toString();
				t10l.text=scoreutils.Typicalpointleft10;
				t10r.text=scoreutils.Typicalpointrigth10;
				t10d.text=(Math.abs(Number(scoreutils.Typicalpointleft10)-Number(scoreutils.Typicalpointrigth10))).toString();
				
				c1l.text=scoreutils.Circumferenceleft1;
				c1r.text=scoreutils.Circumferencerigth1;
				c1d.text=(Math.abs(Number(scoreutils.Circumferenceleft1)-Number(scoreutils.Circumferencerigth1))).toString();
				c2l.text=scoreutils.Circumferenceleft2;
				c2r.text=scoreutils.Circumferencerigth2;
				c2d.text=(Math.abs(Number(scoreutils.Circumferenceleft2)-Number(scoreutils.Circumferencerigth2))).toString();
				c3l.text=scoreutils.Circumferenceleft3;
				c3r.text=scoreutils.Circumferencerigth3;
				c3d.text=(Math.abs(Number(scoreutils.Circumferenceleft3)-Number(scoreutils.Circumferencerigth3))).toString();
				c4l.text=scoreutils.Circumferenceleft4;
				c4r.text=scoreutils.Circumferencerigth4;
				c4d.text=(Math.abs(Number(scoreutils.Circumferenceleft4)-Number(scoreutils.Circumferencerigth4))).toString();
				a1.text=scoreutils.Abnormalpointleft1;
				ar1.text=scoreutils.Abnormalpointrigth1;
				a2.text=scoreutils.Abnormalpointleft2;
				ar2.text=scoreutils.Abnormalpointrigth2;
				a3.text=scoreutils.Abnormalpointleft3;
				ar3.text=scoreutils.Abnormalpointrigth3;
				a4.text=scoreutils.Abnormalpointleft4;
				ar4.text=scoreutils.Abnormalpointrigth4;
				a5.text=scoreutils.Abnormalpointleft5;
				ar5.text=scoreutils.Abnormalpointrigth5;
				a6.text=scoreutils.Abnormalpointleft6;
				ar6.text=scoreutils.Abnormalpointrigth6;
				a7.text=scoreutils.Abnormalpointleft7;
				ar7.text=scoreutils.Abnormalpointrigth7;
				a8.text=scoreutils.Abnormalpointleft8;
				ar8.text=scoreutils.Abnormalpointrigth8;
				a9.text=scoreutils.Abnormalpointleft9;
				ar9.text=scoreutils.Abnormalpointrigth9;
				a10.text=scoreutils.Abnormalpointleft10;
				ar10.text=scoreutils.Abnormalpointrigth10;
				a11.text=scoreutils.Abnormalpointleft11;
				ar11.text=scoreutils.Abnormalpointrigth11;
				a12.text=scoreutils.Abnormalpointleft12;
				ar12.text=scoreutils.Abnormalpointrigth12;
				a13.text=scoreutils.Abnormalpointleft13;
				ar13.text=scoreutils.Abnormalpointrigth13;
				a14.text=scoreutils.Abnormalpointleft14;
				ar14.text=scoreutils.Abnormalpointrigth14;
				a15.text=scoreutils.Abnormalpointleft15;
				ar15.text=scoreutils.Abnormalpointrigth15;
				a16.text=scoreutils.Abnormalpointleft16;
				ar16.text=scoreutils.Abnormalpointrigth16;
				a17.text=scoreutils.Abnormalpointleft17;
				ar17.text=scoreutils.Abnormalpointrigth17;
				a18.text=scoreutils.Abnormalpointleft18;
				ar18.text=scoreutils.Abnormalpointrigth18;
				a19.text=scoreutils.Abnormalpointleft19;
				ar19.text=scoreutils.Abnormalpointrigth19;
				a20.text=scoreutils.Abnormalpointleft20;
				ar20.text=scoreutils.Abnormalpointrigth20;
				var totalleft:Number=scoreutils.calculateleft();
				var totalrigth:Number=scoreutils.calculaterigth();
				var totalabnormal:Number=scoreutils.calculateabnormal();
				var totaldiference:Number=Math.abs(totalleft-totalrigth);
				tleft.text=totalleft.toString();
				trigth.text=totalrigth.toString();
				tdiference.text=totaldiference.toString();
				
				grossscore.text=(totalleft+ totalrigth+ totalabnormal ).toString();
				totaldiferencefinal.text=totaldiference.toString();
			}
////////////////////////////////////////////////////////back SCORE //////////////////////////////			
			protected function ScoringFinalBuckView_clickHandler(event:MouseEvent):void
			{
				currentState=state;
				
					
				
				
			}
			
			protected function MeasureLeftTineBack_clickHandler(event:MouseEvent):void
			{
				if(numbertypicalleft==1){
					currentState='RecordRigthMainBeam';
					btnRecordLeftTine.label="Record Rigth Main Beam";
				}else{
					numbertypicalleft--;
					cont--;
					currentState='RecordLeftTineLine';
					btnRecordLeftTine.label="Recorder Left Tine "+numbertypicalleft;
				}
				manageCropper.beginDraw();
			}
			
			protected function RecordLeftTineLineBack_clickHandler(event:MouseEvent):void
			{
				
				currentState='MeasureLeftTine';
				if((numbertypicalleft-1)==1)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft1;
				else if((numbertypicalleft-1)==2)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft2;
				else if((numbertypicalleft-1)==3)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft3;
				else if((numbertypicalleft-1)==4)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft4;
				else if((numbertypicalleft-1)==5)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft5;
				else if((numbertypicalleft-1)==6)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft6;
				else if((numbertypicalleft-1)==7)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft7;
				else if((numbertypicalleft-1)==8)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft8;
				else if((numbertypicalleft-1)==9)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft9;
				else if((numbertypicalleft-1)==10)
					lbllasmeasurement.text="Typical Left Line "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft10;
				else lbllasmeasurement.text="Rigth Main beam "+scoreutils.mainbeamrigth;
				btnRecordLeftTine.label="Measure Left Tine "+numbertypicalleft;
				manageCropper.endDraw();
			}
			
			protected function MeasureRigthTineBack_clickHandler(event:MouseEvent):void
			{
				if(numbertypicalrigth==1){
					currentState='RecordLeftTineLine';
					numbertypicalleft=parseInt(cmbletftypical.selectedItem);
					btnRecordLeftTine.label="Recorder Left Tine "+numbertypicalleft;
				}else{
					numbertypicalrigth--;
					cont--;
					currentState='RecordRigthTineLine';
					btnRecordLeftTine.label="Recorder Rigth Tine "+numbertypicalrigth;
				}
				manageCropper.beginDraw();
			}
			
			protected function RecordRigthTineLineBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureRigthTine';
				if((numbertypicalrigth-1)==1)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth1;
				else if((numbertypicalrigth-1)==2)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth2;
				else if((numbertypicalrigth-1)==3)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth3;
				else if((numbertypicalrigth-1)==4)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth4;
				else if((numbertypicalrigth-1)==5)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth5;
				else if((numbertypicalrigth-1)==6)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth6;
				else if((numbertypicalrigth-1)==7)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth7;
				else if((numbertypicalrigth-1)==8)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth8;
				else if((numbertypicalrigth-1)==9)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth9;
				else if((numbertypicalrigth-1)==10)
					lbllasmeasurement.text="Typical Rigth Line "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth10;
				else {
					var val:String;
					if(parseInt(cmbletftypical.selectedItem)==1) val=scoreutils.Typicalpointleft1;
					else if(parseInt(cmbletftypical.selectedItem)==2) val=scoreutils.Typicalpointleft2;
					else if(parseInt(cmbletftypical.selectedItem)==3) val=scoreutils.Typicalpointleft3;
					else if(parseInt(cmbletftypical.selectedItem)==4) val=scoreutils.Typicalpointleft4;
					else if(parseInt(cmbletftypical.selectedItem)==5) val=scoreutils.Typicalpointleft5;
					else if(parseInt(cmbletftypical.selectedItem)==6) val=scoreutils.Typicalpointleft6;
					else if(parseInt(cmbletftypical.selectedItem)==7) val=scoreutils.Typicalpointleft7;
					else if(parseInt(cmbletftypical.selectedItem)==8) val=scoreutils.Typicalpointleft8;
					else if(parseInt(cmbletftypical.selectedItem)==9) val=scoreutils.Typicalpointleft9;
					else if(parseInt(cmbletftypical.selectedItem)==10) val=scoreutils.Typicalpointleft10;
					
					lbllasmeasurement.text="Typical Left Line "+parseInt(cmbletftypical.selectedItem)+"="+val;
				}
				btnRecordLeftTine.label="Measure Rigth Tine "+numbertypicalrigth;
				manageCropper.endDraw();
				
			}
			
			protected function MeasureLeftCircunferenceBack_clickHandler(event:MouseEvent):void
			{
				if(numbercincumferenceleft==1){
					currentState='RecordRigthTineLine';
					numbertypicalrigth=parseInt(cmbrigthtypical.selectedItem);
					btnRecordLeftTine.label="Recorder Rigth Tine "+numbertypicalrigth;
				}else{
					numbercincumferenceleft--;
					cont--;
					currentState='RecordLeftCircunference';
					btnRecordLeftTine.label="Recorder Left Circumference "+numbercincumferenceleft;
				}
				manageCropper.beginDraw();
					
				
			}
			
			protected function RecordLeftCircunferenceBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureLeftCircunference';
				if((numbercincumferenceleft-1)==1)
					lbllasmeasurement.text="Letf Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft1;
				else if((numbercincumferenceleft-1)==2)
					lbllasmeasurement.text="Letf Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft2;
				else if((numbercincumferenceleft-1)==3)
					lbllasmeasurement.text="Letf Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft3;
				else if((numbercincumferenceleft-1)==4)
					lbllasmeasurement.text="Letf Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft4;
				else{
					var val:String;
					if(parseInt(cmbrigthtypical.selectedItem)==1) val=scoreutils.Typicalpointrigth1;
					else if(parseInt(cmbrigthtypical.selectedItem)==2) val=scoreutils.Typicalpointrigth2;
					else if(parseInt(cmbrigthtypical.selectedItem)==3) val=scoreutils.Typicalpointrigth3;
					else if(parseInt(cmbrigthtypical.selectedItem)==4) val=scoreutils.Typicalpointrigth4;
					else if(parseInt(cmbrigthtypical.selectedItem)==5) val=scoreutils.Typicalpointrigth5;
					else if(parseInt(cmbrigthtypical.selectedItem)==6) val=scoreutils.Typicalpointrigth6;
					else if(parseInt(cmbrigthtypical.selectedItem)==7) val=scoreutils.Typicalpointrigth7;
					else if(parseInt(cmbrigthtypical.selectedItem)==8) val=scoreutils.Typicalpointrigth8;
					else if(parseInt(cmbrigthtypical.selectedItem)==9) val=scoreutils.Typicalpointrigth9;
					else if(parseInt(cmbrigthtypical.selectedItem)==10) val=scoreutils.Typicalpointrigth10;
					lbllasmeasurement.text="Typical Rigth Line "+parseInt(cmbrigthtypical.selectedItem)+"="+val;
				}
					
				
				btnRecordLeftTine.label="Measure Left Circunference "+numbercincumferenceleft;
				manageCropper.endDraw();
			}
			
			protected function MeasureRigthCircumferenceBack_clickHandler(event:MouseEvent):void
			{
				if(numbercincumferencerigth==1){
					currentState='RecordLeftCircunference';
					numbercincumferenceleft=4;
					btnRecordLeftTine.label="Recorder Left Circumference "+numbercincumferenceleft;
				}else{
					numbercincumferencerigth--;
					cont--;
					currentState='RecordRigthCircumference';
					btnRecordLeftTine.label="Recorder Rigth Circumference "+numbercincumferencerigth;
				}
				manageCropper.beginDraw();
			}
			
			protected function RecordRigthCircumferenceBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureRigthCircumference';
				if((numbercincumferencerigth-1)==1)
					lbllasmeasurement.text="Rigth Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth1;
				else if((numbercincumferencerigth-1)==2)
					lbllasmeasurement.text="Rigth Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth2;
				else if((numbercincumferencerigth-1)==3)
					lbllasmeasurement.text="Rigth Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth3;
				else if((numbercincumferencerigth-1)==4)
					lbllasmeasurement.text="Rigth Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth4;
				else
					lbllasmeasurement.text="Left Circumference 4="+scoreutils.Circumferenceleft4;
				
				btnRecordLeftTine.label="Measure Rigth Circunference "+numbercincumferencerigth;
				manageCropper.endDraw();
			}
			
			protected function MeasureAnormalPointsBack(event:MouseEvent):void
			{
				numbercincumferencerigth=4;
				currentState='RecordRigthCircumference';
				lbllasmeasurement.text="Rigth Circumference 4"+"="+scoreutils.Circumferencerigth4;
				btnRecordLeftTine.label="Measure Rigth Circunference "+numbercincumferencerigth;
				manageCropper.beginDraw();
			}
			
			protected function MeasureLeftAnormalTineBack_clickHandler(event:MouseEvent):void
			{
				if(numberabnormalleft==1){
					currentState='MeasureAnormalPoints';
					btnRecordLeftTine.label="Measure Anormal Points";
					lbllasmeasurement.text="Rigth Circumference 4 :"+scoreutils.Circumferencerigth4;
					manageCropper.endDraw();
				}else{
					numberabnormalleft--;
					cont--;
					currentState='RecordLefAbnormalTine';
					btnRecordLeftTine.label="Record Left Abnormal Tine "+numberabnormalleft;
					manageCropper.beginDraw();
				}
				
			}
			
			protected function RecordLefAbnormalTineBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureLeftAnormalTine';
				
				btnRecordLeftTine.label="Measure Left Anormal Tine "+numberabnormalleft;
				manageCropper.endDraw();
				
			}
			
			protected function MeasureRigthAnormalTineBack_clickHandler(event:MouseEvent):void
			{
				if(numberabnormalright==1){
					currentState='RecordLefAbnormalTine';
					numberabnormalleft=parseInt(cmbabnormalpointsleft.selectedItem);
					btnRecordLeftTine.label="Record Left Abnormal Tine "+numberabnormalleft;
					
				}else{
					numberabnormalright--;
					cont--;
					currentState='RecordRigthAbnormalTine';
					btnRecordLeftTine.label="Record Rigth Abnormal Tine "+numberabnormalright;
				}
				manageCropper.beginDraw();
			}
			
			protected function RecordRigthAbnormalTineBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureRigthAnormalTine';
				
				
				btnRecordLeftTine.label="Measure Rigth Anormal Tine "+numberabnormalright;
				manageCropper.endDraw();
				
			}
			
			protected function CompleteScoringfinalBack_clickHandler(event:MouseEvent):void
			{
				if(parseInt(cmbabnormalpointsrigth.selectedItem)==0){
					if(parseInt(cmbabnormalpointsleft.selectedItem)==0){
						currentState='MeasureAnormalPoints';
						btnRecordLeftTine.label="Measure Left Anormal Tine";
						lbllasmeasurement.text="Measure Rigth Circunference 4 "+scoreutils.Circumferencerigth4;
						manageCropper.endDraw();
					}else{
						numberabnormalleft=parseInt(cmbabnormalpointsleft.selectedItem);
						currentState='RecordLefAbnormalTine';
						btnRecordLeftTine.label="Recorder Left Anormal Tine "+numberabnormalleft;
						manageCropper.beginDraw();
					}
					
				}else{
					numberabnormalright=parseInt(cmbabnormalpointsrigth.selectedItem);
					currentState='RecordRigthAbnormalTine';
					btnRecordLeftTine.label="Recorder Rigth Anormal Tine "+numberabnormalright;
					manageCropper.beginDraw();
				}
			}
			
			protected function ScoringFinalBuck_clickHandler(event:MouseEvent):void
			{
				if(statescoringview!="stateMain"){
				var  verificatescore:ArrayCollection=sqlscore.resaultscore(txtDeerNickName.text);
				if(verificatescore.length>=1) sqlscore.removescore(txtDeerNickName.text);
				var typeerror:String=sqlscore.addItemscore(txtDeerNickName.text,location,txtdatedeer.text,txtcommentsdeer.text,"",scoreutils.insidespread,
					scoreutils.mainbeamleft,
					scoreutils.mainbeamrigth,
					scoreutils.Typicalpointleft1,
					scoreutils.Typicalpointrigth1,
					scoreutils.Typicalpointleft2,
					scoreutils.Typicalpointrigth2,
					scoreutils.Typicalpointleft3,
					scoreutils.Typicalpointrigth3,
					scoreutils.Typicalpointleft4,
					scoreutils.Typicalpointrigth4,
					scoreutils.Typicalpointleft5,
					scoreutils.Typicalpointrigth5,
					scoreutils.Typicalpointleft6,
					scoreutils.Typicalpointrigth6,
					scoreutils.Typicalpointleft7,
					scoreutils.Typicalpointrigth7,
					scoreutils.Typicalpointleft8,
					scoreutils.Typicalpointrigth8,
					scoreutils.Typicalpointleft9,
					scoreutils.Typicalpointrigth9,
					scoreutils.Typicalpointleft10,
					scoreutils.Typicalpointrigth10,
					scoreutils.Circumferenceleft1,
					scoreutils.Circumferencerigth1,
					scoreutils.Circumferenceleft2,
					scoreutils.Circumferencerigth2,
					scoreutils.Circumferenceleft3,
					scoreutils.Circumferencerigth3,
					scoreutils.Circumferenceleft4,
					scoreutils.Circumferencerigth4,
					scoreutils.Abnormalpointleft1,
					scoreutils.Abnormalpointrigth1,
					scoreutils.Abnormalpointleft2,
					scoreutils.Abnormalpointrigth2,
					scoreutils.Abnormalpointleft3,
					scoreutils.Abnormalpointrigth3,
					scoreutils.Abnormalpointleft4,
					scoreutils.Abnormalpointrigth4,
					scoreutils.Abnormalpointleft5,
					scoreutils.Abnormalpointrigth5,
					scoreutils.Abnormalpointleft6,
					scoreutils.Abnormalpointrigth6,
					scoreutils.Abnormalpointleft7,
					scoreutils.Abnormalpointrigth7,
					scoreutils.Abnormalpointleft8,
					scoreutils.Abnormalpointrigth8,
					scoreutils.Abnormalpointleft9,
					scoreutils.Abnormalpointrigth9,
					scoreutils.Abnormalpointleft10,
					scoreutils.Abnormalpointrigth10,
					scoreutils.Abnormalpointleft11,
					scoreutils.Abnormalpointrigth11,
					scoreutils.Abnormalpointleft12,
					scoreutils.Abnormalpointrigth12,
					scoreutils.Abnormalpointleft13,
					scoreutils.Abnormalpointrigth13,
					scoreutils.Abnormalpointleft14,
					scoreutils.Abnormalpointrigth14,
					scoreutils.Abnormalpointleft15,
					scoreutils.Abnormalpointrigth15,
					scoreutils.Abnormalpointleft16,
					scoreutils.Abnormalpointrigth16,
					scoreutils.Abnormalpointleft17,
					scoreutils.Abnormalpointrigth17,
					scoreutils.Abnormalpointleft18,
					scoreutils.Abnormalpointrigth18,
					scoreutils.Abnormalpointleft19,
					scoreutils.Abnormalpointrigth19,
					scoreutils.Abnormalpointleft20,
					scoreutils.Abnormalpointrigth20,
					cmbletftypical.selectedItem,
					cmbrigthtypical.selectedItem,
					grossscore.text);
				    sqlscore.updatephotoscore(txtDeerNickName.text,grossscore.text);
					var index:int;
					for(var i:int=0;i<array2.length;i++){
						var photoItem:Object = array2[i];
						//array2.addItem({image:byteArray ,name:_deername,type:_albumname,score:_score});
						var _deername:String= photoItem.name as String;
						
						if(_deername==txtDeerNickName.text){
							index=i;	
						}
					}
					var arrayaux:Object=array2.getItemAt(index);
					array2.removeItemAt(index);
					array2.addItemAt({image:arrayaux.image,name:arrayaux.name,type:arrayaux.type,score:grossscore.text},index);
					
					
				if(typeerror=="1")
				currentState='stateMain'; scoreutils=new ScoreUtils();
				}
				else {
					currentState='stateMain'; scoreutils=new ScoreUtils();
					statescoringview="";
				}
			}
			
			protected function ViewInstructions_clickHandler(event:MouseEvent):void
			{
				var appDirectory:File = File.applicationDirectory;
				//var helpFile:File = appDirectory.resolvePath("pdf/Instructions.pdf");
				var helpFile:File = new File(File.applicationDirectory.url + "pdf/Instructions.pdf");
				//var helpFile:File = new File(File.applicationDirectory.url + "JavaScriptAPI.chm");
				trace(helpFile.nativePath);
				try
				{
					trace(helpFile);
					helpFile.openWithDefaultApplication();
					
					//filePath.text = helpFile.nativePath;
				}catch(e:Error){
					//filePath.text = e.message;
					
				}
			}
			
			protected function helpcircumference_clickHandler(event:MouseEvent):void
			{
				var appDirectory:File = File.applicationDirectory;
				//var helpFile:File = appDirectory.resolvePath("pdf/Instructions.pdf");
				var helpFile:File = new File(File.applicationDirectory.url + "pdf/Circumference.pdf");
				//var helpFile:File = new File(File.applicationDirectory.url + "JavaScriptAPI.chm");
				trace(helpFile.nativePath);
				try
				{
					trace(helpFile);
					helpFile.openWithDefaultApplication();
					trace("entre");
					//filePath.text = helpFile.nativePath;
				}catch(e:Error){
					//filePath.text = e.message;
					trace("hola");
				}
			}
			
			public function click_MeasureInsideSpread():void {
				currentState='RecorderInsideSpread';
				
				manageCropper.beginDraw();
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="stateMain">
		</s:State>
		<s:State name="stateLogin">
		</s:State>
		<s:State name="editphoto"/>
		<s:State name="editAlbum"/>
		<s:State name="scorephoto"/>
		<s:State name="positionphoto"/>
		<s:State name="referenceFeature"/>
		<s:State name="updatephotodata"/>
		<s:State name="RecordEarWidth"/>
		<s:State name="RecordEyetoEyeWidth"/>
		<s:State name="MeasureInsideSpread"/>
		<s:State name="RecorderInsideSpread"/>
		<s:State name="RecordEyeballWidthFeature"/>
		<s:State name="NumberTypicalPoints"/>
		<s:State name="MeasureLeftMainBeam"/>
		<s:State name="RecordLeftMainBeamLine"/>
		<s:State name="MeasureRigthMainBeam"/>
		<s:State name="RecordRigthMainBeam"/>
		<s:State name="MeasureLeftTine"/>
		<s:State name="RecordLeftTineLine"/>
		<s:State name="MeasureRigthTine"/>
		<s:State name="RecordRigthTineLine"/>
		<s:State name="MeasureLeftCircunference"/>
		<s:State name="RecordLeftCircunference"/>
		<s:State name="MeasureRigthCircumference"/>
		<s:State name="RecordRigthCircumference"/>
		<s:State name="MeasureAnormalPoints"/>
		<s:State name="MeasureLeftAnormalTine"/>
		<s:State name="RecordLefAbnormalTine"/>
		<s:State name="MeasureRigthAnormalTine"/>
		<s:State name="RecordRigthAbnormalTine"/>
		<s:State name="CompleteScoringfinal"/>
		<s:State name="ScoringFinalBuck"/>
		<s:State name="ExpandDeerName"/>
		<s:State name="RecorderInsideSpreadEstimate"/>
		<s:State name="ScoringFinalBuckView"/>
	</s:states>
	
	<s:transitions>
		<s:Transition id="t1" autoReverse="true">
			<s:CrossFade
				target="{holder}" 
				duration="900" />
		</s:Transition>
	</s:transitions>
	
	<fx:Declarations>
		
		<net:FileReference id="fileReference"
						   select="fileReference_select(event);"
						   complete="fileReference_complete(event);" />
		<mx:Zoom id="zoomProduct" zoomWidthTo="1.5" zoomHeightTo="1.5" zoomWidthFrom="1" zoomHeightFrom="1" originX="50" originY="30" />
		
		<mx:WebService id="ws" wsdl="http://www.buckscore.com/WebService/WinAppIntegration.asmx?WSDL">
			<mx:operation name="SignAndRegister" result="callResultHandler(event)" />
		</mx:WebService> 
		
	</fx:Declarations>
	<s:layout.stateLogin>
		<s:BasicLayout/>
	</s:layout.stateLogin>
	
	
	<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
		<s:VGroup id="borderLeft" width="15" height="100%"/>
		<s:VGroup width="100%" height="100%" gap="0">
			<s:HGroup id="borderTop" height="15" width="100%"/>
			<s:SkinnableContainer id="mainBox" width="100%" height="100%">
				<s:VGroup includeIn="stateLogin" width="100%" height="100%">
					<s:Form width="719" height="501">
						<s:Label fontSize="18" fontWeight="bold" text="LOGIN"/>
						<s:FormItem width="248" label="URL">
							<s:TextInput width="144" text="http://www.buckscore.com"/>
							
						</s:FormItem>
						<s:FormItem label="UserName">
							<s:TextInput id="txtusername" width="142"/>
							
						</s:FormItem>
						<s:FormItem width="248" label="Paswoord">
							<s:TextInput id="txtpasswoord" width="143" displayAsPassword="true"/>
							
						</s:FormItem>
						<s:FormItem width="248">
							<s:Button label="Validate"
									  click="ws.SignAndRegister(txtusername.text,txtpasswoord.text)"/>
						</s:FormItem>
						
					</s:Form>
					
				</s:VGroup>
				
				<s:VGroup includeIn="CompleteScoringfinal,ExpandDeerName,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,ScoringFinalBuck,ScoringFinalBuckView,editAlbum,editphoto,positionphoto,referenceFeature,scorephoto,stateMain,updatephotodata"
						  width="100%" height="100%" gap="0" paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6">
					<s:SkinnableContainer width="100%" height="56" backgroundColor="#323232" skinClass="com.complexless.skins.spark.TitleMainSkin">
						<s:HGroup id="titleMain" width="100%" height="100%" gap="0" paddingLeft="5" paddingRight="5">
							<s:Label width="265" height="100%" color="#DCD3D3" fontSize="24"
									 text=" What's you buckscore?" verticalAlign="middle"
									 width.RecordLeftCircunference="257"
									 width.RecordRigthCircumference="260"/>
							<s:Label width="100%" height="100%" color="#DCD3D3" fontFamily="Arial"
									 fontSize="24" fontWeight="normal" text="Powered by the MSU Deer Lab "
									 textAlign="right" verticalAlign="middle"/>
						</s:HGroup>
					</s:SkinnableContainer>
					
					<s:HGroup width="100%" verticalAlign="middle" height="34">
						<bs:MenuBar id="myMenuBar" labelField="@label" height="24" width="100%"  itemClick="menuHandler(event)">
							<fx:XMLList>
								<menuitem label="New">
									<menuitem label="Album"/>
									<menuitem label="Deer"/>
									<menuitem label="Maps"/>
								</menuitem>
								<menuitem label="Skins">
									<menuitem label="Black"/>
									<menuitem label="Silver"/>
								</menuitem>
								<menuitem label="Help">
									<menuitem label="View Help"/>
									<menuitem label="Update License"/>
									<menuitem label="Sincronization"/>
									<menuitem label="About Buckscore Application"/>
								</menuitem>
							</fx:XMLList>
						</bs:MenuBar>
					</s:HGroup>
					<s:HGroup includeIn="ExpandDeerName" width="100%" height="35" alpha="15"
							  verticalAlign="middle">
						<s:Label width="93%" color="#FDFBFB" fontSize="22" fontWeight="bold"
								 text="Deer Data"/>
						<s:Button width="7%" label="Back" chromeColor="#155FE8"
								  click="currentState='stateMain'" color="#F5F5F9"/>
					</s:HGroup>
					<mx:HDividedBox id="mainPanel" width="100%" height="100%" hasFocusableChildren="true" focusEnabled="true">
						<s:VGroup includeIn="CompleteScoringfinal,ExpandDeerName,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,editAlbum,editphoto,positionphoto,referenceFeature,scorephoto,stateMain,updatephotodata"
								  width="100%" height="100%">
							<s:SkinnableContainer width="100%" height="100%"
												  backgroundColor="#848484"
												  height.ExpandDeerName="43">
								<ns1:ManageCropper id="manageCropper"
												   includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,editAlbum,editphoto,positionphoto,referenceFeature,scorephoto,stateMain,updatephotodata"
												   width="100%" height="100%"/>
								<s:Label includeIn="ExpandDeerName" x="14" y="15" fontSize="18"
										 text="Filter"/>
								<s:TextInput includeIn="ExpandDeerName" x="62" y="10" width="225"
											 id="txtexpandfilter"
											 change="filter2()" 
											 focusIn="clearMyTextInput2()"/>
							</s:SkinnableContainer>
							<s:Group includeIn="ExpandDeerName" width="100%" height="100%">
								
								<mx:VBox width="100%">
									
									
									
									
								</mx:VBox>	
								<s:DataGrid id="myGridExpand" width="100%" height="338"
											borderColor="#898585"  color="#FBFAFA"
											contentBackgroundColor="#787474"
											dataProvider="{array2}"  rowHeight="60"
											variableRowHeight="true"
											selectionChange="mygridexpand_selectionChangeHandler(event)" >
									
									<s:columns>
										<s:ArrayList>
											<s:GridColumn    headerText="Image">
												<s:itemRenderer>
													<fx:Component>
														<s:GridItemRenderer>
															<s:Image source="{data.image}"
																	 width="75" height="100"/>
														</s:GridItemRenderer>
													</fx:Component>
												</s:itemRenderer>	   
											</s:GridColumn>
											<s:GridColumn 
												dataField="name"
												headerText="Deer Name"/>
											<s:GridColumn 
												dataField="type"
												headerText="Album Name"/>	 	
											<s:GridColumn 
												dataField="score" headerText="Score#"/>
										</s:ArrayList>
									</s:columns>
								</s:DataGrid>
							</s:Group>
						</s:VGroup>
						<s:VGroup width="308" height="100%"
								  width.ScoringFinalBuck="100%"
								  width.ScoringFinalBuckView="100%">
							<s:SkinnableContainer id="holder" width="100%" height="100%"
												  backgroundColor.CompleteScoringfinal="#3F8AF0"
												  backgroundColor.editAlbum="#3F8AF0"
												  backgroundColor.editphoto="#3F8AF0"
												  height.ExpandDeerName="100%"
												  backgroundColor.ExpandDeerName="#040404"
												  backgroundColor.MeasureAnormalPoints="#3F8AF0"
												  backgroundColor.MeasureInsideSpread="#3F8AF0"
												  backgroundColor.MeasureLeftAnormalTine="#3F8AF0"
												  backgroundColor.MeasureLeftCircunference="#3F8AF0"
												  backgroundColor.MeasureLeftMainBeam="#3F8AF0"
												  backgroundColor.MeasureLeftTine="#3F8AF0"
												  backgroundColor.MeasureRigthAnormalTine="#3F8AF0"
												  backgroundColor.MeasureRigthCircumference="#3F8AF0"
												  backgroundColor.MeasureRigthMainBeam="#3F8AF0"
												  backgroundColor.MeasureRigthTine="#3F8AF0"
												  backgroundColor.NumberTypicalPoints="#3F8AF0"
												  backgroundColor.positionphoto="#3F8AF0"
												  backgroundColor.RecordEarWidth="#3F8AF0"
												  backgroundColor.RecorderInsideSpread="#3F8AF0"
												  backgroundColor.RecorderInsideSpreadEstimate="#3F8AF0"
												  backgroundColor.RecordEyeballWidthFeature="#3F8AF0"
												  backgroundColor.RecordEyetoEyeWidth="#3F8AF0"
												  backgroundColor.RecordLefAbnormalTine="#3F8AF0"
												  backgroundColor.RecordLeftCircunference="#3F8AF0"
												  backgroundColor.RecordLeftMainBeamLine="#3F8AF0"
												  backgroundColor.RecordLeftTineLine="#3F8AF0"
												  backgroundColor.RecordRigthAbnormalTine="#3F8AF0"
												  backgroundColor.RecordRigthCircumference="#3F8AF0"
												  backgroundColor.RecordRigthMainBeam="#3F8AF0"
												  backgroundColor.RecordRigthTineLine="#3F8AF0"
												  backgroundColor.referenceFeature="#3F8AF0"
												  backgroundColor.scorephoto="#3F8AF0"
												  backgroundColor.ScoringFinalBuck="#FBFBFB"
												  backgroundColor.ScoringFinalBuckView="#FBFBFB"
												  backgroundColor.stateMain="#040404"
												  backgroundColor.updatephotodata="#3F8AF0">
								<s:VGroup width="100%" height="100%" gap="0"
										  height.CompleteScoringfinal="422"
										  height.MeasureAnormalPoints="422"
										  height.MeasureInsideSpread="354"
										  height.MeasureLeftAnormalTine="422"
										  height.MeasureLeftCircunference="422"
										  height.MeasureLeftMainBeam="422"
										  height.MeasureLeftTine="422"
										  height.MeasureRigthAnormalTine="422"
										  height.MeasureRigthCircumference="422"
										  height.MeasureRigthMainBeam="422"
										  height.MeasureRigthTine="422"
										  height.NumberTypicalPoints="422"
										  height.RecordEarWidth="354"
										  height.RecorderInsideSpread="354"
										  height.RecorderInsideSpreadEstimate="354"
										  height.RecordEyeballWidthFeature="354"
										  height.RecordEyetoEyeWidth="354"
										  height.RecordLefAbnormalTine="422"
										  height.RecordLeftCircunference="422"
										  height.RecordLeftMainBeamLine="422"
										  height.RecordLeftTineLine="422"
										  height.RecordRigthAbnormalTine="422"
										  height.RecordRigthCircumference="422"
										  height.RecordRigthMainBeam="422"
										  height.RecordRigthTineLine="422"
										  height.referenceFeature="354"
										  width.ScoringFinalBuck="100%"
										  width.ScoringFinalBuckView="100%">
									<s:SkinnableContainer x="0" y="0" width="100%" height="45"
														  backgroundColor="#848484" textAlign="left">
										<s:HGroup x="0" y="0" width="100%" height="100%"
												  verticalAlign="middle">
											<s:Label id="txtNamepaneltitle"
													 includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,ScoringFinalBuck,ScoringFinalBuckView,editAlbum,editphoto,positionphoto,referenceFeature,scorephoto,stateMain,updatephotodata"
													 x="0" y="0" width="100%" color="#DCD3D3"
													 fontSize="20"
													 text.CompleteScoringfinal=" Name"
													 text.editAlbum=" Name"
													 text.editphoto=" Name"
													 text.MeasureAnormalPoints=" Name"
													 text.MeasureInsideSpread=" Name"
													 text.MeasureLeftAnormalTine=" Name"
													 text.MeasureLeftCircunference=" Name"
													 text.MeasureLeftMainBeam=" Name"
													 text.MeasureLeftTine=" Name"
													 text.MeasureRigthAnormalTine=" Name"
													 text.MeasureRigthCircumference=" Name"
													 text.MeasureRigthMainBeam=" Name"
													 text.MeasureRigthTine=" Name"
													 text.NumberTypicalPoints=" Name"
													 text.positionphoto=" Name"
													 text.RecordEarWidth=" Name"
													 text.RecorderInsideSpread=" Name"
													 text.RecorderInsideSpreadEstimate=" Name"
													 text.RecordEyeballWidthFeature=" Name"
													 text.RecordEyetoEyeWidth=" Name"
													 text.RecordLefAbnormalTine=" Name"
													 text.RecordLeftCircunference=" Name"
													 text.RecordLeftMainBeamLine=" Name"
													 text.RecordLeftTineLine=" Name"
													 text.RecordRigthAbnormalTine=" Name"
													 text.RecordRigthCircumference=" Name"
													 text.RecordRigthMainBeam=" Name"
													 text.RecordRigthTineLine=" Name"
													 text.referenceFeature=" Name"
													 text.scorephoto=" Name"
													 text.ScoringFinalBuck=" "
													 text.ScoringFinalBuckView=" "
													 text.updatephotodata=" Name"/>
											<s:Button includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,positionphoto,referenceFeature,scorephoto" label="Close" click="closebutton_buckscore()"/>
											<s:Button includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,positionphoto,referenceFeature,scorephoto"
													  label.CompleteScoringfinal="Back"
													  click.CompleteScoringfinal="CompleteScoringfinalBack_clickHandler(event)"
													  label.MeasureAnormalPoints="Back"
													  click.MeasureAnormalPoints="MeasureAnormalPointsBack(event)"
													  label.MeasureInsideSpread="Back"
													  click.MeasureInsideSpread="BackMeasureInsideSpread_clickHandler(event)"
													  label.MeasureLeftAnormalTine="Back"
													  click.MeasureLeftAnormalTine="MeasureLeftAnormalTineBack_clickHandler(event)"
													  label.MeasureLeftCircunference="Back"
													  click.MeasureLeftCircunference="MeasureLeftCircunferenceBack_clickHandler(event)"
													  label.MeasureLeftMainBeam="Back"
													  click.MeasureLeftMainBeam="currentState='NumberTypicalPoints'; numbertypicalleft=1; lbllasmeasurement.text='Inside Spread: '+ scoreutils.insidespread;"
													  label.MeasureLeftTine="Back"
													  click.MeasureLeftTine="MeasureLeftTineBack_clickHandler(event)"
													  label.MeasureRigthAnormalTine="Back"
													  click.MeasureRigthAnormalTine="MeasureRigthAnormalTineBack_clickHandler(event)"
													  label.MeasureRigthCircumference="Back"
													  click.MeasureRigthCircumference="MeasureRigthCircumferenceBack_clickHandler(event)"
													  label.MeasureRigthMainBeam="Back"
													  click.MeasureRigthMainBeam="currentState='RecordLeftMainBeamLine'; manageCropper.beginDraw(); "
													  label.MeasureRigthTine="Back"
													  click.MeasureRigthTine="MeasureRigthTineBack_clickHandler(event)"
													  label.NumberTypicalPoints="Back"
													  click.NumberTypicalPoints="if(grade!='90'){currentState='RecorderInsideSpread'; manageCropper.beginDraw();}else currentState='RecorderInsideSpreadEstimate' "
													  label.positionphoto="Back"
													  click.positionphoto="button3_backeditphoto(event)"
													  label.RecordEarWidth="Back"
													  click.RecordEarWidth="currentState='referenceFeature'"
													  label.RecorderInsideSpread="Back"
													  click.RecorderInsideSpread="currentState='MeasureInsideSpread'"
													  label.RecorderInsideSpreadEstimate="Back"
													  click.RecorderInsideSpreadEstimate="BackMeasureInsideSpread_clickHandler(event)"
													  label.RecordEyeballWidthFeature="Back"
													  click.RecordEyeballWidthFeature="currentState='referenceFeature'"
													  label.RecordEyetoEyeWidth="Back"
													  click.RecordEyetoEyeWidth="currentState='referenceFeature'"
													  label.RecordLefAbnormalTine="Back"
													  click.RecordLefAbnormalTine="RecordLefAbnormalTineBack_clickHandler(event)"
													  label.RecordLeftCircunference="Back"
													  click.RecordLeftCircunference="RecordLeftCircunferenceBack_clickHandler(event)"
													  label.RecordLeftMainBeamLine="Back"
													  click.RecordLeftMainBeamLine="currentState='MeasureLeftMainBeam'"
													  label.RecordLeftTineLine="Back"
													  click.RecordLeftTineLine="RecordLeftTineLineBack_clickHandler(event)"
													  label.RecordRigthAbnormalTine="Back"
													  click.RecordRigthAbnormalTine="RecordRigthAbnormalTineBack_clickHandler(event)"
													  label.RecordRigthCircumference="Back"
													  click.RecordRigthCircumference="RecordRigthCircumferenceBack_clickHandler(event)"
													  label.RecordRigthMainBeam="Back"
													  click.RecordRigthMainBeam="currentState='MeasureRigthMainBeam'; lbllasmeasurement.text='Record Rigth Main Beam:'+scoreutils.mainbeamrigth;"
													  label.RecordRigthTineLine="Back"
													  click.RecordRigthTineLine="RecordRigthTineLineBack_clickHandler(event)"
													  label.referenceFeature="Back"
													  click.referenceFeature="button3_referenceFeature(event)"
													  label.scorephoto="Back"
													  click.scorephoto="button3_backscorephoto(event)"/>
											<s:Label includeIn="ExpandDeerName" width="209"
													 color="#FCF9F9" fontSize="20" fontWeight="bold"
													 text="Deer Statistic"/>
											<s:Button includeIn="stateMain" label="Delete" click="deletephoto_clickHandler(event)"/>
											<s:HGroup includeIn="ScoringFinalBuck,ScoringFinalBuckView" y="10" width="470"
													  height="26">
												<s:Button label="Facebook" alpha="8"
														  chromeColor="#323232" cornerRadius="6"/>
												<s:Button label="Twitter" alpha="8"
														  chromeColor="#323232" cornerRadius="6"/>
												<s:Button label="Email" alpha="8"
														  chromeColor="#323232" cornerRadius="6"/>
												<s:Button label="Save" alpha="8"
														  chromeColor="#323232" cornerRadius="6"/>
												<s:Button label="Print" alpha="8"
														  chromeColor="#323232" cornerRadius="6" click="printingscore_clickHandler(event)"/>
												<s:Button label="Finish" alpha="8"
														  chromeColor="#323232"
														  click.ScoringFinalBuck="ScoringFinalBuck_clickHandler(event)"
														  cornerRadius="6"
														  label.ScoringFinalBuckView="Close"
														  click.ScoringFinalBuckView="ScoringFinalBuckView_clickHandler(event)"
														  />
											</s:HGroup>
										</s:HGroup>
									</s:SkinnableContainer>
									<s:HGroup includeIn="CompleteScoringfinal,ExpandDeerName,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,editAlbum,editphoto,positionphoto,referenceFeature,scorephoto,stateMain,updatephotodata"
											  x="0" y="0" width="100%"
											  height.CompleteScoringfinal="374"
											  height.editAlbum="314"
											  height.editphoto="314"
											  height.ExpandDeerName="82"
											  accentColor.ExpandDeerName="#3F8AF0"
											  height.MeasureAnormalPoints="374"
											  height.MeasureInsideSpread="314"
											  height.MeasureLeftAnormalTine="374"
											  height.MeasureLeftCircunference="374"
											  height.MeasureLeftMainBeam="374"
											  height.MeasureLeftTine="374"
											  height.MeasureRigthAnormalTine="374"
											  height.MeasureRigthCircumference="374"
											  height.MeasureRigthMainBeam="374"
											  height.MeasureRigthTine="374"
											  height.NumberTypicalPoints="374"
											  height.positionphoto="314"
											  height.RecordEarWidth="314"
											  height.RecorderInsideSpread="314"
											  height.RecorderInsideSpreadEstimate="314"
											  height.RecordEyeballWidthFeature="314"
											  height.RecordEyetoEyeWidth="314"
											  height.RecordLefAbnormalTine="374"
											  height.RecordLeftCircunference="374"
											  height.RecordLeftMainBeamLine="374"
											  height.RecordLeftTineLine="374"
											  height.RecordRigthAbnormalTine="374"
											  height.RecordRigthCircumference="374"
											  height.RecordRigthMainBeam="374"
											  height.RecordRigthTineLine="374"
											  height.referenceFeature="314"
											  height.scorephoto="314"
											  height.stateMain="95" accentColor.stateMain="#3F8AF0"
											  height.updatephotodata="314">
										<s:SkinnableContainer includeIn="ExpandDeerName,stateMain" width="307"
															  backgroundColor="#040404">
											<s:HGroup>
												
												
												<s:VGroup includeIn="stateMain" width="130"
														  height="92">
													<s:Image id="imageforedition" width="128" height="89"/>
												</s:VGroup>
												<s:VGroup width="168" height="93"
														  width.ExpandDeerName="304"
														  height.ExpandDeerName="80">
													<s:Group width="166" height="90"
															 width.ExpandDeerName="306"
															 height.ExpandDeerName="78">
														<s:Label includeIn="stateMain" x="0" y="8"
																 color="#F7F5F5" fontStyle="normal"
																 text="Name"/>
														<s:Label id="lbldeernastate"
																 includeIn="stateMain" x="0" y="25"
																 color="#F7F5F5" fontStyle="normal"
																 fontWeight="bold" text="Deer Name"/>
														<s:Label x="0" y="49" color="#F7F5F5"
																 id="lblAlbumnameexpand"
																 fontStyle="normal"
																 text="Album Name"
																 x.ExpandDeerName="0"
																 y.ExpandDeerName="18"
																 fontSize.ExpandDeerName="18"
																 fontWeight.ExpandDeerName="normal"/>
														<s:Label id="lbldeeralbumstate"
																 includeIn="stateMain" x="0" y="67"
																 color="#F7F5F5" fontStyle="normal"
																 fontWeight="bold" text="Album Name"/>
														<s:HGroup includeIn="stateMain" width="482"
																  height="13">
														</s:HGroup>
														<s:Image includeIn="ExpandDeerName" id="img_ExpandDeerName" x="200"
																 y="0" width="100%" height="78"/>
														<s:Label id="lbldeernameexpand"
																 includeIn="ExpandDeerName" x="3"
																 y="57" fontSize="14"
																 fontStyle="normal"
																 fontWeight="bold"/>
													</s:Group>
												</s:VGroup>
											</s:HGroup>
										</s:SkinnableContainer>	
										
										
										<s:SkinnableContainer includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,editAlbum,editphoto,positionphoto,referenceFeature,scorephoto,updatephotodata"
															  width="100%"
															  height.CompleteScoringfinal="371"
															  backgroundColor.CompleteScoringfinal="#3F8AF0"
															  chromeColor.CompleteScoringfinal="#03F8AF"
															  height.editAlbum="376"
															  backgroundColor.editAlbum="#3F8AF0"
															  height.editphoto="372"
															  backgroundColor.editphoto="#3F8AF0"
															  height.MeasureAnormalPoints="371"
															  backgroundColor.MeasureAnormalPoints="#3F8AF0"
															  chromeColor.MeasureAnormalPoints="#03F8AF"
															  height.MeasureInsideSpread="375"
															  backgroundColor.MeasureInsideSpread="#3F8AF0"
															  chromeColor.MeasureInsideSpread="#03F8AF"
															  height.MeasureLeftAnormalTine="371"
															  backgroundColor.MeasureLeftAnormalTine="#3F8AF0"
															  chromeColor.MeasureLeftAnormalTine="#03F8AF"
															  height.MeasureLeftCircunference="371"
															  backgroundColor.MeasureLeftCircunference="#3F8AF0"
															  chromeColor.MeasureLeftCircunference="#03F8AF"
															  height.MeasureLeftMainBeam="371"
															  backgroundColor.MeasureLeftMainBeam="#3F8AF0"
															  chromeColor.MeasureLeftMainBeam="#03F8AF"
															  height.MeasureLeftTine="371"
															  backgroundColor.MeasureLeftTine="#3F8AF0"
															  chromeColor.MeasureLeftTine="#03F8AF"
															  height.MeasureRigthAnormalTine="371"
															  backgroundColor.MeasureRigthAnormalTine="#3F8AF0"
															  chromeColor.MeasureRigthAnormalTine="#03F8AF"
															  height.MeasureRigthCircumference="371"
															  backgroundColor.MeasureRigthCircumference="#3F8AF0"
															  chromeColor.MeasureRigthCircumference="#03F8AF"
															  height.MeasureRigthMainBeam="371"
															  backgroundColor.MeasureRigthMainBeam="#3F8AF0"
															  chromeColor.MeasureRigthMainBeam="#03F8AF"
															  height.MeasureRigthTine="371"
															  backgroundColor.MeasureRigthTine="#3F8AF0"
															  chromeColor.MeasureRigthTine="#03F8AF"
															  height.NumberTypicalPoints="371"
															  backgroundColor.NumberTypicalPoints="#3F8AF0"
															  chromeColor.NumberTypicalPoints="#03F8AF"
															  height.positionphoto="376"
															  backgroundColor.positionphoto="#3F8AF0"
															  height.RecordEarWidth="375"
															  backgroundColor.RecordEarWidth="#3F8AF0"
															  chromeColor.RecordEarWidth="#03F8AF"
															  height.RecorderInsideSpread="375"
															  backgroundColor.RecorderInsideSpread="#3F8AF0"
															  chromeColor.RecorderInsideSpread="#03F8AF"
															  height.RecorderInsideSpreadEstimate="375"
															  backgroundColor.RecorderInsideSpreadEstimate="#3F8AF0"
															  chromeColor.RecorderInsideSpreadEstimate="#03F8AF"
															  height.RecordEyeballWidthFeature="375"
															  backgroundColor.RecordEyeballWidthFeature="#3F8AF0"
															  chromeColor.RecordEyeballWidthFeature="#03F8AF"
															  height.RecordEyetoEyeWidth="375"
															  backgroundColor.RecordEyetoEyeWidth="#3F8AF0"
															  chromeColor.RecordEyetoEyeWidth="#03F8AF"
															  height.RecordLefAbnormalTine="371"
															  backgroundColor.RecordLefAbnormalTine="#3F8AF0"
															  chromeColor.RecordLefAbnormalTine="#03F8AF"
															  height.RecordLeftCircunference="371"
															  backgroundColor.RecordLeftCircunference="#3F8AF0"
															  chromeColor.RecordLeftCircunference="#03F8AF"
															  height.RecordLeftMainBeamLine="371"
															  backgroundColor.RecordLeftMainBeamLine="#3F8AF0"
															  chromeColor.RecordLeftMainBeamLine="#03F8AF"
															  height.RecordLeftTineLine="371"
															  backgroundColor.RecordLeftTineLine="#3F8AF0"
															  chromeColor.RecordLeftTineLine="#03F8AF"
															  height.RecordRigthAbnormalTine="371"
															  backgroundColor.RecordRigthAbnormalTine="#3F8AF0"
															  chromeColor.RecordRigthAbnormalTine="#03F8AF"
															  height.RecordRigthCircumference="371"
															  backgroundColor.RecordRigthCircumference="#3F8AF0"
															  chromeColor.RecordRigthCircumference="#03F8AF"
															  height.RecordRigthMainBeam="371"
															  backgroundColor.RecordRigthMainBeam="#3F8AF0"
															  chromeColor.RecordRigthMainBeam="#03F8AF"
															  height.RecordRigthTineLine="371"
															  backgroundColor.RecordRigthTineLine="#3F8AF0"
															  chromeColor.RecordRigthTineLine="#03F8AF"
															  height.referenceFeature="375"
															  backgroundColor.referenceFeature="#3F8AF0"
															  chromeColor.referenceFeature="#03F8AF"
															  height.scorephoto="377"
															  backgroundColor.scorephoto="#3F8AF0"
															  height.updatephotodata="372"
															  backgroundColor.updatephotodata="#3F8AF0">
											<s:BorderContainer includeIn="editphoto,updatephotodata" width="98"
															   height="62" backgroundColor="#131212"
															   id="imageuploadfile"
															   horizontalCenter="-6"
															   verticalCenter="-150">
												<s:Button id="btnbrowsetoadd" includeIn="editphoto"
														  x="4" y="3" width="89" height="47"
														  label="Browse to add "
														  chromeColor="#131212" click="uploadfile()"
														  color="#FAF5F5" cornerRadius="5"
														  focusColor="#3F3636" focusEnabled="true"
														  fontSize="10" textAlignLast="center"
														  textAlpha="2" textDecoration="none"
														  textJustify="distribute"/>
												<s:Image id="imgupload" x="0" y="0" width="96" height="60" visible="false"
														 click="uploadfile2()"/>
												
											</s:BorderContainer>
											
											<s:Label x="20" y="2" text="Add Deer"
													 x.CompleteScoringfinal="20"
													 y.CompleteScoringfinal="13"
													 text.CompleteScoringfinal="Score Deer"
													 text.editAlbum="Album"
													 x.editphoto="20" y.editphoto="5"
													 x.MeasureAnormalPoints="20"
													 y.MeasureAnormalPoints="13"
													 text.MeasureAnormalPoints="Score Deer"
													 x.MeasureInsideSpread="20"
													 y.MeasureInsideSpread="13"
													 text.MeasureInsideSpread="Score Deer"
													 x.MeasureLeftAnormalTine="20"
													 y.MeasureLeftAnormalTine="13"
													 text.MeasureLeftAnormalTine="Score Deer"
													 x.MeasureLeftCircunference="20"
													 y.MeasureLeftCircunference="13"
													 text.MeasureLeftCircunference="Score Deer"
													 x.MeasureLeftMainBeam="20"
													 y.MeasureLeftMainBeam="13"
													 text.MeasureLeftMainBeam="Score Deer"
													 x.MeasureLeftTine="20" y.MeasureLeftTine="13"
													 text.MeasureLeftTine="Score Deer"
													 x.MeasureRigthAnormalTine="20"
													 y.MeasureRigthAnormalTine="13"
													 text.MeasureRigthAnormalTine="Score Deer"
													 x.MeasureRigthCircumference="20"
													 y.MeasureRigthCircumference="13"
													 text.MeasureRigthCircumference="Score Deer"
													 x.MeasureRigthMainBeam="20"
													 y.MeasureRigthMainBeam="13"
													 text.MeasureRigthMainBeam="Score Deer"
													 x.MeasureRigthTine="20" y.MeasureRigthTine="13"
													 text.MeasureRigthTine="Score Deer"
													 x.NumberTypicalPoints="20"
													 y.NumberTypicalPoints="13"
													 text.NumberTypicalPoints="Score Deer"
													 x.positionphoto="20" y.positionphoto="20"
													 text.positionphoto="Score Deer"
													 x.RecordEarWidth="20" y.RecordEarWidth="13"
													 text.RecordEarWidth="Score Deer"
													 x.RecorderInsideSpread="20"
													 y.RecorderInsideSpread="13"
													 text.RecorderInsideSpread="Score Deer"
													 x.RecorderInsideSpreadEstimate="20"
													 y.RecorderInsideSpreadEstimate="13"
													 text.RecorderInsideSpreadEstimate="Score Deer"
													 x.RecordEyeballWidthFeature="20"
													 y.RecordEyeballWidthFeature="13"
													 text.RecordEyeballWidthFeature="Score Deer"
													 x.RecordEyetoEyeWidth="20"
													 y.RecordEyetoEyeWidth="13"
													 text.RecordEyetoEyeWidth="Score Deer"
													 x.RecordLefAbnormalTine="20"
													 y.RecordLefAbnormalTine="13"
													 text.RecordLefAbnormalTine="Score Deer"
													 x.RecordLeftCircunference="20"
													 y.RecordLeftCircunference="13"
													 text.RecordLeftCircunference="Score Deer"
													 x.RecordLeftMainBeamLine="20"
													 y.RecordLeftMainBeamLine="13"
													 text.RecordLeftMainBeamLine="Score Deer"
													 x.RecordLeftTineLine="20"
													 y.RecordLeftTineLine="13"
													 text.RecordLeftTineLine="Score Deer"
													 x.RecordRigthAbnormalTine="20"
													 y.RecordRigthAbnormalTine="13"
													 text.RecordRigthAbnormalTine="Score Deer"
													 x.RecordRigthCircumference="20"
													 y.RecordRigthCircumference="13"
													 text.RecordRigthCircumference="Score Deer"
													 x.RecordRigthMainBeam="20"
													 y.RecordRigthMainBeam="13"
													 text.RecordRigthMainBeam="Score Deer"
													 x.RecordRigthTineLine="20"
													 y.RecordRigthTineLine="13"
													 text.RecordRigthTineLine="Score Deer"
													 x.referenceFeature="20" y.referenceFeature="20"
													 text.referenceFeature="Score Deer"
													 x.scorephoto="20" y.scorephoto="20"
													 text.scorephoto="Score Deer"
													 x.updatephotodata="20" y.updatephotodata="5"/>
											<s:VGroup includeIn="editAlbum,editphoto,scorephoto,updatephotodata"
													  x.editAlbum="21" y.editAlbum="50"
													  width.editAlbum="279" height.editAlbum="316"
													  x.editphoto="64" y.editphoto="74"
													  width.editphoto="218" height.editphoto="285"
													  x.scorephoto="20" y.scorephoto="49"
													  width.scorephoto="279" height.scorephoto="318"
													  x.updatephotodata="64" y.updatephotodata="74"
													  width.updatephotodata="218"
													  height.updatephotodata="285">
												<s:Label includeIn="editphoto,updatephotodata" text="Deer Name"/>
												
												<s:TextInput id="txtdeernamesave"
															 includeIn="editphoto,updatephotodata"
															 width="164" name="txtdeernamesave"
															 editable.updatephotodata="true"/>
												<s:Label includeIn="scorephoto" text="State"/>
												<s:ComboBox id="cmbstate"   includeIn="scorephoto"/>
												<s:HGroup includeIn="editAlbum" width="277"
														  height="29">
													<s:Label text=" Album Name"/>
													<s:TextInput  id="txtalbumname" name="txtalbumname"/>
												</s:HGroup>
												<s:HGroup includeIn="editAlbum" width="276"
														  height="94">
													<s:Label text="   Description"/>
													<s:TextArea id="txtdescriptionalbum" width="129"
																height="86"
																name="txtdescriptionalbum"/>
												</s:HGroup>
												<s:Label includeIn="editphoto,updatephotodata" text="Album Name"/>
												<s:DropDownList id="cmbalbumnameselection"
															includeIn="editphoto,updatephotodata"
															width="164" dataProvider="{combo}"
															>
													
													
												</s:DropDownList>
												<s:Label includeIn="scorephoto" text="Deer Age"/>
												<s:ComboBox includeIn="scorephoto" id="cmbage"/>
												
												<s:Group includeIn="editAlbum,scorephoto" width="197"
														 height="11"
														 height.scorephoto="26">
													<s:Button label="Add"
															  x.editAlbum="130" y.editAlbum="-10"
															  x.scorephoto="97" y.scorephoto="1"
															  label.scorephoto="Next"
															  click.scorephoto="scorephoto_clickHandler(event)"
															  click.editAlbum="editAlbum_clickHandler(event)"/>
												</s:Group>
												<s:HGroup includeIn="editphoto,updatephotodata">
													<s:Label text="Tag Number"/>
												</s:HGroup>
												<s:TextInput includeIn="editphoto,updatephotodata"
															 width="164" name="txttagnumbersave" id="txttagnumbersave"/>
												<s:Label includeIn="editAlbum" text="Delete Album"/>
												<s:HGroup includeIn="editphoto,updatephotodata">
													<s:Label text="Ranch Name"/>
												</s:HGroup>
												<s:TextInput includeIn="editphoto,updatephotodata" width="164" name="txtranchnamesave" id="txtranchnamesave"/>
												<s:HGroup includeIn="editphoto,updatephotodata">
													<s:Label text="Posture Name"/>
												</s:HGroup>	
												<s:TextInput includeIn="editphoto,updatephotodata"
															 width="164" name="txtposturenamesave" id="txtposturenamesave"/>
												<mx:HRule includeIn="editphoto,updatephotodata" width="165"/>
												<s:HGroup includeIn="editphoto,updatephotodata" width="164"
														  height="27">
													<s:Button width="80" label="Add"
															  click="savephotoedition()"
															  name="btnadd"
															  label.updatephotodata="Done"
															  click.updatephotodata="updatesavephotoedition()" />
													<s:Button includeIn="editphoto" width="80"
															  label="Cancel"
															  click="button1_canceluploadphot(event)"
															  name="btncancel"/>
												</s:HGroup>
												<mx:HRule includeIn="editAlbum" width="200"/>
												<s:HGroup includeIn="editAlbum" width="217">
													<s:Label text="Album Name"/>
													<s:ComboBox id="combodeletealbum" dataProvider="{combo}" width="133"/>
												</s:HGroup>
												<s:Group includeIn="editAlbum" width="200"
														 height="17">
													<s:Button x="130" y="7" label="Delete" click="DeleteAlbum_clickHandler(event)"/>
												</s:Group>
												<mx:HRule includeIn="editAlbum,scorephoto" width="200"
														  height="0"/>
												<s:Group includeIn="editAlbum" width="200"
														 height="15">
													<s:Button x="132" y="4" label="Close"
															  click="currentState='stateMain'"  />
												</s:Group>
											</s:VGroup>
											<s:Label includeIn="editAlbum" x="20" y="28" text="Add Album"/>
											<s:Label includeIn="positionphoto,referenceFeature" x="108" y="46"
													 text="Image Orientation"/>
											<s:Group includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,positionphoto,referenceFeature"
													 x="20" y="65" width="267" height="238"
													 x.CompleteScoringfinal="20"
													 y.CompleteScoringfinal="43"
													 height.CompleteScoringfinal="318"
													 chromeColor.CompleteScoringfinal="#3AB7EB"
													 x.MeasureAnormalPoints="20"
													 y.MeasureAnormalPoints="43"
													 height.MeasureAnormalPoints="318"
													 chromeColor.MeasureAnormalPoints="#3AB7EB"
													 height.MeasureInsideSpread="64"
													 chromeColor.MeasureInsideSpread="#3AB7EB"
													 x.MeasureLeftAnormalTine="20"
													 y.MeasureLeftAnormalTine="32"
													 height.MeasureLeftAnormalTine="339"
													 chromeColor.MeasureLeftAnormalTine="#3AB7EB"
													 x.MeasureLeftCircunference="20"
													 y.MeasureLeftCircunference="43"
													 height.MeasureLeftCircunference="318"
													 chromeColor.MeasureLeftCircunference="#3AB7EB"
													 x.MeasureLeftMainBeam="20"
													 y.MeasureLeftMainBeam="43"
													 height.MeasureLeftMainBeam="318"
													 chromeColor.MeasureLeftMainBeam="#3AB7EB"
													 x.MeasureLeftTine="20" y.MeasureLeftTine="43"
													 height.MeasureLeftTine="318"
													 chromeColor.MeasureLeftTine="#3AB7EB"
													 x.MeasureRigthAnormalTine="20"
													 y.MeasureRigthAnormalTine="32"
													 height.MeasureRigthAnormalTine="339"
													 chromeColor.MeasureRigthAnormalTine="#3AB7EB"
													 x.MeasureRigthCircumference="20"
													 y.MeasureRigthCircumference="43"
													 height.MeasureRigthCircumference="318"
													 chromeColor.MeasureRigthCircumference="#3AB7EB"
													 x.MeasureRigthMainBeam="20"
													 y.MeasureRigthMainBeam="43"
													 height.MeasureRigthMainBeam="318"
													 chromeColor.MeasureRigthMainBeam="#3AB7EB"
													 x.MeasureRigthTine="20" y.MeasureRigthTine="43"
													 height.MeasureRigthTine="318"
													 chromeColor.MeasureRigthTine="#3AB7EB"
													 x.NumberTypicalPoints="20"
													 y.NumberTypicalPoints="43"
													 height.NumberTypicalPoints="318"
													 chromeColor.NumberTypicalPoints="#3AB7EB"
													 height.RecordEarWidth="117"
													 chromeColor.RecordEarWidth="#3AB7EB"
													 height.RecorderInsideSpread="117"
													 chromeColor.RecorderInsideSpread="#3AB7EB"
													 height.RecorderInsideSpreadEstimate="64"
													 chromeColor.RecorderInsideSpreadEstimate="#3AB7EB"
													 height.RecordEyeballWidthFeature="117"
													 chromeColor.RecordEyeballWidthFeature="#3AB7EB"
													 height.RecordEyetoEyeWidth="117"
													 chromeColor.RecordEyetoEyeWidth="#3AB7EB"
													 x.RecordLefAbnormalTine="20"
													 y.RecordLefAbnormalTine="32"
													 height.RecordLefAbnormalTine="339"
													 chromeColor.RecordLefAbnormalTine="#3AB7EB"
													 x.RecordLeftCircunference="20"
													 y.RecordLeftCircunference="32"
													 height.RecordLeftCircunference="339"
													 chromeColor.RecordLeftCircunference="#3AB7EB"
													 x.RecordLeftMainBeamLine="20"
													 y.RecordLeftMainBeamLine="43"
													 height.RecordLeftMainBeamLine="318"
													 chromeColor.RecordLeftMainBeamLine="#3AB7EB"
													 x.RecordLeftTineLine="20"
													 y.RecordLeftTineLine="43"
													 height.RecordLeftTineLine="328"
													 chromeColor.RecordLeftTineLine="#3AB7EB"
													 x.RecordRigthAbnormalTine="20"
													 y.RecordRigthAbnormalTine="32"
													 height.RecordRigthAbnormalTine="339"
													 chromeColor.RecordRigthAbnormalTine="#3AB7EB"
													 x.RecordRigthCircumference="20"
													 y.RecordRigthCircumference="32"
													 height.RecordRigthCircumference="339"
													 chromeColor.RecordRigthCircumference="#3AB7EB"
													 x.RecordRigthMainBeam="20"
													 y.RecordRigthMainBeam="43"
													 height.RecordRigthMainBeam="328"
													 chromeColor.RecordRigthMainBeam="#3AB7EB"
													 x.RecordRigthTineLine="20"
													 y.RecordRigthTineLine="43"
													 height.RecordRigthTineLine="328"
													 chromeColor.RecordRigthTineLine="#3AB7EB"
													 height.referenceFeature="246"
													 chromeColor.referenceFeature="#3AB7EB">
												<s:Button includeIn="positionphoto" x="59" y="129"
														  width="32" height="28"
														  click="btnback_backphoto(event)"
														  cornerRadius="30" icon="Image/back.png"/>
												<s:Button includeIn="positionphoto" x="177" y="129"
														  width="29" height="28" alpha="1"
														  blendMode="layer"
														  click="btnnext_nextphoto(event)"
														  cornerRadius="30" icon="Image/next.png"
														  name="btnnext"/>
												<s:Button includeIn="positionphoto" x="69" y="176"
														  width="129" height="33"
														  label="Lock in View" alpha="4"
														  name="btnback"
														  click="button4_positionphoto(event)"/>
												<s:Group includeIn="positionphoto" x="56" y="3"
														 width="156" height="123">
													<s:Image id="imageposition" x="11" y="7"
															 width="133" height="107"
															 source="Image/0_RL.png"/>
												</s:Group>
												
												
												
												<s:BorderContainer includeIn="referenceFeature"
																   id="bordercontanierreferencefeature"
																   x="31" y="10" width="206"
																   height="226"
																   accentColor="#6EC8F6" alpha="15"
																   backgroundColor="#3F8AF0"
																   borderAlpha="25"
																   borderColor="#0C0C0C"
																   cornerRadius="5"
																   mouseFocusEnabled="true"
																   rollOverColor="#F7C7C7"
																   >
													<mx:List id="birdlist" x="5" y="7" width="170"
															 height="208"
															 contentBackgroundColor="#3F8AF0"
															 creationComplete="birdlist_complete(event)"
															 itemRenderer="mx.controls.Image"
															 rowCount="2" rowHeight="100"
															 selectedIndex="0">
														
														
														
														
													</mx:List>	
													<s:Label x="194" y="26" rotation="90"
															 text="Ear Width" id="lblEarWidth"/>
													
													
													<s:Label x="196" y="120" rotation="90"
															 text="Eye to Eye width" id="lblEyetoEyewidth"/>
												</s:BorderContainer>
												<s:Label includeIn="positionphoto" x="228" y="30"
														 rotation="90" text="Zero Degrees" id="lblpositionphoto"/>
												<s:Button id="tglearwidth"
																includeIn="MeasureInsideSpread,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecorderInsideSpread,RecorderInsideSpreadEstimate"
																x="28" y="12" width="208"
																height="33"
																label="Record Ear Width Feature"
																cornerRadius="10"
																label.MeasureInsideSpread="Measure Inside Spread"
																alpha.MeasureInsideSpread="10"
																chromeColor.MeasureInsideSpread="#323232"
																click.MeasureInsideSpread="click_MeasureInsideSpread(); "
																alpha.RecordEarWidth="10"
																chromeColor.RecordEarWidth="#323232"
																click.RecordEarWidth="toggle_EarWidthHandler(event)"
																label.RecorderInsideSpread="Record Eye to Eye Width Feature"
																alpha.RecorderInsideSpread="10"
																chromeColor.RecorderInsideSpread="#323232"
																click.RecorderInsideSpread="toggle_RecorderInsideSpread(event)"
																label.RecorderInsideSpreadEstimate="Estimate Inside Spread"
																alpha.RecorderInsideSpreadEstimate="10"
																chromeColor.RecorderInsideSpreadEstimate="#323232"
																click.RecorderInsideSpreadEstimate="RecorderInsideSpreadEstimate_clickHandler(event)"
																label.RecordEyeballWidthFeature="Record Eyeball Width Feature"
																alpha.RecordEyeballWidthFeature="10"
																chromeColor.RecordEyeballWidthFeature="#323232"
																click.RecordEyeballWidthFeature="toggle_EarWidthHandler(event)"
																label.RecordEyetoEyeWidth="Record Inside Spread"
																alpha.RecordEyetoEyeWidth="10"
																chromeColor.RecordEyetoEyeWidth="#323232"
																click.RecordEyetoEyeWidth="toggle_EarWidthHandler(event)"/>
												<s:Button includeIn="RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecorderInsideSpread"
																x="28" y="63" width="208"
																height="34" label="Erase Lines"
																cornerRadius="10"
																alpha.RecordEarWidth="10"
																chromeColor.RecordEarWidth="#323232"
																alpha.RecorderInsideSpread="10"
																chromeColor.RecorderInsideSpread="#323232"
																alpha.RecordEyeballWidthFeature="10"
																chromeColor.RecordEyeballWidthFeature="#323232"
																alpha.RecordEyetoEyeWidth="10"
																chromeColor.RecordEyetoEyeWidth="#323232"
																click="manageCropper.erase()"/>
												<s:VGroup includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
														  x="10" y="8" width="238" height="87"
														  x.MeasureLeftAnormalTine="10"
														  y.MeasureLeftAnormalTine="4"
														  x.MeasureRigthAnormalTine="10"
														  y.MeasureRigthAnormalTine="4"
														  x.RecordLefAbnormalTine="10"
														  y.RecordLefAbnormalTine="4"
														  x.RecordLeftCircunference="10"
														  y.RecordLeftCircunference="4"
														  x.RecordLeftTineLine="10"
														  y.RecordLeftTineLine="4"
														  x.RecordRigthAbnormalTine="10"
														  y.RecordRigthAbnormalTine="4"
														  x.RecordRigthCircumference="10"
														  y.RecordRigthCircumference="4"
														  x.RecordRigthTineLine="10"
														  y.RecordRigthTineLine="4">
													<s:Label text="Number of Left Typical Points"
															 text.CompleteScoringfinal="Left Abnormal Points"
															 text.MeasureAnormalPoints="Number of Left Abnormal Points"
															 text.MeasureLeftAnormalTine="Left Abnormal Points"
															 text.MeasureLeftCircunference="Left Typical Points"
															 text.MeasureLeftMainBeam="Left Typical Points"
															 text.MeasureLeftTine="Left Typical Points"
															 text.MeasureRigthAnormalTine="Left Abnormal Points"
															 text.MeasureRigthCircumference="Left Typical Points"
															 text.MeasureRigthMainBeam="Left Typical Points"
															 text.MeasureRigthTine="Left Typical Points"
															 text.RecordLefAbnormalTine="Left Abnormal Points"
															 text.RecordLeftCircunference="Left Typical Points"
															 text.RecordLeftMainBeamLine="Left Typical Points"
															 text.RecordLeftTineLine="Left Typical Points"
															 text.RecordRigthAbnormalTine="Left Abnormal Points"
															 text.RecordRigthCircumference="Left Typical Points"
															 text.RecordRigthMainBeam="Left Typical Points"
															 text.RecordRigthTineLine="Left Typical Points"/>
													<s:ComboBox id="cmbletftypical"
																includeIn="NumberTypicalPoints"
																chromeColor="#323232"
																selectedIndex="0">
														<s:dataProvider>
															<mx:ArrayList>
																<fx:String>1</fx:String>
																<fx:String>2</fx:String>
																<fx:String>3</fx:String>
																<fx:String>4</fx:String>
																<fx:String>5</fx:String>
																<fx:String>6</fx:String>
																<fx:String>7</fx:String>
																<fx:String>8</fx:String>
																<fx:String>9</fx:String>
																<fx:String>10</fx:String>
															</mx:ArrayList>
														</s:dataProvider>	
													</s:ComboBox>	
													<s:TextInput id="txtTypicalLeftPonitsRigthMain"
																 includeIn="MeasureLeftCircunference,MeasureLeftTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine"
																 editable.MeasureRigthMainBeam="false"/>
													<s:TextInput id="txttypicalleft"
																 includeIn="MeasureLeftMainBeam"
																 editable="false"/>
													<s:TextInput includeIn="RecordLeftMainBeamLine" editable="false" id="txtRecordMainLeftPoints"/>
													<s:TextInput id="txtTypicalLeftRecordRigth"
																 includeIn="RecordRigthMainBeam"
																 editable="false"/>
													<s:TextInput id="txtTypicalLeftRecordLeftTine"
																 includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
																 editable.RecordLeftTineLine="false"/>
													<s:ComboBox id="cmbabnormalpointsleft"
																includeIn="MeasureAnormalPoints"
																chromeColor="#323232"
																selectedIndex="0">
														<s:dataProvider>
															<mx:ArrayList>
																<fx:String>0</fx:String>
																<fx:String>1</fx:String>
																<fx:String>2</fx:String>
																<fx:String>3</fx:String>
																<fx:String>4</fx:String>
																<fx:String>5</fx:String>
																<fx:String>6</fx:String>
																<fx:String>7</fx:String>
																<fx:String>8</fx:String>
																<fx:String>9</fx:String>
																<fx:String>10</fx:String>
																<fx:String>11</fx:String>
																<fx:String>12</fx:String>
																<fx:String>13</fx:String>
																<fx:String>14</fx:String>
																<fx:String>15</fx:String>
																<fx:String>16</fx:String>
																<fx:String>17</fx:String>
																<fx:String>18</fx:String>
																<fx:String>19</fx:String>
																<fx:String>20</fx:String>
															</mx:ArrayList>
														</s:dataProvider>
														
														
													</s:ComboBox>	
													<s:TextInput id="txtleftanormalpoints"
																 includeIn="MeasureLeftAnormalTine,RecordLefAbnormalTine,MeasureRigthAnormalTine,RecordRigthAbnormalTine,CompleteScoringfinal"/>
													<s:Label text="Number of Rigth Typical Points"
															 text.CompleteScoringfinal="Rigth Abnormal Points"
															 text.MeasureAnormalPoints="Number of Rigth Abnormal Points"
															 text.MeasureLeftAnormalTine="Rigth Abnormal Points"
															 text.MeasureLeftCircunference="Rigth Typical Points"
															 text.MeasureLeftMainBeam="Rigth Typical Points"
															 text.MeasureLeftTine="Rigth Typical Points"
															 text.MeasureRigthAnormalTine="Rigth Abnormal Points"
															 text.MeasureRigthCircumference="Rigth Typical Points"
															 text.MeasureRigthMainBeam="Rigth Typical Points"
															 text.MeasureRigthTine="Rigth Typical Points"
															 text.RecordLefAbnormalTine="Rigth Abnormal Points"
															 text.RecordLeftCircunference="Rigth Typical Points"
															 text.RecordLeftMainBeamLine="Rigth Typical Points"
															 text.RecordLeftTineLine="Rigth Typical Points"
															 text.RecordRigthAbnormalTine="Rigth Abnormal Points"
															 text.RecordRigthCircumference="Rigth Typical Points"
															 text.RecordRigthMainBeam="Rigth Typical Points"
															 text.RecordRigthTineLine="Rigth Typical Points"/>
													<s:ComboBox id="cmbrigthtypical"
																includeIn="NumberTypicalPoints"
																chromeColor="#323232"
																selectedIndex="0">
														<s:dataProvider>
															<mx:ArrayList>
																<fx:String>1</fx:String>
																<fx:String>2</fx:String>
																<fx:String>3</fx:String>
																<fx:String>4</fx:String>
																<fx:String>5</fx:String>
																<fx:String>6</fx:String>
																<fx:String>7</fx:String>
																<fx:String>8</fx:String>
																<fx:String>9</fx:String>
																<fx:String>10</fx:String>
															</mx:ArrayList>
														</s:dataProvider>
													</s:ComboBox>	
													<s:TextInput id="txtTypicalRigthPonitsRigthMain"
																 includeIn="MeasureLeftCircunference,MeasureLeftTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine"
																 editable.MeasureRigthMainBeam="false"/>
													<s:TextInput id="txttypicalrigth"
																 includeIn="MeasureLeftMainBeam"
																 editable="false"/>
													<s:TextInput includeIn="RecordLeftMainBeamLine" editable="false" id="txtRecordMainRigthPoints"/>
													<s:TextInput id="txtTypicalRigthRecordRigth"
																 includeIn="RecordRigthMainBeam"
																 editable="false"/>
													<s:TextInput id="txtTypicalRigthRecordLeftTine"
																 includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
																 editable.RecordLeftTineLine="false"/>
													<s:ComboBox id="cmbabnormalpointsrigth"
																includeIn="MeasureAnormalPoints"
																chromeColor="#323232"
																selectedIndex="0"> 
														<s:dataProvider>
															<mx:ArrayList>
																<fx:String>0</fx:String>
																<fx:String>1</fx:String>
																<fx:String>2</fx:String>
																<fx:String>3</fx:String>
																<fx:String>4</fx:String>
																<fx:String>5</fx:String>
																<fx:String>6</fx:String>
																<fx:String>7</fx:String>
																<fx:String>8</fx:String>
																<fx:String>9</fx:String>
																<fx:String>10</fx:String>
																<fx:String>11</fx:String>
																<fx:String>12</fx:String>
																<fx:String>13</fx:String>
																<fx:String>14</fx:String>
																<fx:String>15</fx:String>
																<fx:String>16</fx:String>
																<fx:String>17</fx:String>
																<fx:String>18</fx:String>
																<fx:String>19</fx:String>
																<fx:String>20</fx:String>
															</mx:ArrayList>
														</s:dataProvider>
													</s:ComboBox>	
													<s:TextInput id="txtrigthanormalpoints"
																 includeIn="MeasureLeftAnormalTine,RecordLefAbnormalTine,MeasureRigthAnormalTine,RecordRigthAbnormalTine,CompleteScoringfinal"/>
												</s:VGroup>
												<s:Button id="btnRecordLeftTine"
														  includeIn="MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
														  width="144" label="Measure Main Beams"
														  alpha="8"
														  click="button5_numberpoint(event)"
														  x.MeasureAnormalPoints="26"
														  y.MeasureAnormalPoints="103"
														  width.MeasureAnormalPoints="212"
														  label.MeasureAnormalPoints="Measure left Abnormal Tine"
														  chromeColor.MeasureAnormalPoints="#323232"
														  click.MeasureAnormalPoints="MeasureAnormalPoints_clickHandler(event)"
														  x.MeasureLeftAnormalTine="42"
														  y.MeasureLeftAnormalTine="114"
														  width.MeasureLeftAnormalTine="185"
														  label.MeasureLeftAnormalTine="Measure left Abnormal Tine 1"
														  chromeColor.MeasureLeftAnormalTine="#323232"
														  click.MeasureLeftAnormalTine="MeasureLeftAnormalTine_clickHandler(event)"
														  x.MeasureLeftCircunference="34"
														  y.MeasureLeftCircunference="103"
														  width.MeasureLeftCircunference="187"
														  label.MeasureLeftCircunference="Measure Letf Circumference 1"
														  chromeColor.MeasureLeftCircunference="#323232"
														  click.MeasureLeftCircunference="MeasureLeftCircunference_clickHandler(event)"
														  x.MeasureLeftMainBeam="59"
														  y.MeasureLeftMainBeam="107"
														  label.MeasureLeftMainBeam="Measure Letf Main Beam"
														  chromeColor.MeasureLeftMainBeam="#323232"
														  click.MeasureLeftMainBeam="LeftMainBeam_clickHandler(event)"
														  x.MeasureLeftTine="51"
														  y.MeasureLeftTine="103"
														  width.MeasureLeftTine="162"
														  label.MeasureLeftTine="Measure Left Tine 1 "
														  chromeColor.MeasureLeftTine="#323232"
														  click.MeasureLeftTine="MeasureLeftTine_clickHandler(event)"
														  x.MeasureRigthAnormalTine="42"
														  y.MeasureRigthAnormalTine="114"
														  width.MeasureRigthAnormalTine="180"
														  label.MeasureRigthAnormalTine="Measure Right Abnormal Tine"
														  chromeColor.MeasureRigthAnormalTine="#323232"
														  click.MeasureRigthAnormalTine="MeasureRigthAnormalTine_clickHandler(event)"
														  x.MeasureRigthCircumference="36"
														  y.MeasureRigthCircumference="103"
														  width.MeasureRigthCircumference="188"
														  label.MeasureRigthCircumference="Measure Rigth Circumference 1"
														  chromeColor.MeasureRigthCircumference="#323232"
														  click.MeasureRigthCircumference="MeasureRigthCircumference_clickHandler(event)"
														  x.MeasureRigthMainBeam="51"
														  y.MeasureRigthMainBeam="103"
														  width.MeasureRigthMainBeam="162"
														  label.MeasureRigthMainBeam="Measure Rigth Main Beam"
														  chromeColor.MeasureRigthMainBeam="#323232"
														  click.MeasureRigthMainBeam="MeasureRigthMainBeam_clickHandler(event)"
														  x.MeasureRigthTine="51"
														  y.MeasureRigthTine="103"
														  width.MeasureRigthTine="162"
														  label.MeasureRigthTine="Measure Rigth Tine 1 "
														  chromeColor.MeasureRigthTine="#323232"
														  click.MeasureRigthTine="MeasureRigthTine_clickHandler(event)"
														  x.NumberTypicalPoints="59"
														  y.NumberTypicalPoints="105"
														  chromeColor.NumberTypicalPoints="#323232"
														  click.NumberTypicalPoints="TypicalPoints_clickHandler(event)"
														  x.RecordLefAbnormalTine="42"
														  y.RecordLefAbnormalTine="114"
														  width.RecordLefAbnormalTine="185"
														  label.RecordLefAbnormalTine="Record left Abnormal Tine 1"
														  chromeColor.RecordLefAbnormalTine="#323232"
														  click.RecordLefAbnormalTine="RecordLefAbnormalTine_clickHandler(event)"
														  x.RecordLeftCircunference="47"
														  y.RecordLeftCircunference="97"
														  width.RecordLeftCircunference="173"
														  label.RecordLeftCircunference="Recorder Letf Circumference 1"
														  chromeColor.RecordLeftCircunference="#323232"
														  click.RecordLeftCircunference="RecordLeftCircunference_clickHandler(event)"
														  x.RecordLeftMainBeamLine="59"
														  y.RecordLeftMainBeamLine="103"
														  label.RecordLeftMainBeamLine="Record Left Main Beam"
														  chromeColor.RecordLeftMainBeamLine="#323232"
														  click.RecordLeftMainBeamLine="RecordLeftMainBeamLine_clickHandler(event)"
														  x.RecordLeftTineLine="59"
														  y.RecordLeftTineLine="97"
														  label.RecordLeftTineLine="Record Left Tine 1"
														  chromeColor.RecordLeftTineLine="#323232"
														  click.RecordLeftTineLine="RecordLeftTineLine_clickHandler(event)"
														  x.RecordRigthAbnormalTine="42"
														  y.RecordRigthAbnormalTine="114"
														  width.RecordRigthAbnormalTine="180"
														  label.RecordRigthAbnormalTine="Record Rigth Abnormal Tine"
														  chromeColor.RecordRigthAbnormalTine="#323232"
														  click.RecordRigthAbnormalTine="RecordRigthAbnormalTine_clickHandler(event)"
														  x.RecordRigthCircumference="42"
														  y.RecordRigthCircumference="97"
														  width.RecordRigthCircumference="180"
														  label.RecordRigthCircumference="Recorder Rigth Circumference 1 "
														  chromeColor.RecordRigthCircumference="#323232"
														  click.RecordRigthCircumference="RecordRigthCircumference_clickHandler(event)"
														  x.RecordRigthMainBeam="61"
														  y.RecordRigthMainBeam="101"
														  label.RecordRigthMainBeam="Record Right Main Beam"
														  chromeColor.RecordRigthMainBeam="#323232"
														  click.RecordRigthMainBeam="RecordRigthMainBeam_clickHandler(event)"
														  x.RecordRigthTineLine="59"
														  y.RecordRigthTineLine="97"
														  label.RecordRigthTineLine="Record Rigth Tine 1"
														  chromeColor.RecordRigthTineLine="#323232"
														  click.RecordRigthTineLine="RecordRigthTineLine_clickHandler(event)"/>
												<mx:HRule includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
														  width="267" height="5"
														  x.CompleteScoringfinal="0"
														  y.CompleteScoringfinal="105"
														  x.MeasureAnormalPoints="0"
														  y.MeasureAnormalPoints="142"
														  x.MeasureLeftAnormalTine="0"
														  y.MeasureLeftAnormalTine="150"
														  x.MeasureLeftCircunference="0"
														  y.MeasureLeftCircunference="142"
														  x.MeasureLeftMainBeam="0"
														  y.MeasureLeftMainBeam="132"
														  x.MeasureLeftTine="0"
														  y.MeasureLeftTine="142"
														  x.MeasureRigthAnormalTine="0"
														  y.MeasureRigthAnormalTine="150"
														  x.MeasureRigthCircumference="0"
														  y.MeasureRigthCircumference="142"
														  x.MeasureRigthMainBeam="0"
														  y.MeasureRigthMainBeam="142"
														  x.MeasureRigthTine="0"
														  y.MeasureRigthTine="142"
														  x.NumberTypicalPoints="0"
														  y.NumberTypicalPoints="132"
														  x.RecordLefAbnormalTine="0"
														  y.RecordLefAbnormalTine="163"
														  x.RecordLeftCircunference="0"
														  y.RecordLeftCircunference="191"
														  x.RecordLeftMainBeamLine="0"
														  y.RecordLeftMainBeamLine="150"
														  x.RecordLeftTineLine="0"
														  y.RecordLeftTineLine="168"
														  x.RecordRigthAbnormalTine="0"
														  y.RecordRigthAbnormalTine="163"
														  x.RecordRigthCircumference="0"
														  y.RecordRigthCircumference="191"
														  x.RecordRigthMainBeam="0"
														  y.RecordRigthMainBeam="150"
														  x.RecordRigthTineLine="0"
														  y.RecordRigthTineLine="168"/>
												<s:Button includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
														  x="34" y="144" width="187" height="30"
														  label="Complete Scoring" alpha="8"
														  click="ScoringDeer_btn(event)"
														  fontSize="18" fontStyle="normal"
														  fontWeight="normal"
														  x.CompleteScoringfinal="36"
														  y.CompleteScoringfinal="121"
														  chromeColor.CompleteScoringfinal="#323232"
														  x.MeasureAnormalPoints="36"
														  y.MeasureAnormalPoints="149"
														  chromeColor.MeasureAnormalPoints="#323232"
														  x.MeasureLeftAnormalTine="40"
														  y.MeasureLeftAnormalTine="166"
														  chromeColor.MeasureLeftAnormalTine="#323232"
														  x.MeasureLeftCircunference="34"
														  y.MeasureLeftCircunference="149"
														  chromeColor.MeasureLeftCircunference="#323232"
														  chromeColor.MeasureLeftMainBeam="#323232"
														  x.MeasureLeftTine="34"
														  y.MeasureLeftTine="149"
														  chromeColor.MeasureLeftTine="#323232"
														  x.MeasureRigthAnormalTine="40"
														  y.MeasureRigthAnormalTine="166"
														  chromeColor.MeasureRigthAnormalTine="#323232"
														  x.MeasureRigthCircumference="36"
														  y.MeasureRigthCircumference="149"
														  chromeColor.MeasureRigthCircumference="#323232"
														  x.MeasureRigthMainBeam="34"
														  y.MeasureRigthMainBeam="149"
														  chromeColor.MeasureRigthMainBeam="#323232"
														  x.MeasureRigthTine="34"
														  y.MeasureRigthTine="149"
														  chromeColor.MeasureRigthTine="#323232"
														  chromeColor.NumberTypicalPoints="#323232"
														  x.RecordLefAbnormalTine="40"
														  y.RecordLefAbnormalTine="176"
														  chromeColor.RecordLefAbnormalTine="#323232"
														  x.RecordLeftCircunference="39"
														  y.RecordLeftCircunference="198"
														  chromeColor.RecordLeftCircunference="#323232"
														  x.RecordLeftMainBeamLine="34"
														  y.RecordLeftMainBeamLine="157"
														  chromeColor.RecordLeftMainBeamLine="#323232"
														  x.RecordLeftTineLine="34"
														  y.RecordLeftTineLine="175"
														  chromeColor.RecordLeftTineLine="#323232"
														  x.RecordRigthAbnormalTine="40"
														  y.RecordRigthAbnormalTine="176"
														  chromeColor.RecordRigthAbnormalTine="#323232"
														  x.RecordRigthCircumference="40"
														  y.RecordRigthCircumference="198"
														  chromeColor.RecordRigthCircumference="#323232"
														  x.RecordRigthMainBeam="34"
														  y.RecordRigthMainBeam="161"
														  chromeColor.RecordRigthMainBeam="#323232"
														  x.RecordRigthTineLine="34"
														  y.RecordRigthTineLine="175"
														  chromeColor.RecordRigthTineLine="#323232"/>
												<mx:HRule includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
														  width="267" height="5"
														  x.CompleteScoringfinal="0"
														  y.CompleteScoringfinal="165"
														  x.MeasureAnormalPoints="0"
														  y.MeasureAnormalPoints="182"
														  x.MeasureLeftAnormalTine="0"
														  y.MeasureLeftAnormalTine="207"
														  x.MeasureLeftCircunference="0"
														  y.MeasureLeftCircunference="182"
														  x.MeasureLeftMainBeam="0"
														  y.MeasureLeftMainBeam="182"
														  x.MeasureLeftTine="0"
														  y.MeasureLeftTine="182"
														  x.MeasureRigthAnormalTine="0"
														  y.MeasureRigthAnormalTine="207"
														  x.MeasureRigthCircumference="0"
														  y.MeasureRigthCircumference="182"
														  x.MeasureRigthMainBeam="0"
														  y.MeasureRigthMainBeam="182"
														  x.MeasureRigthTine="0"
														  y.MeasureRigthTine="182"
														  x.NumberTypicalPoints="0"
														  y.NumberTypicalPoints="182"
														  x.RecordLefAbnormalTine="0"
														  y.RecordLefAbnormalTine="212"
														  x.RecordLeftCircunference="0"
														  y.RecordLeftCircunference="230"
														  x.RecordLeftMainBeamLine="0"
														  y.RecordLeftMainBeamLine="190"
														  x.RecordLeftTineLine="0"
														  y.RecordLeftTineLine="208"
														  x.RecordRigthAbnormalTine="0"
														  y.RecordRigthAbnormalTine="212"
														  x.RecordRigthCircumference="0"
														  y.RecordRigthCircumference="230"
														  x.RecordRigthMainBeam="0"
														  y.RecordRigthMainBeam="197"
														  x.RecordRigthTineLine="0"
														  y.RecordRigthTineLine="208"/>
												<s:VGroup includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftCircunference,MeasureLeftTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints"
														  x="36" y="194" width="200" height="115"
														  x.CompleteScoringfinal="36"
														  y.CompleteScoringfinal="181">
													<s:Label text="Last Measurement&#xd;"/>
													<s:Label id="lbllasmeasurement"
															 text.MeasureRigthMainBeam="Rigth Main Beam ="
															 text.NumberTypicalPoints="Inside Spread="/>
													<s:Button width="188" height="29"
															  label="View ScoreSheet" alpha="8"
															  fontSize="18"
															  chromeColor.CompleteScoringfinal="#323232"
															  chromeColor.MeasureAnormalPoints="#323232"
															  chromeColor.MeasureLeftCircunference="#323232"
															  chromeColor.MeasureLeftTine="#323232"
															  chromeColor.MeasureRigthCircumference="#323232"
															  chromeColor.MeasureRigthMainBeam="#323232"
															  chromeColor.MeasureRigthTine="#323232"
															  chromeColor.NumberTypicalPoints="#323232"
															  click="ViewScoreNoFinish_clickHandler(event)"/>
													<s:Button width="186" height="29"
															  label="View Instructions" alpha="8"
															  fontSize="18"
															  chromeColor.CompleteScoringfinal="#323232"
															  chromeColor.MeasureAnormalPoints="#323232"
															  chromeColor.MeasureLeftCircunference="#323232"
															  chromeColor.MeasureLeftTine="#323232"
															  chromeColor.MeasureRigthCircumference="#323232"
															  chromeColor.MeasureRigthMainBeam="#323232"
															  chromeColor.MeasureRigthTine="#323232"
															  chromeColor.NumberTypicalPoints="#323232"
															  click="ViewInstructions_clickHandler(event)"/>
												</s:VGroup>
												<s:Image id="imagezoomscoring"
														 includeIn="MeasureLeftAnormalTine,MeasureLeftMainBeam,MeasureRigthAnormalTine,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
														 x="34" y="195" width="187" height="113"
														 rollOut="doZoomProduct(event)"
														 rollOver="doZoomProduct(event)" scaleX="1"
														 scaleY="1" 
														 source="Image/MAINBM_0.jpg"
														 click="launchPopUp(event)"
														 x.MeasureLeftAnormalTine="37"
														 y.MeasureLeftAnormalTine="217"
														 source.MeasureLeftAnormalTine="Image/ABNTIN_0.jpg"
														 x.MeasureLeftMainBeam="39"
														 y.MeasureLeftMainBeam="203"
														 x.MeasureRigthAnormalTine="37"
														 y.MeasureRigthAnormalTine="217"
														 source.MeasureRigthAnormalTine="Image/ABNTIN_0.jpg"
														 x.RecordLefAbnormalTine="37"
														 y.RecordLefAbnormalTine="223"
														 source.RecordLefAbnormalTine="Image/ABNTIN_0.jpg"
														 x.RecordLeftCircunference="41"
														 y.RecordLeftCircunference="242"
														 source.RecordLeftCircunference="Image/CRCFRN_0.jpg"
														 x.RecordLeftMainBeamLine="37"
														 y.RecordLeftMainBeamLine="209"
														 x.RecordLeftTineLine="40"
														 y.RecordLeftTineLine="220"
														 source.RecordLeftTineLine="Image/TYPTIN_0.jpg"
														 x.RecordRigthAbnormalTine="37"
														 y.RecordRigthAbnormalTine="223"
														 source.RecordRigthAbnormalTine="Image/ABNTIN_0.jpg"
														 x.RecordRigthCircumference="37"
														 y.RecordRigthCircumference="239"
														 source.RecordRigthCircumference="Image/CRCFRN_0.jpg"
														 x.RecordRigthMainBeam="45"
														 y.RecordRigthMainBeam="217"
														 x.RecordRigthTineLine="37"
														 y.RecordRigthTineLine="217"
														 source.RecordRigthTineLine="Image/TYPTIN_0.jpg"/>
												<mx:HRule includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftCircunference,MeasureLeftTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints" x="0"
														  y="96" width="268" height="6"/>
												<mx:HRule includeIn="RecordLeftMainBeamLine" x="0"
														  y="97" width="268"/>
												<s:Button includeIn="RecordLeftMainBeamLine" x="59"
														  y="127" width="144" label="Erase Lines"
														  alpha="8" chromeColor="#323232"
														  click="manageCropper.erase();"/>
												<mx:HRule includeIn="RecordRigthMainBeam" x="0"
														  y="96" width="267" height="2"/>
												<s:Button includeIn="RecordRigthMainBeam" x="61"
														  y="127" width="144" label="Erase Lines"
														  alpha="8" chromeColor="#323232"
														  click="manageCropper.erase();"/>
												<mx:HRule includeIn="MeasureLeftAnormalTine,MeasureRigthAnormalTine,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthTineLine"
														  x="0" y="91" width="267"
														  x.MeasureLeftAnormalTine="0"
														  y.MeasureLeftAnormalTine="100"
														  x.MeasureRigthAnormalTine="0"
														  y.MeasureRigthAnormalTine="100"
														  x.RecordLefAbnormalTine="0"
														  y.RecordLefAbnormalTine="100"
														  x.RecordRigthAbnormalTine="0"
														  y.RecordRigthAbnormalTine="100"/>
												<s:ToggleButton includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
																x="59" y="122" width="144"
																label="Use Mirror Value" alpha="8"
																x.RecordLeftCircunference="47"
																y.RecordLeftCircunference="121"
																width.RecordLeftCircunference="173"
																click.RecordLeftCircunference="RecordLeftCircunferenceMirror_clickHandler(event)"
																chromeColor.RecordLeftCircunference="#323232"
																chromeColor.RecordLeftTineLine="#323232"
																click.RecordLeftTineLine="RecordLeftTineLineMirror_clickHandler(event)"
																x.RecordRigthCircumference="42"
																y.RecordRigthCircumference="121"
																width.RecordRigthCircumference="180"
																chromeColor.RecordRigthCircumference="#323232"
																click.RecordRigthCircumference="RecordRigthCircumferenceMirror_clickHandler(event)"
																chromeColor.RecordRigthTineLine="#323232"
																click.RecordRigthTineLine="RecordRigthTineLineMirror_clickHandler(event)"/>
												<s:ToggleButton includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
																x="59" y="146" width="144"
																label="Erase Lines" alpha="8"
																x.RecordLeftCircunference="47"
																y.RecordLeftCircunference="145"
																width.RecordLeftCircunference="173"
																chromeColor.RecordLeftCircunference="#323232"
																chromeColor.RecordLeftTineLine="#323232"
																x.RecordRigthCircumference="42"
																y.RecordRigthCircumference="145"
																width.RecordRigthCircumference="180"
																chromeColor.RecordRigthCircumference="#323232"
																chromeColor.RecordRigthTineLine="#323232"
																click="manageCropper.erase();"/>
												<s:ToggleButton includeIn="RecordLeftCircunference,RecordRigthCircumference"
																x="46" y="168" width="174"
																label="Help" alpha="8"
																chromeColor.RecordLeftCircunference="#323232"
																x.RecordRigthCircumference="41"
																y.RecordRigthCircumference="168"
																width.RecordRigthCircumference="181"
																chromeColor.RecordRigthCircumference="#323232"
																click="helpcircumference_clickHandler(event)"/>
												<s:ToggleButton includeIn="RecordLefAbnormalTine,RecordRigthAbnormalTine"
																x="42" y="139" width="180"
																label="Erase Lines" alpha="8"
																x.RecordLefAbnormalTine="40"
																width.RecordLefAbnormalTine="187"
																chromeColor.RecordLefAbnormalTine="#323232"
																chromeColor.RecordRigthAbnormalTine="#323232"
																click="manageCropper.erase();"/>
											</s:Group>
											<s:Image id="imagebusckscorezoom"
													 includeIn="MeasureInsideSpread,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecorderInsideSpread"
													 width="196" height="117"
													 click="launchPopUp2(event)"
													 rollOut="doZoomProduct(event)"
													 rollOver="doZoomProduct(event)" scaleX="1"
													 scaleY="1"
													 x.MeasureInsideSpread="58"
													 y.MeasureInsideSpread="215"
													 source.MeasureInsideSpread="Image/INSSPR_0.jpg"
													 x.RecordEarWidth="51" y.RecordEarWidth="232"
													 source.RecordEarWidth="Image/REFFTR_001.png"
													 x.RecorderInsideSpread="63"
													 y.RecorderInsideSpread="246"
													 source.RecorderInsideSpread="Image/INSSPR_0.jpg"
													 x.RecordEyeballWidthFeature="57"
													 y.RecordEyeballWidthFeature="247"
													 source.RecordEyeballWidthFeature="Image/REFFTR_005.png"
													 x.RecordEyetoEyeWidth="58"
													 y.RecordEyetoEyeWidth="247"
													 source.RecordEyetoEyeWidth="Image/REFFTR_002.png"/>
											<mx:HRule includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,editAlbum,positionphoto,referenceFeature,scorephoto"
													  x="21" y="43" width="200"
													  x.CompleteScoringfinal="18"
													  y.CompleteScoringfinal="26"
													  width.CompleteScoringfinal="269"
													  height.CompleteScoringfinal="9"
													  x.MeasureAnormalPoints="18"
													  y.MeasureAnormalPoints="26"
													  width.MeasureAnormalPoints="269"
													  height.MeasureAnormalPoints="9"
													  x.MeasureInsideSpread="20"
													  y.MeasureInsideSpread="33"
													  width.MeasureInsideSpread="267"
													  height.MeasureInsideSpread="5"
													  x.MeasureLeftAnormalTine="20"
													  y.MeasureLeftAnormalTine="26"
													  width.MeasureLeftAnormalTine="267"
													  height.MeasureLeftAnormalTine="5"
													  x.MeasureLeftCircunference="18"
													  y.MeasureLeftCircunference="26"
													  width.MeasureLeftCircunference="269"
													  height.MeasureLeftCircunference="9"
													  x.MeasureLeftMainBeam="20"
													  y.MeasureLeftMainBeam="33"
													  width.MeasureLeftMainBeam="267"
													  height.MeasureLeftMainBeam="5"
													  x.MeasureLeftTine="18" y.MeasureLeftTine="26"
													  width.MeasureLeftTine="269"
													  height.MeasureLeftTine="9"
													  x.MeasureRigthAnormalTine="20"
													  y.MeasureRigthAnormalTine="26"
													  width.MeasureRigthAnormalTine="267"
													  height.MeasureRigthAnormalTine="5"
													  x.MeasureRigthCircumference="18"
													  y.MeasureRigthCircumference="26"
													  width.MeasureRigthCircumference="269"
													  height.MeasureRigthCircumference="9"
													  x.MeasureRigthMainBeam="18"
													  y.MeasureRigthMainBeam="26"
													  width.MeasureRigthMainBeam="269"
													  height.MeasureRigthMainBeam="9"
													  x.MeasureRigthTine="18"
													  y.MeasureRigthTine="26"
													  width.MeasureRigthTine="269"
													  height.MeasureRigthTine="9"
													  x.NumberTypicalPoints="18"
													  y.NumberTypicalPoints="26"
													  width.NumberTypicalPoints="269"
													  height.NumberTypicalPoints="9"
													  x.positionphoto="20" y.positionphoto="33"
													  width.positionphoto="267"
													  height.positionphoto="5"
													  x.RecordEarWidth="20" y.RecordEarWidth="33"
													  width.RecordEarWidth="267"
													  height.RecordEarWidth="5"
													  x.RecorderInsideSpread="20"
													  y.RecorderInsideSpread="33"
													  width.RecorderInsideSpread="267"
													  height.RecorderInsideSpread="5"
													  x.RecorderInsideSpreadEstimate="20"
													  y.RecorderInsideSpreadEstimate="33"
													  width.RecorderInsideSpreadEstimate="267"
													  height.RecorderInsideSpreadEstimate="5"
													  x.RecordEyeballWidthFeature="20"
													  y.RecordEyeballWidthFeature="33"
													  width.RecordEyeballWidthFeature="267"
													  height.RecordEyeballWidthFeature="5"
													  x.RecordEyetoEyeWidth="20"
													  y.RecordEyetoEyeWidth="33"
													  width.RecordEyetoEyeWidth="267"
													  height.RecordEyetoEyeWidth="5"
													  x.RecordLefAbnormalTine="20"
													  y.RecordLefAbnormalTine="26"
													  width.RecordLefAbnormalTine="267"
													  height.RecordLefAbnormalTine="5"
													  x.RecordLeftCircunference="20"
													  y.RecordLeftCircunference="26"
													  width.RecordLeftCircunference="267"
													  height.RecordLeftCircunference="5"
													  x.RecordLeftMainBeamLine="20"
													  y.RecordLeftMainBeamLine="33"
													  width.RecordLeftMainBeamLine="267"
													  height.RecordLeftMainBeamLine="5"
													  x.RecordLeftTineLine="20"
													  y.RecordLeftTineLine="33"
													  width.RecordLeftTineLine="267"
													  height.RecordLeftTineLine="5"
													  x.RecordRigthAbnormalTine="20"
													  y.RecordRigthAbnormalTine="26"
													  width.RecordRigthAbnormalTine="267"
													  height.RecordRigthAbnormalTine="5"
													  x.RecordRigthCircumference="20"
													  y.RecordRigthCircumference="26"
													  width.RecordRigthCircumference="267"
													  height.RecordRigthCircumference="5"
													  x.RecordRigthMainBeam="20"
													  y.RecordRigthMainBeam="33"
													  width.RecordRigthMainBeam="267"
													  height.RecordRigthMainBeam="5"
													  x.RecordRigthTineLine="20"
													  y.RecordRigthTineLine="33"
													  width.RecordRigthTineLine="267"
													  height.RecordRigthTineLine="5"
													  x.referenceFeature="20"
													  y.referenceFeature="33"
													  width.referenceFeature="267"
													  height.referenceFeature="5"/>
										</s:SkinnableContainer>
									</s:HGroup>
									<s:SkinnableContainer includeIn="ExpandDeerName,stateMain"
														  width="307" height="105"
														  height.ExpandDeerName="200"
														  fontStyle.stateMain="normal">
										<s:Button id="btndeerinfo" includeIn="stateMain" x="46" y="3"
												  label="Deer Info" alpha="4"
												  click="btnupdatedeername_clickHandler(event)"
												  color="#FEFEFE" enabled="false"/>
										<s:Button includeIn="stateMain" id="btndeerscoresheet" x="187" y="3"
												  label="Score Sheet" alpha="4"
												  click="btn_scoringreview(event)" color="#FCF9F9" enabled="false"/>
										<s:Button id="btnScoreProccess" includeIn="stateMain" x="86"
												  y="31" width="126" height="28" label="SCORE"
												  alpha="4" click="button2_callscore(event)"
												  color="#FEFDFD" enabled="false"/>
										<s:ComboBox id="combophoto" includeIn="stateMain" x="7"
													y="76" alpha="4"
													change="if(combophoto.selectedItem=='Album')currentState='editAlbum'; if(combophoto.selectedItem=='Photo'){currentState='editphoto';  imgupload.source='';};   "
													cornerRadius="5"
													doubleClick="currentState='editphoto'; imgupload.source=''; "
													labelField="Add Photo" selectedIndex="0">
											<s:dataProvider>
												<mx:ArrayList>
													<fx:String>Add new item</fx:String>
													<fx:String>Album</fx:String>
													<fx:String>Photo</fx:String>
													<fx:String>Map</fx:String>
												</mx:ArrayList>
											</s:dataProvider>	 
											
										</s:ComboBox>
										<s:Label includeIn="stateMain" x="7" y="66"
												 text="Create Item"/>
										<s:Label includeIn="ExpandDeerName" x="10" y="10"
												 color="#FEFCFC" text="Score Distributions"/>
										<s:Group includeIn="ExpandDeerName" x="10" y="29" width="230"
												 height="161">
											<mx:ColumnChart id="scoreChart" x="6" y="4" width="218"
															height="147" chromeColor="#FBFAFA"
															color="#FEFEFE" showDataTips="true"
															>
												
												<mx:horizontalAxis>
													<mx:CategoryAxis categoryField="score"/>
												</mx:horizontalAxis>
												<mx:series>
													<mx:ColumnSeries displayName="Score" yField="Score" xField="score"/>
												</mx:series>
											</mx:ColumnChart>
											<mx:Legend x="235" y="5" width="58" height="113"
													   color="#FEFDFD" dataProvider="{scoreChart}"
													   fontWeight="bold"/>
										</s:Group>
									</s:SkinnableContainer>
									<s:SkinnableContainer includeIn="ExpandDeerName,stateMain"
														  width="304" height="175"
														  height.ExpandDeerName="100%">
										<s:Label includeIn="stateMain" x="10" y="10" color="#F9F9F9"
												 text="Choose Deer To Star Scoring (number)"/>
										<s:Button includeIn="stateMain" x="235" y="4" label="Expand"
												  
												  click="stateMain_clickHandler(event)"/>
										<s:TextInput id="txtfilterdatagrid" includeIn="stateMain"
													 x="45" y="29" width="184"
													 change="filter()" 
													 focusIn="clearMyTextInput()" />
										<s:Label includeIn="stateMain" x="10" y="37" color="#FCFAFA"
												 text="Filter"/>
										<s:DataGrid id="datagridalbumname" includeIn="stateMain"
													x="10" y="56" width="290" height="102"
													dataProvider="{array}"
													selectionChange="datagrid1_selectionChangeHandler(event)">
											<s:columns>
												<s:ArrayList>
													<s:GridColumn width="120" dataField="name"
																  headerText="Name"></s:GridColumn>
													<s:GridColumn dataField="type"
																  headerText="Type"></s:GridColumn>
												</s:ArrayList>
											</s:columns>
											
										</s:DataGrid>
										<s:BorderContainer includeIn="ExpandDeerName" x="10" y="4"
														   width="284" height="100%"
														   backgroundColor="#A3AEB0">
											<s:Label x="24" y="3" color="#040404" text="0-100"/>
											<s:Label x="118" y="3" color="#030303" text="100-200"/>
											<s:Label x="220" y="2" color="#070707" text="200 +"/>
											<s:List id="listscoremedium" x="102" y="16" width="80" labelField="deername" change="listscoremedium_changeHandler(event)">
											</s:List>
											<s:List id="listscoremin" x="10" y="16" width="79" labelField="deername"
													change="listscoremin_changeHandler(event)">
											</s:List>
											<s:List id="listscoremax" x="193" y="16" width="82" labelField="deername" change="listscoremax_changeHandler(event)">
											</s:List>
										</s:BorderContainer>
									</s:SkinnableContainer>
									
									
									
									<s:SkinnableContainer id="skinablesocreprinting"
														  includeIn="ScoringFinalBuck,ScoringFinalBuckView" width="100%"
														  height="100%">
										<s:VGroup  width="100%" height="100%" id="printingtotalscore">
											
											<s:Scroller y="81" width="100%" height="100%">
												<s:VGroup width="100%" height="100%">
													<s:SkinnableContainer id="printingbody"
																		  width="100%" height="900">
														<s:HGroup width="100%" height="95" accentColor="#3F8AF0">
															<s:SkinnableContainer id="printinghead" width="698"
																				  backgroundColor="#FEFAFA">
																<s:HGroup>
																	
																	
																	<s:VGroup width="130" height="92">
																		<s:Image id="imageforedition0"
																				 width="128" height="89"
																				 source="c:/tmp/22_L.png"/>
																	</s:VGroup>
																	<s:VGroup width="100%" height="93">
																		<s:Group width="100%" height="90">
																			<s:HGroup x="10" y="6" width="482"
																					  height="15">
																				<s:Label color="#323232"
																						 text="Deer NickName"/>
																				<s:Label id="txtDeerNickName"
																						 color="#323232"
																						 text="Name"/>
																			</s:HGroup>
																			<s:HGroup x="10" y="28" width="482"
																					  height="13">
																				<s:Label color="#323232"
																						 text="Location"/>
																				<s:Label id="txtLocationDeer"
																						 color="#323232"
																						 text="0006"/>
																			</s:HGroup>
																			<s:HGroup x="10" y="67" width="482"
																					  height="13">
																				<s:Label color="#323232"
																						 text="Comments"/>
																				<s:TextInput id="txtcommentsdeer"
																							 width="342"/>
																			</s:HGroup>
																			<s:HGroup x="11" y="49" width="482"
																					  height="13"
																					  color="#323232">
																				<s:Label text="Date"/>
																				<s:Label id="txtdatedeer"
																						 text="10/3/2012 11:10:58 AM"/>
																			</s:HGroup>
																		</s:Group>
																	</s:VGroup>
																</s:HGroup>
															</s:SkinnableContainer>	
														</s:HGroup>
														<s:Image x="10" y="4" width="207"
																 height="203"
																 source="Image/logo.png"
																 x.ScoringFinalBuck="31"
																 y.ScoringFinalBuck="103"
																 width.ScoringFinalBuck="186"
																 x.ScoringFinalBuckView="10"
																 y.ScoringFinalBuckView="106"/>
														
														
														<mx:Grid id="myGrid" x="251" y="3"
																 width="100%" height="261"
																 borderAlpha="5" color="#323232"
																 x.ScoringFinalBuck="251"
																 y.ScoringFinalBuck="102"
																 width.ScoringFinalBuck="100%"
																 x.ScoringFinalBuckView="251"
																 y.ScoringFinalBuckView="97">
															
															<!-- Define Row 0. -->
															<mx:GridRow id="row0" width="100%"
																		borderColor="#0B0A0A"
																		borderStyle="solid">
																<!-- Define the first cell of Row 1. -->
																<mx:GridItem width="100%" colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	
																	
																	<s:Label paddingTop="3"
																			 text="ABNORMAL POINTS"
																			 verticalAlign="middle"/>	
																</mx:GridItem>
															</mx:GridRow>
															
															<!-- Define Row 1. -->
															<mx:GridRow id="row1" width="100%">
																<!-- Define the first cell of Row 1. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="2"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="LEFT"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<!-- Define the second cell of Row 1. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="2"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="RIGTH"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<!-- Define the third cell of Row 1. -->
																
															</mx:GridRow>
															
															<!-- Define Row 2. -->
															<mx:GridRow id="row2" width="100%">
																<!-- Define a single cell to span three columns of Row 2. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a1" paddingTop="3"
																			 text="1"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="a11" paddingTop="3"
																			 text="11"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar1" paddingTop="3"
																			 text="1"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar11" paddingTop="3"
																			 text="11"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															<!-- Define Row 3. -->
															<mx:GridRow id="row3" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a2" paddingTop="3"
																			 text="2"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a12" paddingTop="3"
																			 text="12"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar2" paddingTop="3"
																			 text="2"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar12" paddingTop="3"
																			 text="12"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row4" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a3" paddingTop="3"
																			 text="3"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a13" paddingTop="3"
																			 text="13"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar3" paddingTop="3"
																			 text="3"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar13" paddingTop="3"
																			 text="13"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row5" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a4" paddingTop="3"
																			 text="4"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a14" paddingTop="3"
																			 text="14"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar4" paddingTop="3"
																			 text="4"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar14" paddingTop="3"
																			 text="14"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row6" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a5" paddingTop="3"
																			 text="5"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a15" paddingTop="3"
																			 text="15"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar5" paddingTop="3"
																			 text="5"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar15" paddingTop="3"
																			 text="15"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row7" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a6" paddingTop="3"
																			 text="6"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a16" paddingTop="3"
																			 text="16"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar6" paddingTop="3"
																			 text="6"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar16" paddingTop="3"
																			 text="16"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row8" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a7" paddingTop="3"
																			 text="7"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a17" paddingTop="3"
																			 text="17"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar7" paddingTop="3"
																			 text="7"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar17" paddingTop="3"
																			 text="17"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row9" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="a8" paddingTop="3"
																			 text="8"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a18" paddingTop="3"
																			 text="18"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar8" paddingTop="3"
																			 text="8"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar18" paddingTop="3"
																			 text="18"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row10" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="a9" paddingTop="3"
																			 text="9"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a19" paddingTop="3"
																			 text="19"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar9" paddingTop="3"
																			 text="9"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar19" paddingTop="3"
																			 text="19"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="row11" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="a10" paddingTop="3"
																			 text="10"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="a20" paddingTop="3"
																			 text="20"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar10" paddingTop="3"
																			 text="10"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="ar20" paddingTop="3"
																			 text="20"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
														</mx:Grid>
														
														
														
														
														
														
														
														
														<mx:Grid id="myGridResult" x="7" y="250"
																 width="100%" height="100%"
																 borderAlpha="5" color="#323232"
																 x.ScoringFinalBuck="7"
																 y.ScoringFinalBuck="370"
																 x.ScoringFinalBuckView="7"
																 y.ScoringFinalBuckView="362">
															<mx:GridRow id="Rrow0" width="100%">
																<!-- Define the first cell of Row 1. -->
																<mx:GridItem  width="100%" horizontalAlign="center" verticalAlign="bottom" borderColor="#0B0A0A" borderStyle="solid">
																	
																	
																	<s:Label paddingTop="3"
																			 text="NO. POINTS LEFT"
																			 verticalAlign="middle"/>	
																</mx:GridItem>
																<mx:GridItem  width="100%" horizontalAlign="center" verticalAlign="bottom" borderColor="#0B0A0A" borderStyle="solid">
																	
																	
																	<s:Label id="numberleftponitsgrid" paddingTop="3" text="3"
																			 verticalAlign="middle"/>	
																</mx:GridItem>
																<mx:GridItem  width="100%" horizontalAlign="center" verticalAlign="bottom" borderColor="#0B0A0A" borderStyle="solid">
																	
																	
																	<s:Label paddingTop="3"
																			 text="NO. POINTS RIGHT"
																			 verticalAlign="middle"/>	
																</mx:GridItem>
																<mx:GridItem  width="100%" horizontalAlign="center" verticalAlign="bottom" borderColor="#0B0A0A" borderStyle="solid">
																	
																	
																	<s:Label id="numberrigthponitsgrid" paddingTop="3" text="5"
																			 verticalAlign="middle"/>	
																</mx:GridItem>
																<mx:GridItem width="100%" colSpan="3"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	
																	
																	<s:Label paddingTop="3" text=""
																			 verticalAlign="middle"/>	
																</mx:GridItem>
																
															</mx:GridRow>
															
															<!-- Define Row 1. -->
															<mx:GridRow id="Rrow1" width="100%">
																<!-- Define the first cell of Row 1. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="ANTLER CHARACTERISTICS"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<!-- Define the second cell of Row 1. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="1"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3" text="LEFT"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<!-- Define the third cell of Row 1. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="1"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3" text="RIGTH"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="1"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="DIFFERENCE"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																
															</mx:GridRow>
															
															<!-- Define Row 2. -->
															<mx:GridRow id="Rrow2" width="100%">
																<!-- Define a single cell to span three columns of Row 2. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="3"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="INSIDE SPREAD"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="1"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label id="insidespread"
																				paddingTop="3"
																			 text="13.8192"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="3"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3" text=""
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															<!-- Define Row 3. -->
															<mx:GridRow id="Rrow3" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="MAIN BEAM LENGTH"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="mainbeamleftgrid"
																				paddingTop="3"
																			 text="18.1636"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label  id="mainbeamrigthgrid"  paddingTop="3"
																			 text="25.0055"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label   id="mainbeamdiferene"  paddingTop="3" text="6.84"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow4" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 1"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t1l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t1r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t1d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow5" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 2"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t2l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t2r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t2d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow6" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 3"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t3l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t3r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t3d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow7" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 4"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t4l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t4r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t4d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow8" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 5"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t5l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t5r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t5d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow9" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 6"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t6l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t6r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t6d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow10" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 7"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t7l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t7r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t7d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow11" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 8"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t8l" paddingTop="3" text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t8r" paddingTop="3" text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t8d" paddingTop="3" text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															<mx:GridRow id="Rrow12" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 9"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t9l" paddingTop="3"
																			 text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t9r" paddingTop="3"
																			 text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t9d" paddingTop="3"
																			 text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow13" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TYPICAL POINT 10"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="t10l" paddingTop="3"
																			 text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t10r" paddingTop="3"
																			 text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="t10d" paddingTop="3"
																			 text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow14" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="CIRCUMFERENCE 1"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="c1l" paddingTop="3"
																			 text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c1r" paddingTop="3"
																			 text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c1d" paddingTop="3"
																			 text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															<mx:GridRow id="Rrow15" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="CIRCUMFERENCE 2"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="c2l" paddingTop="3"
																			 text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c2r" paddingTop="3"
																			 text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c2d" paddingTop="3"
																			 text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow16" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="CIRCUMFERENCE 3"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="c3l" paddingTop="3"
																			 text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c3r" paddingTop="3"
																			 text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c3d" paddingTop="3"
																			 text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															<mx:GridRow id="Rrow17" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="CIRCUMFERENCE 4"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="c4l" paddingTop="3"
																			 text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c4r" paddingTop="3"
																			 text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="c4d" paddingTop="3"
																			 text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															<mx:GridRow id="Rrow18" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="center"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TOTALS"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">	
																	<s:Label id="tleft" paddingTop="3"
																			 text="5.6967"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="trigth" paddingTop="3"
																			 text="6.4259"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"  horizontalAlign="center" verticalAlign="bottom"  borderColor="#0B0A0A" borderStyle="solid">
																	<s:Label id="tdiference" paddingTop="3"
																			 text="0.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															
															<mx:GridRow id="Rrow19" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="BUCKSCORE RESULTS"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="3"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">	
																	<s:Label paddingTop="3" text=""
																			 verticalAlign="middle"/>
																</mx:GridItem>
																
															</mx:GridRow>
															
															<mx:GridRow id="Rrow20" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="GROSS SCORE"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="3"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">	
																	<s:Label id="grossscore" paddingTop="3"
																			 text="156.73"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															<mx:GridRow id="Rrow21" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3"
																			 text="TOTAL DIFFERENCES"
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="3"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">	
																	<s:Label id="totaldiferencefinal" paddingTop="3"
																			 text="31.91"
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															<mx:GridRow id="Rrow22" width="100%">
																<!-- Define an empty first cell of Row 3. -->
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="4"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">
																	<s:Label paddingTop="3" text=""
																			 verticalAlign="middle"/>
																</mx:GridItem>
																<mx:GridItem width="100%"
																			 borderColor="#0B0A0A"
																			 borderStyle="solid"
																			 colSpan="3"
																			 horizontalAlign="left"
																			 verticalAlign="bottom">	
																	<s:Label paddingTop="3" text=""
																			 verticalAlign="middle"/>
																</mx:GridItem>
															</mx:GridRow>
															
															
															
														</mx:Grid>
														
														
														
														
														
														
													</s:SkinnableContainer>
												</s:VGroup>
											</s:Scroller>
										</s:VGroup>
									</s:SkinnableContainer>
									
								</s:VGroup>
								
								<s:Group includeIn="referenceFeature" x="20" y="357" width="267"
										 height="55">
									<s:Button x="81" y="10" width="100" height="31" label="Start"
											  chromeColor="#323232" color="#FCFCFC" cornerRadius="5"
											  click="selectiontypefeature_clickHandler(event)"/>
								</s:Group>
								<s:VGroup includeIn="ScoringFinalBuck,ScoringFinalBuckView" x="705" y="0" width="6"
										  height="100%">
								</s:VGroup>
								
							</s:SkinnableContainer>
							
						</s:VGroup>
					</mx:HDividedBox>
				</s:VGroup>
				
			</s:SkinnableContainer>
			<s:HGroup id="borderBottom" width="100%" height="15"/>
		</s:VGroup>
		<s:VGroup id="borderRight" width="15" height="100%"/>
	</s:HGroup>
	<s:HGroup includeIn="editAlbum">
	</s:HGroup>
</s:WindowedApplication>