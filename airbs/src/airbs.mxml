<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:bs="library://ns.adobe.com/flex/mx"
					   xmlns:net="flash.net.*"
					   xmlns:imagecropper="com.flexblocks.imagecropper.*"
					   xmlns:utils="utils.*"
					   xmlns:ns1="*"
					   xmlns:ps="com.complexless.panels.*"
					   width="750" height="550" backgroundAlpha="0" creationComplete="initApp()"
					   currentState="PanelScoreState" showStatusBar="false" styleName="main" xmlns:dialogs="com.complexless.dialogs.*">
	<fx:Style source="assets/css/airbs.css"/>
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import com.complexless.dialogs.ComponentsSerials;
			
			import flash.filters.DropShadowFilter;
			import flash.sampler.NewObjectSample;
			
			import flashx.textLayout.formats.Float;
			import flashx.textLayout.tlf_internal;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Decoder;
			import mx.utils.Base64Encoder;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import com.complexless.utils.SQLbuckscore;
			import com.complexless.utils.ScoreUtils;
			private var gVersion:String;
			private var shadowFilter:DropShadowFilter;
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			private var prefsXML:XML;
			public var sqlscore:SQLbuckscore = new SQLbuckscore();

			private function initApp():void {
				trace("Iniciando aplicacion...");
				if (sqlscore.isExist()) {
					// ceqs-revisar
					sqlscore.create();
				}
				else
					sqlscore.create();
				/*
				if(NativeWindow.supportsTransparency) {
				shadowFilter = new DropShadowFilter();
				shadowFilter.color = 0x000000;
				shadowFilter.alpha = 0.4;
				shadowFilter.blurX = 5;
				shadowFilter.blurY = 5;
				shadowFilter.distance = 5;
				addShadow(this.mainBox);
				}
				else { */
				this.borderLeft.width = 0;
				this.borderRight.width = 0;
				this.borderTop.height = 0;
				this.borderBottom.height = 0;
				//}
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;
				maximize();
				NativeApplication.nativeApplication.addEventListener( Event.EXITING, 
					function(e:Event):void {
						var opened:Array = NativeApplication.nativeApplication.openedWindows;
						for (var i:int = 0; i < opened.length; i ++) {
							opened[i].close();
						}
					});    
				
				setApplicationVersion();
				//appUpdater.updateURL = "http://localhost/buckscore/update.xml";
				appUpdater.updateURL = "http://www.complexless.com/buckscore/update.xml";
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onError);
				appUpdater.initialize();
				llenarTabla();
			}

			private function addShadow(comp:DisplayObject):void {
				comp.filters = [this.shadowFilter];
			}
			
			private function onError(event:ErrorEvent):void {
				Alert.show(event.toString());
			}
			private function onUpdate(event:UpdateEvent):void {
				appUpdater.checkNow();
			}
			
			private function setApplicationVersion():void {
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				gVersion = appXML.ns::version;
			}
			////////////////////////menu bar control///////////////////////////////////////////
			[Embed(source="assets/images/iconalert.png")]
			private var alertIcon:Class;
			private function menuHandler(event:MenuEvent):void  {
				if (event.item.@label == "Album") {
					workpanel.panelprincipal.currentState='editAlbum';
				}
				else if(event.item.@label == "Deer"){
					workpanel.panelprincipal.currentState='editphoto';
				}
				else if(event.item.@label == "Black"){
					setStyle("backgroundColor", 0x323232);
					setStyle("chromeColor", 0x303030);
					setStyle("baseColor", 0x4C4C4C);
					setStyle("color", 0xcecece);
					setStyle("contentBackgroundColor", 0x323232);
					setStyle("rollOverColor", 0x666666);
					setStyle("selectionColor", 0xaeaeae);
					setStyle("focusColor", 0xEEEEEE);
				}
				else if(event.item.@label == "Silver"){
					setStyle("backgroundColor", 0xcccccc);
					setStyle("chromeColor", 0xcccccc);
					setStyle("baseColor", 0xcccccc);
					setStyle("color", 0x00000);
					setStyle("contentBackgroundColor", 0xFFFFFF);
					setStyle("symbolColor", 0xFFFFFF);
					setStyle("rollOverColor", 0xcecece);
					setStyle("selectionColor", 0xcccccc);
					setStyle("focusColor", 0x888888);
				}
				else if(event.item.@label == "Update License"){
					currentState='stateLogin';
					panelLoginUpdate.currentState = 'stateUpdate';
				}
				else if(event.item.@label == "View Help"){
					var url :URLRequest = new URLRequest("http://www.buckscore.com:8043/Account/gettingstarted");
					navigateToURL(url, "_blank")
				}else if(event.item.@label == "Syncronization"){
					Alert.show("This feature only exists with the Pro version", "Version Upgrade", 
						Alert.OK | Alert.CANCEL, null, null, alertIcon);
				}else if(event.item.@label == "About BuckScore Application"){
			
					var scoreserials:ComponentsSerials=new ComponentsSerials;
					scoreserials.closeButton;
					scoreserials.addEventListener(CloseEvent.CLOSE, ttlWndw_close);

					PopUpManager.addPopUp(scoreserials,this,false);
					
					PopUpManager.centerPopUp(scoreserials);	
				}else if(event.item.@label != "Deer" && event.item.@label != "Album"){
					Alert.show("Menu: " + event.item.@label, "Buckscore menu item");
				}
			}
			protected function ttlWndw_close(evt:CloseEvent):void {
				PopUpManager.removePopUp(evt.currentTarget as IFlexDisplayObject);
			}
			private var firstTime:Boolean = true;
			public function callResultHandler(event:ResultEvent):void
			{
				var respuesta:Object = event.result;
				trace(respuesta.toString());
				var xml:XML=XML(event.result);
				trace(xml.child("Email"));
				if(xml.child("Email").toString()=="" && xml.child("ErrorCode").toString()=="101"){
					currentState='stateLogin';
				}else{
					currentState='PanelScoreState';
				}
			}
			public function updatephotocrop(image:String):void
			{
				
				if(workpanel.panelprincipal.deernamefinishscore!=""){
					sqlscore.updatephotoscorecrop(workpanel.panelprincipal.deernamefinishscore,image);
					var baseDecoder:Base64Decoder = new Base64Decoder();
					var byteArray:ByteArray;
					baseDecoder.decode(image);
					byteArray= baseDecoder.toByteArray();
					workpanel.panelprincipal.imageforedition.source=byteArray;
				}
				else Alert.show("Choose Photo Please","BuckScore");
			}
			
			
			public function llenarTabla():void
			{   
				var albumphoto:ArrayCollection=new ArrayCollection();
				albumphoto=sqlscore.resault();
				for(var i:int = 0;i<albumphoto.length;i++)
				{	
					var photoItem:Object = albumphoto[i];
					var _deername:String= photoItem.deername as String;
					var _albumname:String= photoItem.albumname as String;
					var _images:String=photoItem.image as String;
					var byteArray:ByteArray;
					if(_images!=""){
						var encodedBytes:String = _images;		
						var baseDecoder:Base64Decoder = new Base64Decoder();
						baseDecoder.decode(encodedBytes);
						byteArray= baseDecoder.toByteArray();
					}else{
						byteArray=null;
					}
					var _score:String = photoItem.score as String;
					workpanel.panelprincipal.array.addItem({name:_deername,type:_albumname});
					//workpanel.expandpanel.array2.addItem({image:byteArray ,name:_deername,type:_albumname,score:_score});
				}
				var createalbum:ArrayCollection=new ArrayCollection();
				createalbum=sqlscore.resaulta();
				for(var j:int = 0;j<createalbum.length;j++){
					var albumItem:Object = createalbum[j];
					var __albumname:String= albumItem.albumname as String;
					workpanel.panelprincipal.combo.addItem(__albumname);
				}	
			}
			protected function ws_faultHandler(event:FaultEvent):void
			{
				Alert.show("Network Connection Not Found","Buckscore");
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="stateLogin">
		</s:State>
		<s:State name="PanelScoreState"/>
	</s:states>
	<fx:Declarations>
		<mx:WebService id="ws" wsdl="http://www.buckscore.com/WebService/WinAppIntegration.asmx?WSDL" fault="ws_faultHandler(event)">
			<mx:operation name="SignAndRegister" result="callResultHandler(event)"/>
		
		</mx:WebService> 
		
	</fx:Declarations>	
	<s:layout.stateLogin>
		<s:BasicLayout/>
	</s:layout.stateLogin>
	<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
		<s:VGroup id="borderLeft" width="15" height="100%"/>
		<s:VGroup width="100%" height="100%" gap="0">
			<s:HGroup id="borderTop" height="15" width="100%"/>
			<s:SkinnableContainer id="mainBox" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" gap="0" paddingBottom="6" paddingLeft="6"
						  paddingRight="6" paddingTop="6">
					<s:SkinnableContainer width="100%" height="56" skinClass="com.complexless.skins.spark.TitleMainSkin">
						<s:HGroup id="titleMain" width="100%" height="100%" gap="0" paddingLeft="5"
								  paddingRight="5">
							<s:Label height="100%" fontSize="24"
									 text=" What's your Buckscore™?" verticalAlign="middle"
									 />
							<s:Label width="100%" height="100%" fontFamily="Arial" fontSize="13"
									 fontWeight="normal" text="Powered by the MSU Deer Lab "
									 textAlign="right" verticalAlign="middle"
									 />
						</s:HGroup>
					</s:SkinnableContainer>				
					<s:HGroup includeIn="PanelScoreState" width="100%" height="34"
							  verticalAlign="middle">
						<bs:MenuBar id="myMenuBar" width="100%" height="24"
									itemClick="menuHandler(event)" labelField="@label">
							<fx:XMLList>
								<menuitem label="New">
									<menuitem label="Album"/>
									<menuitem label="Deer"/>
									<menuitem label="Maps"/>
								</menuitem>
								<menuitem label="Skins">
									<menuitem label="Black"/>
									<menuitem label="Silver"/>
								</menuitem>
								<menuitem label="Help">
									<menuitem label="View Help"/>
									<menuitem label="Update License"/>
									<menuitem label="Syncronization"/>
									<menuitem label="About BuckScore Application"/>
								</menuitem>
							</fx:XMLList>
						</bs:MenuBar>
					</s:HGroup>
			
					<ps:WorkPanel id="workpanel" includeIn="PanelScoreState" width="100%" height="100%">						
					</ps:WorkPanel>

					<mx:HDividedBox id="mainPanel" includeIn="stateLogin"
									width="100%" height="100%" focusEnabled="true"
									hasFocusableChildren="true">
						<dialogs:LoginUpdatePanel id="panelLoginUpdate" width="100%" height="100%"
											 horizontalAlign="center" verticalAlign="middle"/>
					</mx:HDividedBox>
				</s:VGroup>
			</s:SkinnableContainer>
			<s:HGroup id="borderBottom" width="100%" height="15"/>
		</s:VGroup>
		<s:VGroup id="borderRight" width="15" height="100%"/>
	</s:HGroup>
</s:WindowedApplication>