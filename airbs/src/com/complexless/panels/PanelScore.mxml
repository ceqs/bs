<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:bs="library://ns.adobe.com/flex/mx"
					  xmlns:net="flash.net.*"
					  xmlns:imagecropper="com.flexblocks.imagecropper.*"
					  xmlns:utils="utils.*"
					  xmlns:ns1="*"
					  width="320"
					  creationComplete="init()" styleName="main">
	<fx:Style source="assets/css/airbs2.css"/>
	<fx:Script>

		<![CDATA[
			import com.complexless.dialogs.Window;
			import com.complexless.skins.spark.ContentCropperSkinSilver;
			import com.complexless.utils.SQLbuckscore;
			import com.complexless.utils.ScoreUtils;
			import com.complexless.utils.albumbuckscore;
			import com.complexless.utils.albumitembuck;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.IFlexDisplayObject;
			import mx.core.WindowedApplication;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Decoder;
			import mx.utils.Base64Encoder;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;		
			private var albumphoto:ArrayCollection= new ArrayCollection();
			private var createalbum:ArrayCollection = new ArrayCollection();
			private var fr:FileReference;
			private var prefsXML:XML;
			private var sqlscore:SQLbuckscore = new SQLbuckscore();
			[Bindable]
			private var competencyListData:XMLListCollection;
			[Bindable]
			private var competencyListDatAAge:XMLListCollection;
			private var coleccionpositionphoto:XMLListCollection;
			private var numbertypicalleft:int=1;
			private var numbertypicalrigth:int=1;
			private var numberabnormalleft:int=1;
			private var numberabnormalright:int=1;
			private var bandera:String;
			public static var birdList:Array=new Array(); 
			public static var textList:Array=new Array();
			public var arraybyte:ByteArray=new ByteArray();
			public var scoreutils:ScoreUtils=new ScoreUtils();
			//////////////////////////////SCORE VARIABLE//////////////////////////////////////////////////////
			public var scoredeerage:String;
			public var scorestate:String;
			public var referencetype:String;
			public var inchvalue:Number;
			public var myangleoptions:XMLList;
			public var distancerect:Number=0;
			public var angledescription1:String="Close";
			public var angledescription2:String="Far";
			public var vectorleft:ArrayList=new ArrayList;
			public var circumferenceleft:ArrayList= new ArrayList;
			
			public var logarchive:File;
			public var log:String="";
			///////////////////////////////////////////////////////////////////////////////////////////////			
			protected function init():void
			{
				currentState='scorephoto';
				prefsXML = new XML();
				var XML_URL:String = "lookups.xml";
				var myXMLURL:URLRequest = new URLRequest(XML_URL);
				var myLoader:URLLoader = new URLLoader(myXMLURL);
				myLoader.addEventListener("complete", xmlLoaded);
				
				function xmlLoaded(event:Event):void
				{
					prefsXML = XML(myLoader.data);
					trace("Data loaded.");
					trace(prefsXML.child("States").child("State").attribute("Description").toString());
					var mylist:XMLList = prefsXML.child("States").child("State").attribute("Description");
					var mylistage:XMLList = prefsXML.child("AgeGroups").child("AgeGroup").attribute("Description");
					competencyListData =  new XMLListCollection(mylist);
					competencyListDatAAge = new XMLListCollection(mylistage);
					cmbstate.dataProvider=competencyListData;
					cmbstate.selectedIndex=0;
					cmbage.dataProvider=competencyListDatAAge;
					cmbage.selectedIndex=0;
					
				}
				cmbstate.selectedIndex=-1;
				cmbage.selectedIndex=-1;
			}
			protected function button3_backeditphoto(event:MouseEvent):void
			{
				currentState='scorephoto';
			}
			protected function button3_backscorephoto(event:MouseEvent):void
			{
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.currentState='statePrincipal';
				app.workpanel.panelprincipal.currentState='stateMain';
				if(app.silver) app.workpanel.panelprincipal.effects.setStyle("skinClass", com.complexless.skins.spark.ContentCropperSkinSilver);
				else app.workpanel.panelprincipal.effects.setStyle("skinClass", com.complexless.skins.spark.ContentCropperSkin);
			}
			protected function button3_referenceFeature(event:MouseEvent):void
			{
				currentState='positionphoto';
			}
			/////////////////////position foto////////////////////////////////////////
			
			protected function btnnext_nextphoto(event:MouseEvent):void
			{
				var mylistposition:XMLList = prefsXML.child("ModifiedImageOrientations").child("Orientation");
				trace(mylistposition[0].attribute("Code"));
				if(imageposition.source=="Image/0_RL.png")
				{
					imageposition.source="Image/22_L.png";
				}
				else if(imageposition.source=="Image/22_L.png")
				{
					imageposition.source="Image/45_L.png";
				}
				else if(imageposition.source=="Image/45_L.png")
				{
					imageposition.source="Image/66_L.png";
				}
				else if(imageposition.source=="Image/66_L.png")
				{
					imageposition.source="Image/90_L.png";
				}
				else if(imageposition.source=="Image/90_L.png")
				{	
				}	
				else if(imageposition.source=="Image/22_R.png")
				{
					imageposition.source="Image/0_RL.png";
				}
				else if(imageposition.source=="Image/45_R.png")
				{
					imageposition.source="Image/22_R.png";
				}
				else if(imageposition.source=="Image/66_R.png")
				{
					imageposition.source="Image/45_R.png";
				}
				else if(imageposition.source=="Image/90_R.png")
				{
					imageposition.source="Image/66_R.png";
				}
				for(var i:int=0; i<mylistposition.length();i++){
					
					if(mylistposition[i].attribute("ImagePath")==imageposition.source.toString()){
						
						lblpositionphoto.text=mylistposition[i].attribute("Description");
					}
				}
			}
			
			protected function btnback_backphoto(event:MouseEvent):void
			{
				var mylistposition:XMLList = prefsXML.child("ModifiedImageOrientations").child("Orientation");
				
				trace(mylistposition[0].attribute("Code"));
				
				if(imageposition.source=="Image/0_RL.png")
				{
					imageposition.source="Image/22_R.png";
				}
				else if(imageposition.source=="Image/22_R.png")
				{
					imageposition.source="Image/45_R.png";
				}
				else if(imageposition.source=="Image/45_R.png")
				{
					imageposition.source="Image/66_R.png";
				}
				else if(imageposition.source=="Image/66_R.png")
				{
					imageposition.source="Image/90_R.png";
				}
				else if(imageposition.source=="Image/90_R.png")
				{	
				}
				else if(imageposition.source=="Image/22_L.png")
				{
					imageposition.source="Image/0_RL.png";
				}
				else if(imageposition.source=="Image/45_L.png")
				{
					imageposition.source="Image/22_L.png";
				}
				else if(imageposition.source=="Image/66_L.png")
				{
					imageposition.source="Image/45_L.png";
				}
				else if(imageposition.source=="Image/90_L.png")
				{
					imageposition.source="Image/66_L.png";
				}
				for(var i:int=0; i<mylistposition.length();i++){
					
					if(mylistposition[i].attribute("ImagePath")==imageposition.source.toString()){
						
						lblpositionphoto.text=mylistposition[i].attribute("Description");
					}
				}
				
			}
			/////////////////////////////////position foto////////////////////////////////////////
			[Bindable] 
			private static var birdListAC:ArrayCollection;
			protected function birdlist_complete(event:FlexEvent):void
			{
				trace(birdList[0],birdList[1]);
				birdList[0]=StringUtil.trim(birdList[0]);
				birdList[1]=StringUtil.trim(birdList[1]);
				birdListAC = new ArrayCollection(birdList);
				birdlist.dataProvider = birdListAC;
			}
			
			protected function selectiontypefeature_clickHandler(event:MouseEvent):void
			{
				var index:int=birdlist.selectedIndex;
				if(index==0){currentState='RecordEarWidth'; referencetype='001';   }
				else if(index==1) 
				{
					if(lblEyetoEyewidth.text!="Eyeball Width"){ currentState='RecordEyetoEyeWidth'; referencetype='002';}
					else{ currentState='RecordEyeballWidthFeature'; referencetype='005';};
				}
				trace("reference feature:"+referencetype);
				var app:airbs=this.parentApplication as airbs;
				trace("reference type selection="+referencetype);
				log+="\n\r---reference type selection="+referencetype+"\n\r";
				
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function toggle_EarWidthHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							trace("medida"+(i+1)+":"+x0)
							y0=Number(arraypoints[i].y);
							trace("medida"+(i+1)+":"+y0);
						}else{							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}												
					}
					//distance=distance/72;
					trace("long of ear|eye| measure"+distance);
					if(grade=="90"){
						currentState='RecorderInsideSpreadEstimate';
						var  stateReferenceRule:String=(parseInt(scoredeerage)<2 && referencetype=='005' ? "Rule1":
							parseInt(scoredeerage)<2 && referencetype=='004' ? "Rule2":
							parseInt(scoredeerage)<2 && referencetype=='003' ? "Rule3":
							parseInt(scoredeerage)<2 && referencetype=='001' ? "Rule4":
							parseInt(scoredeerage)<2 && referencetype=='002' ? "Rule5":
							parseInt(scoredeerage)>=2 && referencetype=='005' ? "Rule6":
							parseInt(scoredeerage)>=2 && referencetype=='004' ? "Rule7":
							parseInt(scoredeerage)>=2 && referencetype=='003' ? "Rule8":
							parseInt(scoredeerage)>=2 && referencetype=='001' ? "Rule9":
							parseInt(scoredeerage)>=2 && referencetype=='002' ? "Rule10":"Rule1");
						var mylistposition:XMLList = prefsXML.child("States").child("State");
						for(i=0;i<mylistposition.length();i++){
							if(mylistposition[i].attribute("Description")==scorestate){
								var rule:Number=Number(mylistposition[i].attribute(stateReferenceRule));
								inchvalue=distance/rule;
								trace("Rule selection:"+stateReferenceRule);
								trace("valueinch with measure:"+inchvalue);
							}							
						}
						var modo:String="";
						if(referencetype=="001") modo="EAR";
						else if(referencetype=="002") modo="EYE TO EYE";
						else if(referencetype=="005") modo="EYE";
						log+="\n\r |STA="+scorestate+"\n\r |AGE="+scoredeerage+"\n\r |MOD="+modo+" \n\r |Rule number="+stateReferenceRule+" \n\r |Rule Value="+rule+ "\n\r |MEASURE="+distance+"\n\r |InchValue="+inchvalue;
					}	
					else{						
						currentState='MeasureInsideSpread';
						var  stateReferenceRule2:String=(parseInt(scoredeerage)<2 && referencetype=='005' ? "Rule1":
							parseInt(scoredeerage)<2 && referencetype=='004' ? "Rule2":
							parseInt(scoredeerage)<2 && referencetype=='003' ? "Rule3":
							parseInt(scoredeerage)<2 && referencetype=='001' ? "Rule4":
							parseInt(scoredeerage)<2 && referencetype=='002' ? "Rule5":
							parseInt(scoredeerage)>=2 && referencetype=='005' ? "Rule6":
							parseInt(scoredeerage)>=2 && referencetype=='004' ? "Rule7":
							parseInt(scoredeerage)>=2 && referencetype=='003' ? "Rule8":
							parseInt(scoredeerage)>=2 && referencetype=='001' ? "Rule9":
							parseInt(scoredeerage)>=2 && referencetype=='002' ? "Rule10":"Rule1");
						mylistposition = prefsXML.child("States").child("State");
						for( i=0;i<mylistposition.length();i++){
							if(mylistposition[i].attribute("Description")==scorestate){
								var rule2:Number=Number(mylistposition[i].attribute(stateReferenceRule2));
								inchvalue=distance/rule2;
								trace("Rule selection:"+stateReferenceRule);
								trace("valueinch with measure:"+inchvalue);
							}
						}
						if(grade!="0") imagebusckscorezoom.source="Image/INSSPR_22.jpg";
						else imagebusckscorezoom.source="Image/INSSPR_0.jpg";
						var modo:String="";
						if(referencetype=="001") modo="EAR";
						else if(referencetype=="002") modo="EYE TO EYE";
						else if(referencetype=="005") modo="EYE";
						log+="\n\r |STA="+scorestate+"\n\r |AGE="+scoredeerage+"\n\r |MOD="+modo+" \n\r |Rule number="+stateReferenceRule2+" \n\r |Rule Value="+rule2+ "\n\r |MEASURE= "+distance+"\n\r |InchValue="+inchvalue;
					}
					
					////log="Age="+scoredeerage+"   rule selection="+stateReferenceRule+"  calculate rule indice:"+rule+"  inchevalue"+inchvalue;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}	
			}
			public var grade:String="";
			protected function button4_positionphoto(event:MouseEvent):void
			{
				var mylistposition:XMLList = prefsXML.child("ModifiedImageOrientations").child("Orientation");
				var position:String =lblpositionphoto.text; 
				var key1:String="";
				var key2:String="";
				for(var i:int=0; i<mylistposition.length();i++){
					
					var desc:String=mylistposition[i].attribute("Description");
					
					trace(mylistposition[i].attribute("Description"));
					if(desc.toString()==position.toString()){
						trace("ntre");
						var mylistcode:XMLList= mylistposition[i].child("RelatedReferenceFeatures");
						var mylistcode1:XMLList=mylistcode.child("RelatedReferenceFeature");
						//mylistcode.
						trace(mylistcode1.toString());
						key1=mylistcode1[0].attribute("key");
						key2=mylistcode1[1].attribute("key");
						trace(key1+"."+key2);
						grade=mylistposition[i].attribute("Code");
						trace("grado:"+grade);
						log+="\n\r |DEE:"+txtNamepaneltitle.text+"\n\r";
						var someBirthday:Date = new Date();
						log+="\n\r |DAT"+someBirthday.toDateString();
						log+="\n\r |ORI: "+grade+"\n\r";
					}
				}
				
				var mylistcodeImage:XMLList=prefsXML.child("ReferenceFeatures").child("ReferenceFeature");	
				var cont:int=0;
				var image1:String;
				var image2:String;
				for( i=1; i<mylistcodeImage.length();i++){
					if(mylistcodeImage[i].attribute("Code")==key1.toString()){
						
						image1=mylistcodeImage[i].attribute("ImagePath");
						
						birdList[0]=image1;
						trace(mylistcodeImage[i].attribute("Description")+"--"+birdList[0]);
						textList[0]=mylistcodeImage[i].attribute("Description");
						
					}else if(mylistcodeImage[i].attribute("Code")==key2.toString()) {
						
						image2=mylistcodeImage[i].attribute("ImagePath");
						birdList[1]=image2;
						trace(mylistcodeImage[i].attribute("Description")+"--"+birdList[1]);
						textList[1]=mylistcodeImage[i].attribute("Description");
					}	
				}
				
				if(grade=="0"){ 
					angledescription1="Left";
					angledescription2="Right";
				}else{
					angledescription1="Close";
					angledescription2="Far";
				}
				
				
				if(grade=="22" || grade=="66"){
					var app:airbs=this.parentApplication as airbs;
					Alert.show("The view you have chosen is not an exact match to the Buscksocre requirements. Your result may vary."+"Do yo wish to continue", "Irregular Image Orientation Confirmation",
						Alert.OK | Alert.CANCEL,app.mainBox,
						alertListener, null, Alert.OK);
				}else{
					currentState='referenceFeature';
					birdlist.dataProvider.refresh();
					lblEarWidth.text=textList[0];
					lblEyetoEyewidth.text=textList[1];
				}
			}
			private function alertListener(eventObj:CloseEvent):void {
				if (eventObj.detail==Alert.OK) {
					currentState='referenceFeature';
					birdlist.dataProvider.refresh();
					lblEarWidth.text=textList[0];
					lblEyetoEyewidth.text=textList[1];
				}else{
					closebutton_buckscore();
				}
			}
			protected function button5_numberpoint(event:MouseEvent):void
			{
				txttypicalleft.text=cmbletftypical.selectedItem;
				txttypicalrigth.text=cmbrigthtypical.selectedItem;
				
			}
			///////////////zoom image buckscore//////////////////////////////////////////////
			public function doZoomProduct (event:MouseEvent): void {
				
				if (zoomProduct.isPlaying) {
					zoomProduct.reverse();
					trace("hola reverse");
				}
				else {
					// If this is a ROLL_OUT event, play the effect backwards. 
					
					// If this is a ROLL_OVER event, play the effect forwards.
					zoomProduct.play([event.target], event.type == MouseEvent.ROLL_OUT ? true : false);
					trace("hola play");
				}
				
			}
			private function launchPopUp(e:MouseEvent):void {
				
				var win : Window = new Window();
				win.sourceImage = imagezoomscoring.source.toString();
				win.title =  "Buckscore";
				var app:airbs=this.parentApplication as airbs;
				PopUpManager.addPopUp(win,app.mainBox,true);
				PopUpManager.centerPopUp(win);	
				
			}
			private function launchPopUp2(e:MouseEvent):void {
				
				var win : Window = new Window();
				win.sourceImage = imagebusckscorezoom.source.toString();
				win.title =  "Buckscore";
				var app:airbs=this.parentApplication as airbs;
				PopUpManager.addPopUp(win,app.mainBox,true);
				PopUpManager.centerPopUp(win);
			}

			protected function TypicalPoints_clickHandler(event:MouseEvent):void
			{	
				currentState='MeasureLeftMainBeam';
				txttypicalleft.text=cmbletftypical.selectedItem;
				txttypicalrigth.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Measure "+angledescription1+" Main Beam"
				
				var app:airbs=this.parentApplication as airbs;
				if(grade=="90")imagezoomscoring.source="Image/MAINBM_90.jpg";
				else if(grade=="0"){imagezoomscoring.source="Image/MAINBM_0.jpg"}
				else {imagezoomscoring.source="Image/MAINBM_66.jpg";}
				app.workpanel.panelprincipal.manageCropper.endDraw();
				
			}
			
			protected function LeftMainBeam_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLeftMainBeamLine';	
				txtRecordMainLeftPoints.text=cmbletftypical.selectedItem;
				txtRecordMainRigthPoints.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Record "+angledescription1+" Main Beam"; 
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			protected function MeasureRigthMainBeam_clickHandler(event:MouseEvent):void
			{
				currentState='RecordRigthMainBeam';
				txtTypicalLeftRecordRigth.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordRigth.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Record "+angledescription2+" Main Beam"
				
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function MeasureAnormalPoints_clickHandler(event:MouseEvent):void
			{
				
				
				if(parseInt(cmbabnormalpointsleft.selectedItem)==0 && parseInt(cmbabnormalpointsrigth.selectedItem)==0){
					currentState='CompleteScoringfinal';
				}
				else if(parseInt(cmbabnormalpointsleft.selectedItem)>0){
					currentState='MeasureLeftAnormalTine';
					if(grade!="0")imagezoomscoring.source="Image/ABNTIN_22.jpg";
					else{imagezoomscoring.source="Image/ABNTIN_0.jpg";}
				}
				else if(parseInt(cmbabnormalpointsrigth.selectedItem)>0){
					currentState='MeasureRigthAnormalTine';
					if(grade!="0")imagezoomscoring.source="Image/ABNTIN_22.jpg";
					else{imagezoomscoring.source="Image/ABNTIN_0.jpg";}
				}
				
				txtleftanormalpoints.text=cmbabnormalpointsleft.selectedItem;
				txtrigthanormalpoints.text=cmbabnormalpointsrigth.selectedItem;	
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
			}
			//////////////////Close General buckscore general//////////////
			
			protected function closebutton_buckscore():void{
				
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
				cmbage.selectedIndex=0;
				cmbstate.selectedIndex=0;
				
				
				app.workpanel.panelprincipal.closebutton();
				
			}
			
			protected function closebutton_buckscore2():void{
				
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
				cmbage.selectedIndex=0;
				cmbstate.selectedIndex=0;
				cmbletftypical.selectedIndex=0;
				cmbrigthtypical.selectedIndex=0;
				
				app.workpanel.panelprincipal.closebutton();
				
			}
			
			protected function closebutton_buckscore3():void{
				
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
				cmbage.selectedIndex=0;
				cmbstate.selectedIndex=0;
				cmbletftypical.selectedIndex=0;
				cmbrigthtypical.selectedIndex=0;
				cmbletftypical.selectedIndex=0;
				cmbrigthtypical.selectedIndex=0;
				cmbabnormalpointsleft.selectedIndex=0;
				cmbabnormalpointsrigth.selectedIndex=0;
				
				app.workpanel.panelprincipal.closebutton();
				
			}
			protected function BackMeasureInsideSpread_clickHandler(event:MouseEvent):void
			{
				var index:int=birdlist.selectedIndex;
				trace("indez-->"+index);
				if(index==0){currentState='RecordEarWidth';}
				else if(index==1) 
				{
					if(lblEyetoEyewidth.text!="Eyeball Width") currentState='RecordEyetoEyeWidth';
					else currentState='RecordEyeballWidthFeature';
				}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			//////////////////////////////		
			public var location:String;
			public var deernamefinishscore:String;
			protected function scorephoto_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				currentState='positionphoto'
				scoredeerage=cmbage.selectedItem;
				scorestate=cmbstate.selectedItem;
				//deernamefinishscore=txtNamepaneltitle.text;
				if(cmbstate.selectedIndex>9)
					location="00"+cmbstate.selectedIndex;
				else
					location="000"+cmbstate.selectedIndex;	
				trace(location);
				trace("age:"+scoredeerage+" state:"+scorestate);
			}
			
			protected function toggle_RecorderInsideSpread(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
					}
					//distance=distance/72;
					var options:XMLList;
					log+="\n\r |INS.M="+distance+"\n\r";
					options=prefsXML.child("Equations").child("Equation");
					
					var j:int=0;
					for(i=0;options.length();i++){
						if(options[i].attribute("ImageOrientation")==grade){
							myangleoptions=options[i].child("Entity");
							j=i;
							trace(j);
							trace(myangleoptions.toString());
							break;
						}
					}
					
					trace(myangleoptions.toString());
					
					var ldistance:Number=(distance)/(inchvalue);
					
					log+="\n\r |INS="+ldistance+"\n\r";
					
					var ISP:Number=Number(myangleoptions[0].attribute("A"))*ldistance+
						Number(myangleoptions[0].attribute("B"));
					log+="\n\r |INS.V="+ISP+"\n\r";
					ISP=scoreutils.roundDecimals(ISP,2); 
					scoreutils.insidespread=ISP.toString();
					currentState='NumberTypicalPoints';
					cmbletftypical.selectedIndex=0;
					cmbrigthtypical.selectedIndex=0;
					lbllasmeasurement.text="Inside Spread:"+scoreutils.insidespread.toString();
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}
			}
			
			protected function RecorderInsideSpreadEstimate_clickHandler(event:MouseEvent):void
			{
				currentState='NumberTypicalPoints';
				lbllasmeasurement.text="Inside Spread: To Be Determined";
				var options:XMLList;
				
				options=prefsXML.child("Equations").child("Equation");
				
				var j:int=0;
				for(var i:int=0;options.length();i++){
					if(options[i].attribute("ImageOrientation")==grade){
						myangleoptions=options[i].child("Entity");
						j=i;
						trace(j);
						trace(myangleoptions.toString());
						break;
					}
				}
				log+="\n\r |Inside spread estimate between maximize of maim beam left/close and main beam rigth/far";
				trace(myangleoptions.toString());
				
			}
			
			protected function RecordLeftMainBeamLine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}	
					}
					//distance=distance/72;
					log+="\n\r |TB0.M "+angledescription1+"= "+distance+"\n\r";
					var ISP:Number;
					var ldistance:Number=(distance)/(inchvalue);
					
					log+="\n\r |TB0"+angledescription1+"="+ldistance+"\n\r";
					if(grade=='0'){
						ISP=Number(myangleoptions[1].attribute("A"))*ldistance+Number(myangleoptions[1].attribute("B"))+
							Number(myangleoptions[1].attribute("C"))*Number(cmbletftypical.selectedItem);
						
					}else{	
						ISP=Number(myangleoptions[1].attribute("A"))*ldistance+Number(myangleoptions[1].attribute("B"))+
							Number(myangleoptions[1].attribute("C"))*Number(cmbletftypical.selectedItem);
					}
					log+="\n\r |TB0.V"+angledescription1+"="+ISP+"\n\r";
					ISP=scoreutils.roundDecimals(ISP,2);
					scoreutils.mainbeamleft=ISP.toString();
					
					currentState='MeasureRigthMainBeam';
					btnRecordLeftTine.label="Measure "+angledescription2+" Main Beam"
					txtTypicalLeftPonitsRigthMain.text=cmbletftypical.selectedItem;
					txtTypicalRigthPonitsRigthMain.text=cmbrigthtypical.selectedItem;
					lbllasmeasurement.text=angledescription1+"MainBeam="+scoreutils.mainbeamleft.toString();
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}
			}
			
			
			protected function RecordRigthMainBeam_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
					}
					//distance=distance/72;
					log+="\n\r |TB0.M"+angledescription2+"="+distance+"\n\r";
					var ISP:Number;
					var ldistance:Number=(distance)/(inchvalue);
					log+="\n\r |TB0"+angledescription2+"="+ldistance+"\n\r";
					if(grade=='0'){
						ISP=Number(myangleoptions[1].attribute("A"))*ldistance+Number(myangleoptions[1].attribute("B"))+
							Number(myangleoptions[1].attribute("C"))*Number(cmbrigthtypical.selectedItem);
						
					}else{
						ISP=Number(myangleoptions[2].attribute("A"))*ldistance+Number(myangleoptions[2].attribute("B"))+
							Number(myangleoptions[2].attribute("C"))*Number(cmbrigthtypical.selectedItem);
					}
					if(grade=='90'){
						if(ISP>=Number(scoreutils.mainbeamleft)) scoreutils.insidespread=(Number(myangleoptions[0].attribute("A"))*ISP+Number(myangleoptions[0].attribute("B"))).toString();
						else scoreutils.insidespread=(Number(myangleoptions[0].attribute("A"))*(Number(scoreutils.mainbeamleft))+Number(myangleoptions[0].attribute("B"))).toString();
						scoreutils.insidespread=scoreutils.roundDecimals(Number(scoreutils.insidespread),2).toString();
						
					}
					
					log+="\n\r |TB0.V"+angledescription2+"="+ISP+"\n\r";
					ISP=scoreutils.roundDecimals(ISP,2);
					scoreutils.mainbeamrigth=ISP.toString();
					if(parseInt(cmbletftypical.selectedItem)<=1 && parseInt(cmbrigthtypical.selectedItem)>1){ currentState='MeasureRigthTine'; btnRecordLeftTine.label="Measure "+angledescription2+" Tine 1"; }
					else if(parseInt(cmbletftypical.selectedItem)<=1 && parseInt(cmbrigthtypical.selectedItem)<=1){currentState='MeasureLeftCircunference';  btnRecordLeftTine.label="Measure "+angledescription1+" Circumference 1";}
					else if(parseInt(cmbletftypical.selectedItem)>1){ currentState='MeasureLeftTine'; btnRecordLeftTine.label="Measure "+angledescription1+" Tine 1";}
					lbllasmeasurement.text=angledescription2+"Main Beam="+scoreutils.mainbeamrigth.toString();
					//logarchive=new File(log);
					
						
					
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}
			}
			public function saveAs(filepath:String,filename:String,logaux:String):void {
				
				
				var file:File = new File(filepath+File.separator+filename);
			
				var fileStream:FileStream = new FileStream();
				
				fileStream.open(file,FileMode.APPEND);
			
				fileStream.writeUTFBytes(logaux);
				
				
				fileStream.close();
				
			}

			/////////////typical points lef//////////////////
			protected function MeasureLeftTine_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLeftTineLine';
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				//btnRecordLeftTine.label="Record "+angledescription2+" Tine 1";
				btnRecordLeftTine.label="Record "+angledescription1+" Tine "+numbertypicalleft;
				if(numbertypicalleft<=parseInt(cmbrigthtypical.selectedItem)-1) usermirrortypical.visible=true;
				else{
					usermirrortypical.visible=false;
					vectorleft.addItem(numbertypicalleft);
				}
				for(var i:int=0;i<vectorleft.length;i++){
					if(numbertypicalleft==vectorleft.getItemAt(i)) vectorleft.removeItemAt(i);
				}
				
				if(grade=="90")imagezoomscoring.source="Image/TYPTIN_90.jpg";
				else if(grade=="0"){imagezoomscoring.source="Image/TYPTIN_0.jpg";}
				else {imagezoomscoring.source="Image/TYPTIN_22.jpg";}	
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			public var cont:int=0;
			protected function RecordLeftTineLine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}	
					}
					//distance=distance/72;
					log+="\n\r |TB1.M"+numbertypicalleft+".M"+angledescription1+"="+distance+"\n\r";
					var ISP:Number;
					var ldistance:Number=(distance)/(inchvalue);
					log+="\n\r |TB"+numbertypicalleft+""+angledescription1+"="+ldistance+"\n\r";
					trace("distance de left points"+ldistance);
					if(numbertypicalleft<parseInt(cmbletftypical.selectedItem)-1){
						if(grade=='0')
						{
							ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							ISP=Number(myangleoptions[3+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[3+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0)cont++;
						log+="\n\r |TB"+numbertypicalleft+".V"+angledescription1+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numbertypicalleft==1){
							scoreutils.Typicalpointleft1=ISP.toString();
							if(scoreutils.Typicalpointrigth1=="1") scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
						}	
						if(numbertypicalleft==2){
							scoreutils.Typicalpointleft2=ISP.toString();
							if(scoreutils.Typicalpointrigth2=="1") scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
						}	
						if(numbertypicalleft==3){
							scoreutils.Typicalpointleft3=ISP.toString();
							if(scoreutils.Typicalpointrigth3=="1") scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
						}	
						if(numbertypicalleft==4){
							scoreutils.Typicalpointleft4=ISP.toString();
							if(scoreutils.Typicalpointrigth4=="1") scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
						}	
						if(numbertypicalleft==5){
							scoreutils.Typicalpointleft5=ISP.toString();
							if(scoreutils.Typicalpointrigth5=="1") scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
						}	
						if(numbertypicalleft==6){
							scoreutils.Typicalpointleft6=ISP.toString();
							if(scoreutils.Typicalpointrigth6=="1") scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
						}	
						if(numbertypicalleft==7){
							scoreutils.Typicalpointleft7=ISP.toString();
							if(scoreutils.Typicalpointrigth7=="1") scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
						}	
						if(numbertypicalleft==8){
							scoreutils.Typicalpointleft8=ISP.toString();
							if(scoreutils.Typicalpointrigth8=="1") scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
						}	
						if(numbertypicalleft==9){
							scoreutils.Typicalpointleft9=ISP.toString();
							if(scoreutils.Typicalpointrigth9=="1") scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
						}	
						if(numbertypicalleft==10){
							scoreutils.Typicalpointleft10=ISP.toString();
							if(scoreutils.Typicalpointrigth10=="1") scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
						}			
						currentState='MeasureLeftTine';
						lbllasmeasurement.text="Typical "+angledescription1+" Tine "+numbertypicalleft+"="+ISP.toString();
						numbertypicalleft++;
						btnRecordLeftTine.label="Measure "+angledescription1+" Tine "+numbertypicalleft;
					}else{
						if(grade=='0')
						{
							ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[3+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[3+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0)cont++;
						log+="\n\r |TB"+numbertypicalleft+".V"+angledescription1+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numbertypicalleft==1){
							scoreutils.Typicalpointleft1=ISP.toString();
							if(scoreutils.Typicalpointrigth1=="1") scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
						}	
						if(numbertypicalleft==2){
							scoreutils.Typicalpointleft2=ISP.toString();
							if(scoreutils.Typicalpointrigth2=="1") scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
						}	
						if(numbertypicalleft==3){
							scoreutils.Typicalpointleft3=ISP.toString();
							if(scoreutils.Typicalpointrigth3=="1") scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
						}	
						if(numbertypicalleft==4){
							scoreutils.Typicalpointleft4=ISP.toString();
							if(scoreutils.Typicalpointrigth4=="1") scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
						}	
						if(numbertypicalleft==5){
							scoreutils.Typicalpointleft5=ISP.toString();
							if(scoreutils.Typicalpointrigth5=="1") scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
						}	
						if(numbertypicalleft==6){
							scoreutils.Typicalpointleft6=ISP.toString();
							if(scoreutils.Typicalpointrigth6=="1") scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
						}	
						if(numbertypicalleft==7){
							scoreutils.Typicalpointleft7=ISP.toString();
							if(scoreutils.Typicalpointrigth7=="1") scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
						}	
						if(numbertypicalleft==8){
							scoreutils.Typicalpointleft8=ISP.toString();
							if(scoreutils.Typicalpointrigth8=="1") scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
						}	
						if(numbertypicalleft==9){
							scoreutils.Typicalpointleft9=ISP.toString();
							if(scoreutils.Typicalpointrigth9=="1") scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
						}	
						if(numbertypicalleft==10){
							scoreutils.Typicalpointleft10=ISP.toString();
							if(scoreutils.Typicalpointrigth10=="1") scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
						}	
						if(parseInt(cmbrigthtypical.selectedItem)>1){ currentState='MeasureRigthTine'; btnRecordLeftTine.label="Measure "+angledescription2+" Tine "+numbertypicalrigth;}
						else{ currentState='MeasureLeftCircunference'; btnRecordLeftTine.label="Measure "+angledescription1+" Circumference 1"; }
						lbllasmeasurement.text="Typical "+angledescription1+" Tine "+numbertypicalleft+"="+ISP.toString();
						numbertypicalleft=1;
						cont=0;
					}
					trace("VALOR DEL ISP"+ISP);
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}
			}
			
			/////////////typical points Rigth//////////////////
			
			protected function MeasureRigthTine_clickHandler(event:MouseEvent):void
			{
				currentState='RecordRigthTineLine';
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				usermirrortypical.visible=true;
				btnRecordLeftTine.label="Record "+angledescription2+" Tine "+numbertypicalrigth;
				if(numbertypicalrigth<=parseInt(cmbletftypical.selectedItem)-1) usermirrortypical.visible=true;
				else usermirrortypical.visible=false;
				for(var i:int=0; i<vectorleft.length;i++){
					if(numbertypicalrigth==vectorleft.getItemAt(i)) usermirrortypical.visible=false;	
				}
				if(grade=="90")imagezoomscoring.source="Image/TYPTIN_90.jpg";
				else if(grade=="0"){imagezoomscoring.source="Image/TYPTIN_0.jpg";}
				else {imagezoomscoring.source="Image/TYPTIN_22.jpg";}	
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
				
			}
			protected function RecordRigthTineLine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
					}
					//distance=distance/72;
					log+="\n\r |TB"+numbertypicalrigth+".M"+angledescription2+"="+distance+"\n\r";
					var ISP:Number;
					var ldistance:Number=(distance)/(inchvalue);
					log+="\n\r |TB"+numbertypicalrigth+""+angledescription2+"="+ldistance+"\n\r";
					trace("distance de left points"+ldistance);
					if(numbertypicalrigth<parseInt(cmbrigthtypical.selectedItem)-1){
						if(grade=='0')
						{
							ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[4+2*cont].attribute("A"))*ldistance+Number(myangleoptions[4+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0) cont++;
						log+="\n\r |TB"+numbertypicalrigth+".V"+angledescription2+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numbertypicalrigth==1){
							scoreutils.Typicalpointrigth1=ISP.toString();
							if(scoreutils.Typicalpointleft1=="1") scoreutils.Typicalpointleft1=scoreutils.Typicalpointrigth1;
						}	
						if(numbertypicalrigth==2){
							scoreutils.Typicalpointrigth2=ISP.toString();
							if(scoreutils.Typicalpointleft2=="1") scoreutils.Typicalpointleft2=scoreutils.Typicalpointrigth2;
						}	
						if(numbertypicalrigth==3){
							scoreutils.Typicalpointrigth3=ISP.toString();
							if(scoreutils.Typicalpointleft3=="1") scoreutils.Typicalpointleft3=scoreutils.Typicalpointrigth3;
						}	
						if(numbertypicalrigth==4){
							scoreutils.Typicalpointrigth4=ISP.toString();
							if(scoreutils.Typicalpointleft4=="1") scoreutils.Typicalpointleft4=scoreutils.Typicalpointrigth4;
						}	
						if(numbertypicalrigth==5){
							scoreutils.Typicalpointrigth5=ISP.toString();
							if(scoreutils.Typicalpointleft5=="1") scoreutils.Typicalpointleft5=scoreutils.Typicalpointrigth5;
						}	
						if(numbertypicalrigth==6){
							scoreutils.Typicalpointrigth6=ISP.toString();
							if(scoreutils.Typicalpointleft6=="1") scoreutils.Typicalpointleft6=scoreutils.Typicalpointrigth6;
						}	
						if(numbertypicalrigth==7){
							scoreutils.Typicalpointrigth7=ISP.toString();
							if(scoreutils.Typicalpointleft7=="1") scoreutils.Typicalpointleft7=scoreutils.Typicalpointrigth7;
						}	
						if(numbertypicalrigth==8){
							scoreutils.Typicalpointrigth8=ISP.toString();
							if(scoreutils.Typicalpointleft8=="1") scoreutils.Typicalpointleft8=scoreutils.Typicalpointrigth8;
						}	
						if(numbertypicalrigth==9){
							scoreutils.Typicalpointrigth9=ISP.toString();
							if(scoreutils.Typicalpointleft9=="1") scoreutils.Typicalpointleft9=scoreutils.Typicalpointrigth9;
						}	
						if(numbertypicalrigth==10){
							scoreutils.Typicalpointrigth10=ISP.toString();
							if(scoreutils.Typicalpointleft10=="1") scoreutils.Typicalpointleft10=scoreutils.Typicalpointrigth10;
						}	
						currentState='MeasureRigthTine';
						lbllasmeasurement.text="Typical "+angledescription2+" Tine "+numbertypicalrigth+"="+ISP.toString();
						numbertypicalrigth++;
						btnRecordLeftTine.label="Measure "+angledescription2+" Tine "+numbertypicalrigth;
						
					}else{
						if(grade=='0')
						{
							ISP=Number(myangleoptions[2+cont].attribute("A"))*ldistance+Number(myangleoptions[2+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[4+2*(cont)].attribute("A"))*ldistance+Number(myangleoptions[4+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0)cont++;
						log+="\n\r |TB"+numbertypicalrigth+".V"+angledescription2+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numbertypicalrigth==1){
							scoreutils.Typicalpointrigth1=ISP.toString();
							if(scoreutils.Typicalpointleft1=="1") scoreutils.Typicalpointleft1=scoreutils.Typicalpointrigth1;
						}	
						if(numbertypicalrigth==2){
							scoreutils.Typicalpointrigth2=ISP.toString();
							if(scoreutils.Typicalpointleft2=="1") scoreutils.Typicalpointleft2=scoreutils.Typicalpointrigth2;
						}	
						if(numbertypicalrigth==3){
							scoreutils.Typicalpointrigth3=ISP.toString();
							if(scoreutils.Typicalpointleft3=="1") scoreutils.Typicalpointleft3=scoreutils.Typicalpointrigth3;
						}	
						if(numbertypicalrigth==4){
							scoreutils.Typicalpointrigth4=ISP.toString();
							if(scoreutils.Typicalpointleft4=="1") scoreutils.Typicalpointleft4=scoreutils.Typicalpointrigth4;
						}	
						if(numbertypicalrigth==5){
							scoreutils.Typicalpointrigth5=ISP.toString();
							if(scoreutils.Typicalpointleft5=="1") scoreutils.Typicalpointleft5=scoreutils.Typicalpointrigth5;
						}	
						if(numbertypicalrigth==6){
							scoreutils.Typicalpointrigth6=ISP.toString();
							if(scoreutils.Typicalpointleft6=="1") scoreutils.Typicalpointleft6=scoreutils.Typicalpointrigth6;
						}	
						if(numbertypicalrigth==7){
							scoreutils.Typicalpointrigth7=ISP.toString();
							if(scoreutils.Typicalpointleft7=="1") scoreutils.Typicalpointleft7=scoreutils.Typicalpointrigth7;
						}	
						if(numbertypicalrigth==8){
							scoreutils.Typicalpointrigth8=ISP.toString();
							if(scoreutils.Typicalpointleft8=="1") scoreutils.Typicalpointleft8=scoreutils.Typicalpointrigth8;
						}	
						if(numbertypicalrigth==9){
							scoreutils.Typicalpointrigth9=ISP.toString();
							if(scoreutils.Typicalpointleft9=="1") scoreutils.Typicalpointleft9=scoreutils.Typicalpointrigth9;
						}	
						if(numbertypicalrigth==10){
							scoreutils.Typicalpointrigth10=ISP.toString();
							if(scoreutils.Typicalpointleft10=="1") scoreutils.Typicalpointleft10=scoreutils.Typicalpointrigth10;
						}	
						currentState='MeasureLeftCircunference';
						usermirrortypical.visible=true;
						lbllasmeasurement.text="Typical "+angledescription2+" Tine "+numbertypicalrigth+"="+ISP.toString();
						btnRecordLeftTine.label="Measure "+angledescription1+" Circumference 1";
						numbertypicalrigth=1;
						cont=0;
					}
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}	
			}
			
			
			/////////////Circumference points lef//////////////////
			private var numbercincumferenceleft:int=1;
			protected function MeasureLeftCircunference_clickHandler(event:MouseEvent):void
			{
				var app:airbs=this.parentApplication as airbs;
				currentState='RecordLeftCircunference';
				usermirrortypical.visible=true;
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				for(var i:int=0;i<circumferenceleft.length;i++){
					if(numbercincumferenceleft==circumferenceleft.getItemAt(i)) circumferenceleft.removeItemAt(i);
				}
				
				btnRecordLeftTine.label="Record "+angledescription1+" Circumference "+numbercincumferenceleft;
				if(grade!="0")imagezoomscoring.source="Image/CRCFRN_66.jpg";
				else{imagezoomscoring.source="Image/CRCFRN_0.jpg";}
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			
			protected function RecordLeftCircunference_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
					}
					//distance=distance/72;	
					log+="\n\r |CR"+numbercincumferenceleft+".M"+angledescription1+"="+distance+"\n\r";
					var ISP:Number;
					var ldistance:Number=(3.14)*(distance)/(inchvalue);
					log+="\n\r |CR"+numbercincumferenceleft+""+angledescription1+"="+ldistance+"\n\r";
					if(numbercincumferenceleft<4){
						
						if(grade=='0')
						{
							ISP=Number(myangleoptions[7+2*cont].attribute("A"))*ldistance+Number(myangleoptions[7+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[13+2*cont].attribute("A"))*ldistance+Number(myangleoptions[13+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						log+="\n\r |CR"+numbercincumferenceleft+".V"+angledescription1+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(cont==0) cont++;
						if(numbercincumferenceleft==1)
							scoreutils.Circumferenceleft1=ISP.toString();
						if(numbercincumferenceleft==2)
							scoreutils.Circumferenceleft2=ISP.toString();
						if(numbercincumferenceleft==3)
							scoreutils.Circumferenceleft3=ISP.toString();
						if(numbercincumferenceleft==4)
							scoreutils.Circumferenceleft4=ISP.toString();
						currentState='MeasureLeftCircunference';
						lbllasmeasurement.text=angledescription1+" Circumference "+numbercincumferenceleft+"="+ISP.toString();
						numbercincumferenceleft++;
						btnRecordLeftTine.label="Measure "+angledescription1+" Circumference "+numbercincumferenceleft;
						
					}else{
						if(grade=='0')
						{
							ISP=Number(myangleoptions[7+2*cont].attribute("A"))*ldistance+Number(myangleoptions[7+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[13+2*cont].attribute("A"))*ldistance+Number(myangleoptions[13+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						log+="\n\r |CR"+numbercincumferenceleft+".V"+angledescription1+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(cont==0) cont++;
						if(numbercincumferenceleft==1)
							scoreutils.Circumferenceleft1=ISP.toString();
						if(numbercincumferenceleft==2)
							scoreutils.Circumferenceleft2=ISP.toString();
						if(numbercincumferenceleft==3)
							scoreutils.Circumferenceleft3=ISP.toString();
						if(numbercincumferenceleft==4)
							scoreutils.Circumferenceleft4=ISP.toString();
						currentState='MeasureRigthCircumference'
						lbllasmeasurement.text=angledescription1+" Circumference "+numbercincumferenceleft+"="+ISP.toString();
						btnRecordLeftTine.label="Measure "+angledescription2+" Circumference 1";
						numbercincumferenceleft=1;
						cont=0;
					}
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}	
			}
			
			/////////////Circumference  points Rigth//////////////////
			private var numbercincumferencerigth:int=1;
			
			protected function MeasureRigthCircumference_clickHandler(event:MouseEvent):void
			{
				currentState='RecordRigthCircumference';
				txtTypicalLeftRecordLeftTine.text=cmbletftypical.selectedItem;
				txtTypicalRigthRecordLeftTine.text=cmbrigthtypical.selectedItem;
				btnRecordLeftTine.label="Record "+angledescription2+" Circumference "+numbercincumferencerigth;
				usermirrortypical.visible=true;
				for(var i:int=0; i<circumferenceleft.length;i++){
					if(numbercincumferencerigth==circumferenceleft.getItemAt(i)) usermirrortypical.visible=false;	
				}
				if(grade!="0")imagezoomscoring.source="Image/CRCFRN_66.jpg";
				else{imagezoomscoring.source="Image/CRCFRN_0.jpg";}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			
			protected function RecordRigthCircumference_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}	
					}
					//distance=distance/72;
					log+="\n\r |CR"+numbercincumferencerigth+".M"+angledescription2+"="+distance+"\n\r";
					var ISP:Number;
					var ldistance:Number=(3.14)*(distance)/(inchvalue);
					log+="\n\r |CR"+numbercincumferencerigth+""+angledescription2+"="+ldistance+"\n\r";
					if(numbercincumferencerigth<4){
						if(grade=='0')
						{
							
							ISP=Number(myangleoptions[8+2*cont].attribute("A"))*ldistance+Number(myangleoptions[8+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
							trace("entre 0");
						}else{
							
							ISP=Number(myangleoptions[14+2*cont].attribute("A"))*ldistance+Number(myangleoptions[14+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						log+="\n\r |CR"+numbercincumferencerigth+".V"+angledescription2+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(cont==0)cont++;
						if(numbercincumferencerigth==1){
							scoreutils.Circumferencerigth1=ISP.toString();
							if(scoreutils.Circumferenceleft1=="1") scoreutils.Circumferenceleft1=scoreutils.Circumferencerigth1;
						}	
						if(numbercincumferencerigth==2){
							scoreutils.Circumferencerigth2=ISP.toString();
							if(scoreutils.Circumferenceleft2=="1") scoreutils.Circumferenceleft2=scoreutils.Circumferencerigth2;
						}	
						if(numbercincumferencerigth==3){
							scoreutils.Circumferencerigth3=ISP.toString();
							if(scoreutils.Circumferenceleft3=="1") scoreutils.Circumferenceleft3=scoreutils.Circumferencerigth3;
						}	
						if(numbercincumferencerigth==4){
							scoreutils.Circumferencerigth4=ISP.toString();
							if(scoreutils.Circumferenceleft4=="1") scoreutils.Circumferenceleft4=scoreutils.Circumferencerigth4;
						}	
						
						currentState='MeasureRigthCircumference';
						lbllasmeasurement.text=angledescription2+" Circumference "+numbercincumferencerigth+"="+ISP.toString();
						numbercincumferencerigth++;
						btnRecordLeftTine.label="Measure "+angledescription2+" Circumference "+numbercincumferencerigth;
						
					}else{
						trace("angulo a medir"+grade);
						if(grade=="0")
						{
							
							ISP=Number(myangleoptions[8+2*cont].attribute("A"))*ldistance+Number(myangleoptions[8+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
							trace("entre 0");
						}else{
							
							ISP=Number(myangleoptions[14+2*cont].attribute("A"))*ldistance+Number(myangleoptions[14+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
							trace("entre y no es 0");
						}
						log+="\n\r |CR"+numbercincumferencerigth+".V"+angledescription2+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(cont==0)cont++;
						
						if(numbercincumferencerigth==1){
							scoreutils.Circumferencerigth1=ISP.toString();
							if(scoreutils.Circumferenceleft1=="1") scoreutils.Circumferenceleft1=scoreutils.Circumferencerigth1;
						}	
						if(numbercincumferencerigth==2){
							scoreutils.Circumferencerigth2=ISP.toString();
							if(scoreutils.Circumferenceleft2=="1") scoreutils.Circumferenceleft2=scoreutils.Circumferencerigth2;
						}	
						if(numbercincumferencerigth==3){
							scoreutils.Circumferencerigth3=ISP.toString();
							if(scoreutils.Circumferenceleft3=="1") scoreutils.Circumferenceleft3=scoreutils.Circumferencerigth3;
						}	
						if(numbercincumferencerigth==4){
							scoreutils.Circumferencerigth4=ISP.toString();
							if(scoreutils.Circumferenceleft4=="1") scoreutils.Circumferenceleft4=scoreutils.Circumferencerigth4;
						}	
						currentState='MeasureAnormalPoints';
						
						lbllasmeasurement.text=angledescription2+" Circumference "+numbercincumferencerigth+"="+ISP.toString();
						cmbabnormalpointsleft.selectedIndex=0;
						cmbabnormalpointsrigth.selectedIndex=0;
						numbercincumferencerigth=1;
						cont=0;
					}
					app.workpanel.panelprincipal.manageCropper.endDraw();
				} 	
			}
			
			////abnormal point
			protected function MeasureLeftAnormalTine_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLefAbnormalTine';				
				btnRecordLeftTine.label="Record "+angledescription1+" Abnormal Tine "+numberabnormalleft;
				if(grade!="0")imagezoomscoring.source="Image/ABNTIN_22.jpg";
				else{imagezoomscoring.source="Image/ABNTIN_0.jpg";}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			
			protected function RecordLefAbnormalTine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					//distance=distance/72;
					log+="\n\r |AB"+numberabnormalleft+".M"+angledescription1+"="+distance+"\n\r";
					var ISP:Number;
					var ldistance:Number=(distance)/(inchvalue);
					log+="\n\r |AB"+numberabnormalleft+""+angledescription1+"="+ldistance+"\n\r";
					if(numberabnormalleft<parseInt(cmbabnormalpointsleft.selectedItem)){
						if(grade=='0')
						{
							
							ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[21+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[21+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0)cont++;
						log+="\n\r |AB"+numberabnormalleft+".V"+angledescription1+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numberabnormalleft==1)
							scoreutils.Abnormalpointleft1=ISP.toString();
						if(numberabnormalleft==2)
							scoreutils.Abnormalpointleft2=ISP.toString();
						if(numberabnormalleft==3)
							scoreutils.Abnormalpointleft3=ISP.toString();
						if(numberabnormalleft==4)
							scoreutils.Abnormalpointleft4=ISP.toString();
						if(numberabnormalleft==5)
							scoreutils.Abnormalpointleft5=ISP.toString();
						if(numberabnormalleft==6)
							scoreutils.Abnormalpointleft6=ISP.toString();
						if(numberabnormalleft==7)
							scoreutils.Abnormalpointleft7=ISP.toString();
						if(numberabnormalleft==8)
							scoreutils.Abnormalpointleft8=ISP.toString();
						if(numberabnormalleft==9)
							scoreutils.Abnormalpointleft9=ISP.toString();
						if(numberabnormalleft==10)
							scoreutils.Abnormalpointleft10=ISP.toString();
						if(numberabnormalleft==11)
							scoreutils.Abnormalpointleft11=ISP.toString();
						if(numberabnormalleft==12)
							scoreutils.Abnormalpointleft12=ISP.toString();
						if(numberabnormalleft==13)
							scoreutils.Abnormalpointleft13=ISP.toString();
						if(numberabnormalleft==14)
							scoreutils.Abnormalpointleft14=ISP.toString();
						if(numberabnormalleft==15)
							scoreutils.Abnormalpointleft15=ISP.toString();
						if(numberabnormalleft==16)
							scoreutils.Abnormalpointleft16=ISP.toString();
						if(numberabnormalleft==17)
							scoreutils.Abnormalpointleft17=ISP.toString();
						if(numberabnormalleft==18)
							scoreutils.Abnormalpointleft18=ISP.toString();
						if(numberabnormalleft==19)
							scoreutils.Abnormalpointleft19=ISP.toString();
						if(numberabnormalleft==20)
							scoreutils.Abnormalpointleft20=ISP.toString();
						
						currentState='MeasureLeftAnormalTine';
						//lbllasmeasurement.text="Abnormal Left Line "+numberabnormalleft+"="+ISP.toString();
						if(grade!="0")imagezoomscoring.source="Image/ABNTIN_22.jpg";
						else{imagezoomscoring.source="Image/ABNTIN_0.jpg";}
						numberabnormalleft++;
						btnRecordLeftTine.label="Measure "+angledescription1+" Abnormal Tine "+numberabnormalleft;
						
					}else{
						if(grade=='0')
						{
							ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[21+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[21+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0)cont++;
						log+="\n\r |AB"+numberabnormalleft+".V"+angledescription1+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numberabnormalleft==1)
							scoreutils.Abnormalpointleft1=ISP.toString();
						if(numberabnormalleft==2)
							scoreutils.Abnormalpointleft2=ISP.toString();
						if(numberabnormalleft==3)
							scoreutils.Abnormalpointleft3=ISP.toString();
						if(numberabnormalleft==4)
							scoreutils.Abnormalpointleft4=ISP.toString();
						if(numberabnormalleft==5)
							scoreutils.Abnormalpointleft5=ISP.toString();
						if(numberabnormalleft==6)
							scoreutils.Abnormalpointleft6=ISP.toString();
						if(numberabnormalleft==7)
							scoreutils.Abnormalpointleft7=ISP.toString();
						if(numberabnormalleft==8)
							scoreutils.Abnormalpointleft8=ISP.toString();
						if(numberabnormalleft==9)
							scoreutils.Abnormalpointleft9=ISP.toString();
						if(numberabnormalleft==10)
							scoreutils.Abnormalpointleft10=ISP.toString();
						if(numberabnormalleft==11)
							scoreutils.Abnormalpointleft11=ISP.toString();
						if(numberabnormalleft==12)
							scoreutils.Abnormalpointleft12=ISP.toString();
						if(numberabnormalleft==13)
							scoreutils.Abnormalpointleft13=ISP.toString();
						if(numberabnormalleft==14)
							scoreutils.Abnormalpointleft14=ISP.toString();
						if(numberabnormalleft==15)
							scoreutils.Abnormalpointleft15=ISP.toString();
						if(numberabnormalleft==16)
							scoreutils.Abnormalpointleft16=ISP.toString();
						if(numberabnormalleft==17)
							scoreutils.Abnormalpointleft17=ISP.toString();
						if(numberabnormalleft==18)
							scoreutils.Abnormalpointleft18=ISP.toString();
						if(numberabnormalleft==19)
							scoreutils.Abnormalpointleft19=ISP.toString();
						if(numberabnormalleft==20)
							scoreutils.Abnormalpointleft20=ISP.toString();
						
						if(parseInt(cmbabnormalpointsrigth.selectedItem)==0) currentState='CompleteScoringfinal';
						else{ currentState='MeasureRigthAnormalTine'; btnRecordLeftTine.label="Measure "+angledescription2+" Abnormal Tine 1";  }
						
						//lbllasmeasurement.text="Abnormal Left Line "+numberabnormalleft+"="+ISP.toString();
						numberabnormalleft=1;
						cont=0;
					}
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}
			}
			
			protected function MeasureRigthAnormalTine_clickHandler(event:MouseEvent):void
			{
				var app:airbs=this.parentApplication as airbs;
				currentState='RecordRigthAbnormalTine';
				if(grade!="0")imagezoomscoring.source="Image/ABNTIN_22.jpg";
				else{imagezoomscoring.source="Image/ABNTIN_0.jpg";}
				btnRecordLeftTine.label="Record "+angledescription2+" Abnormal Tine "+numberabnormalright;
				
				app.workpanel.panelprincipal.manageCropper.beginDraw();
				
			}
			
			protected function RecordRigthAbnormalTine_clickHandler(event:MouseEvent):void
			{
				var distance:Number=0;
				var app:airbs=this.parentApplication as airbs;
				var arraypoints:Array=app.workpanel.panelprincipal.manageCropper.getPoints();
				if(arraypoints.length>1){
					var medida:Number=0;
					var x0:Number=0;
					var y0:Number=0;
					
					for(var i:int=0;i<arraypoints.length;i++){
						trace(arraypoints[i].x);
						trace(arraypoints[i].y);
						if(i==0){
							x0=Number(arraypoints[i].x);
							y0=Number(arraypoints[i].y);
							
						}else{
							
							distance=distance+Math.sqrt(Math.pow(arraypoints[i].x-x0,2)+Math.pow(arraypoints[i].y-y0,2));
							x0=arraypoints[i].x;
							y0=arraypoints[i].y
						}
						
						
					}
					log+="\n\r |AB"+numberabnormalright+".M"+angledescription2+"="+distance+"\n\r";
					//distance=distance/72;	
					var ISP:Number;
					var ldistance:Number=(distance)/(inchvalue);
					log+="\n\r |AB"+numberabnormalright+""+angledescription2+"="+ldistance+"\n\r";
					if(numberabnormalright<parseInt(cmbabnormalpointsrigth.selectedItem)){
						if(grade=='0')
						{
							
							ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[22+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[22+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0)cont++;
						log+="\n\r |AB"+numberabnormalright+".V"+angledescription2+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numberabnormalright==1)
							scoreutils.Abnormalpointrigth1=ISP.toString();
						if(numberabnormalright==2)
							scoreutils.Abnormalpointrigth2=ISP.toString();
						if(numberabnormalright==3)
							scoreutils.Abnormalpointrigth3=ISP.toString();
						if(numberabnormalright==4)
							scoreutils.Abnormalpointrigth4=ISP.toString();
						if(numberabnormalright==5)
							scoreutils.Abnormalpointrigth5=ISP.toString();
						if(numberabnormalright==6)
							scoreutils.Abnormalpointrigth6=ISP.toString();
						if(numberabnormalright==7)
							scoreutils.Abnormalpointrigth7=ISP.toString();
						if(numberabnormalright==8)
							scoreutils.Abnormalpointrigth8=ISP.toString();
						if(numberabnormalright==9)
							scoreutils.Abnormalpointrigth9=ISP.toString();
						if(numberabnormalright==10)
							scoreutils.Abnormalpointrigth10=ISP.toString();
						if(numberabnormalright==11)
							scoreutils.Abnormalpointrigth11=ISP.toString();
						if(numberabnormalright==12)
							scoreutils.Abnormalpointrigth12=ISP.toString();
						if(numberabnormalright==13)
							scoreutils.Abnormalpointrigth13=ISP.toString();
						if(numberabnormalright==14)
							scoreutils.Abnormalpointrigth14=ISP.toString();
						if(numberabnormalright==15)
							scoreutils.Abnormalpointrigth15=ISP.toString();
						if(numberabnormalright==16)
							scoreutils.Abnormalpointrigth16=ISP.toString();
						if(numberabnormalright==17)
							scoreutils.Abnormalpointrigth17=ISP.toString();
						if(numberabnormalright==18)
							scoreutils.Abnormalpointrigth18=ISP.toString();
						if(numberabnormalright==19)
							scoreutils.Abnormalpointrigth19=ISP.toString();
						if(numberabnormalright==20)
							scoreutils.Abnormalpointrigth20=ISP.toString();
						
						currentState='MeasureRigthAnormalTine';
						//lbllasmeasurement.text="Abnormal Rigth Tine "+numberabnormalright+"="+ISP.toString();
						numberabnormalright++;
						btnRecordLeftTine.label="Measure "+angledescription2+" Abnormal Tine "+numberabnormalright;
						
					}else{
						if(grade=='0')
						{
							
							ISP=Number(myangleoptions[15+cont].attribute("A"))*ldistance+Number(myangleoptions[15+cont].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}else{
							
							ISP=Number(myangleoptions[22+(2*cont)].attribute("A"))*ldistance+Number(myangleoptions[22+(2*cont)].attribute("B"));
							if(cont!=0 && cont<4) cont++;
						}
						if(cont==0) cont++;
						log+="\n\r |AB"+numberabnormalright+".V"+angledescription2+"="+ISP+"\n\r";
						ISP=scoreutils.roundDecimals(ISP,2);
						if(numberabnormalright==1)
							scoreutils.Abnormalpointrigth1=ISP.toString();
						if(numberabnormalright==2)
							scoreutils.Abnormalpointrigth2=ISP.toString();
						if(numberabnormalright==3)
							scoreutils.Abnormalpointrigth3=ISP.toString();
						if(numberabnormalright==4)
							scoreutils.Abnormalpointrigth4=ISP.toString();
						if(numberabnormalright==5)
							scoreutils.Abnormalpointrigth5=ISP.toString();
						if(numberabnormalright==6)
							scoreutils.Abnormalpointrigth6=ISP.toString();
						if(numberabnormalright==7)
							scoreutils.Abnormalpointrigth7=ISP.toString();
						if(numberabnormalright==8)
							scoreutils.Abnormalpointrigth8=ISP.toString();
						if(numberabnormalright==9)
							scoreutils.Abnormalpointrigth9=ISP.toString();
						if(numberabnormalright==10)
							scoreutils.Abnormalpointrigth10=ISP.toString();
						if(numberabnormalright==11)
							scoreutils.Abnormalpointrigth11=ISP.toString();
						if(numberabnormalright==12)
							scoreutils.Abnormalpointrigth12=ISP.toString();
						if(numberabnormalright==13)
							scoreutils.Abnormalpointrigth13=ISP.toString();
						if(numberabnormalright==14)
							scoreutils.Abnormalpointrigth14=ISP.toString();
						if(numberabnormalright==15)
							scoreutils.Abnormalpointrigth15=ISP.toString();
						if(numberabnormalright==16)
							scoreutils.Abnormalpointrigth16=ISP.toString();
						if(numberabnormalright==17)
							scoreutils.Abnormalpointrigth17=ISP.toString();
						if(numberabnormalright==18)
							scoreutils.Abnormalpointrigth18=ISP.toString();
						if(numberabnormalright==19)
							scoreutils.Abnormalpointrigth19=ISP.toString();
						if(numberabnormalright==20)
							scoreutils.Abnormalpointrigth20=ISP.toString();
						currentState='CompleteScoringfinal'
						lbllasmeasurement.text="Abnormal "+angledescription2+" Tine "+numberabnormalright+"="+ISP.toString();	
						numberabnormalright=1;
						cont=0;
					}
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}	
				
			}
			
			protected function RecordLeftTineLineMirror_clickHandler(event:MouseEvent):void
			{
				
				if(numbertypicalleft<parseInt(cmbletftypical.selectedItem)-1){
					cont++;
					vectorleft.addItem(numbertypicalleft);
					if(numbertypicalleft==1)
						scoreutils.Typicalpointleft1="1";
					if(numbertypicalleft==2)
						scoreutils.Typicalpointleft2="1";
					if(numbertypicalleft==3)
						scoreutils.Typicalpointleft3="1";
					if(numbertypicalleft==4)
						scoreutils.Typicalpointleft4="1";
					if(numbertypicalleft==5)
						scoreutils.Typicalpointleft5="1";
					if(numbertypicalleft==6)
						scoreutils.Typicalpointleft6="1";
					if(numbertypicalleft==7)
						scoreutils.Typicalpointleft7="1";
					if(numbertypicalleft==8)
						scoreutils.Typicalpointleft8="1";
					if(numbertypicalleft==9)
						scoreutils.Typicalpointleft9="1";
					if(numbertypicalleft==10)
						scoreutils.Typicalpointleft10="1";
					
					currentState='MeasureLeftTine';
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+numbertypicalleft+"= To be Determinated";
					numbertypicalleft++;
					btnRecordLeftTine.label="Measure "+angledescription1+" Tine "+numbertypicalleft;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}else{
					vectorleft.addItem(numbertypicalleft);
					if(numbertypicalleft==1)
						scoreutils.Typicalpointleft1="1";
					if(numbertypicalleft==2)
						scoreutils.Typicalpointleft2="1";
					if(numbertypicalleft==3)
						scoreutils.Typicalpointleft3="1";
					if(numbertypicalleft==4)
						scoreutils.Typicalpointleft4="1";
					if(numbertypicalleft==5)
						scoreutils.Typicalpointleft5="1";
					if(numbertypicalleft==6)
						scoreutils.Typicalpointleft6="1";
					if(numbertypicalleft==7)
						scoreutils.Typicalpointleft7="1";
					if(numbertypicalleft==8)
						scoreutils.Typicalpointleft8="1";
					if(numbertypicalleft==9)
						scoreutils.Typicalpointleft9="1";
					if(numbertypicalleft==10)
						scoreutils.Typicalpointleft10="1";
					cont++;
					currentState='MeasureRigthTine';
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+numbertypicalleft+"= To be Determinated";
					numbertypicalleft=1;
					cont=0;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}
				
				
			}
			
			
			protected function RecordRigthTineLineMirror_clickHandler(event:MouseEvent):void
			{
				
				if(numbertypicalrigth<parseInt(cmbrigthtypical.selectedItem)-1){
					cont++;
					if(numbertypicalrigth==1){
						scoreutils.Typicalpointrigth1="0";
						if(scoreutils.Typicalpointleft1!="1"){
							scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
						}else{
							scoreutils.Typicalpointleft1='0';
						}
						
					}	
					if(numbertypicalrigth==2){
						scoreutils.Typicalpointrigth2="0";
						if(scoreutils.Typicalpointleft2!="1"){
							scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
						}else{
							scoreutils.Typicalpointleft2='0';
						}
						
					}	
					if(numbertypicalrigth==3){
						scoreutils.Typicalpointrigth3="0";
						if(scoreutils.Typicalpointleft3!="1"){
							scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
						}else{
							scoreutils.Typicalpointleft3='0';
						}
						
					}	
					if(numbertypicalrigth==4){
						scoreutils.Typicalpointrigth4="0";
						if(scoreutils.Typicalpointleft4!="1"){
							scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
						}else{
							scoreutils.Typicalpointleft4='0';
						}
						
					}	
					if(numbertypicalrigth==5){
						scoreutils.Typicalpointrigth5="0";
						if(scoreutils.Typicalpointleft5!="1"){
							scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
						}else{
							scoreutils.Typicalpointleft5='0';
						}
						
					}	
					if(numbertypicalrigth==6){
						scoreutils.Typicalpointrigth6="0";
						if(scoreutils.Typicalpointleft6!="1"){
							scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
						}else{
							scoreutils.Typicalpointleft6='0';
						}
						
					}	
					if(numbertypicalrigth==7){
						scoreutils.Typicalpointrigth7="0";
						if(scoreutils.Typicalpointleft7!="1"){
							scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
						}else{
							scoreutils.Typicalpointleft7='0';
						}
						
					}	
					if(numbertypicalrigth==8){
						scoreutils.Typicalpointrigth8="0";
						if(scoreutils.Typicalpointleft8!="1"){
							scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
						}else{
							scoreutils.Typicalpointleft8='0';
						}
						
					}	
					if(numbertypicalrigth==9){
						scoreutils.Typicalpointrigth9="0";
						if(scoreutils.Typicalpointleft9!="1"){
							scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
						}else{
							scoreutils.Typicalpointleft9='0';
						}
						
					}	
					if(numbertypicalrigth==10){
						scoreutils.Typicalpointrigth10="0";
						if(scoreutils.Typicalpointleft10!="1"){
							scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
						}else{
							scoreutils.Typicalpointleft10='0';
						}
						
					}	
					currentState='MeasureRigthTine';
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+numbertypicalrigth+"=To be Determinated";
					numbertypicalrigth++;
					btnRecordLeftTine.label="Measure "+angledescription2+" Tine "+numbertypicalrigth;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
					
				}else{
					
					cont++;
					if(numbertypicalrigth==1){
						scoreutils.Typicalpointrigth1="0";
						if(scoreutils.Typicalpointleft1!="1"){
							scoreutils.Typicalpointrigth1=scoreutils.Typicalpointleft1;
						}else{
							scoreutils.Typicalpointleft1='0';
						}
						
					}	
					if(numbertypicalrigth==2){
						scoreutils.Typicalpointrigth2="0";
						if(scoreutils.Typicalpointleft2!="1"){
							scoreutils.Typicalpointrigth2=scoreutils.Typicalpointleft2;
						}else{
							scoreutils.Typicalpointleft2='0';
						}
						
					}	
					if(numbertypicalrigth==3){
						scoreutils.Typicalpointrigth3="0";
						if(scoreutils.Typicalpointleft3!="1"){
							scoreutils.Typicalpointrigth3=scoreutils.Typicalpointleft3;
						}else{
							scoreutils.Typicalpointleft3='0';
						}
						
					}	
					if(numbertypicalrigth==4){
						scoreutils.Typicalpointrigth4="0";
						if(scoreutils.Typicalpointleft4!="1"){
							scoreutils.Typicalpointrigth4=scoreutils.Typicalpointleft4;
						}else{
							scoreutils.Typicalpointleft4='0';
						}
						
					}	
					if(numbertypicalrigth==5){
						scoreutils.Typicalpointrigth5="0";
						if(scoreutils.Typicalpointleft5!="1"){
							scoreutils.Typicalpointrigth5=scoreutils.Typicalpointleft5;
						}else{
							scoreutils.Typicalpointleft5='0';
						}
						
					}	
					if(numbertypicalrigth==6){
						scoreutils.Typicalpointrigth6="0";
						if(scoreutils.Typicalpointleft6!="1"){
							scoreutils.Typicalpointrigth6=scoreutils.Typicalpointleft6;
						}else{
							scoreutils.Typicalpointleft6='0';
						}
						
					}	
					if(numbertypicalrigth==7){
						scoreutils.Typicalpointrigth7="0";
						if(scoreutils.Typicalpointleft7!="1"){
							scoreutils.Typicalpointrigth7=scoreutils.Typicalpointleft7;
						}else{
							scoreutils.Typicalpointleft7='0';
						}
						
					}	
					if(numbertypicalrigth==8){
						scoreutils.Typicalpointrigth8="0";
						if(scoreutils.Typicalpointleft8!="1"){
							scoreutils.Typicalpointrigth8=scoreutils.Typicalpointleft8;
						}else{
							scoreutils.Typicalpointleft8='0';
						}
						
					}	
					if(numbertypicalrigth==9){
						scoreutils.Typicalpointrigth9="0";
						if(scoreutils.Typicalpointleft9!="1"){
							scoreutils.Typicalpointrigth9=scoreutils.Typicalpointleft9;
						}else{
							scoreutils.Typicalpointleft9='0';
						}
						
					}	
					if(numbertypicalrigth==10){
						scoreutils.Typicalpointrigth10="0";
						if(scoreutils.Typicalpointleft10!="1"){
							scoreutils.Typicalpointrigth10=scoreutils.Typicalpointleft10;
						}else{
							scoreutils.Typicalpointleft10='0';
						}
						
					}	
					currentState='MeasureLeftCircunference';
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+numbertypicalrigth+"=To be Determinated";
					numbertypicalrigth=1;
					cont=0;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}	
			}
			protected function RecordLeftCircunferenceMirror_clickHandler(event:MouseEvent):void
			{
				if(numbercincumferenceleft<4){
					cont++;
					circumferenceleft.addItem(numbercincumferenceleft);
					if(numbercincumferenceleft==1)
						scoreutils.Circumferenceleft1="1";
					if(numbercincumferenceleft==2)
						scoreutils.Circumferenceleft2="1";
					if(numbercincumferenceleft==3)
						scoreutils.Circumferenceleft3="1";
					if(numbercincumferenceleft==4)
						scoreutils.Circumferenceleft4="1";
					currentState='MeasureLeftCircunference';
					lbllasmeasurement.text=angledescription1+" Circumference "+numbercincumferenceleft+"=To be Determinated";
					numbercincumferenceleft++;
					btnRecordLeftTine.label="Measure "+angledescription1+" Circumference "+numbercincumferenceleft;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}else{
					cont++;
					circumferenceleft.addItem(numbercincumferenceleft);
					if(numbercincumferenceleft==1)
						scoreutils.Circumferenceleft1="1";
					if(numbercincumferenceleft==2)
						scoreutils.Circumferenceleft2="1";
					if(numbercincumferenceleft==3)
						scoreutils.Circumferenceleft3="1";
					if(numbercincumferenceleft==4)
						scoreutils.Circumferenceleft4="1";
					currentState='MeasureRigthCircumference'
					lbllasmeasurement.text=angledescription1+" Circumference "+numbercincumferenceleft+"=To be Determinated";
					numbercincumferenceleft=1;
					cont=0;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}	
			}
			
			protected function RecordRigthCircumferenceMirror_clickHandler(event:MouseEvent):void
			{
				var distance:Number=12;
				if(numbercincumferencerigth<4){
					cont++;
					if(numbercincumferencerigth==1){
						scoreutils.Circumferencerigth1="0";
						if(scoreutils.Circumferenceleft1!="1") scoreutils.Circumferencerigth1=scoreutils.Circumferenceleft1;
						else scoreutils.Circumferenceleft1="0";
					}	
					if(numbercincumferencerigth==2){
						scoreutils.Circumferencerigth2="0";
						if(scoreutils.Circumferenceleft2!="1") scoreutils.Circumferencerigth2=scoreutils.Circumferenceleft2;
						else scoreutils.Circumferenceleft2="0";
					}	
					if(numbercincumferencerigth==3){
						scoreutils.Circumferencerigth3="0";
						if(scoreutils.Circumferenceleft3!="1") scoreutils.Circumferencerigth3=scoreutils.Circumferenceleft3;
						else scoreutils.Circumferenceleft3="0";
					}	
					if(numbercincumferencerigth==4){
						scoreutils.Circumferencerigth4="0";
						if(scoreutils.Circumferenceleft4!="1") scoreutils.Circumferencerigth4=scoreutils.Circumferenceleft4;
						else scoreutils.Circumferenceleft4="0";
					}	
					
					currentState='MeasureRigthCircumference';
					lbllasmeasurement.text=angledescription2+" Circumference "+numbercincumferencerigth+"=To be Determinated";
					numbercincumferencerigth++;
					btnRecordLeftTine.label="Measure "+angledescription2+" Circumference "+numbercincumferencerigth;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
					
				}else{
					cont++;
					if(numbercincumferencerigth==1){
						scoreutils.Circumferencerigth1="0";
						if(scoreutils.Circumferenceleft1!="1") scoreutils.Circumferencerigth1=scoreutils.Circumferenceleft1;
						else scoreutils.Circumferenceleft1="0";
					}	
					if(numbercincumferencerigth==2){
						scoreutils.Circumferencerigth2="0";
						if(scoreutils.Circumferenceleft2!="1") scoreutils.Circumferencerigth2=scoreutils.Circumferenceleft2;
						else scoreutils.Circumferenceleft2="0";
					}	
					if(numbercincumferencerigth==3){
						scoreutils.Circumferencerigth3="0";
						if(scoreutils.Circumferenceleft3!="1") scoreutils.Circumferencerigth3=scoreutils.Circumferenceleft3;
						else scoreutils.Circumferenceleft3="0";
					}	
					if(numbercincumferencerigth==4){
						scoreutils.Circumferencerigth4="0";
						if(scoreutils.Circumferenceleft4!="1") scoreutils.Circumferencerigth4=scoreutils.Circumferenceleft4;
						else scoreutils.Circumferenceleft4="0";
					}	
					currentState='MeasureAnormalPoints'
					lbllasmeasurement.text=angledescription2+" Circumference "+numbercincumferencerigth+"=To be Determinated";
					numbercincumferencerigth=1;
					cont=0;
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}
				
			}	
			protected function MeasureLeftTineBack_clickHandler(event:MouseEvent):void
			{
				if(numbertypicalleft==1){
					currentState='RecordRigthMainBeam';
					btnRecordLeftTine.label="Record "+angledescription2+" Main Beam";
				}else{
					numbertypicalleft--;
					cont--;
					currentState='RecordLeftTineLine';
					usermirrortypical.visible=true;
					if(numbertypicalleft>parseInt(cmbrigthtypical.selectedItem))  usermirrortypical.visible=false;
					btnRecordLeftTine.label="Record "+angledescription1+" Tine "+numbertypicalleft;
				}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function RecordLeftTineLineBack_clickHandler(event:MouseEvent):void
			{
				
				currentState='MeasureLeftTine';
				if((numbertypicalleft-1)==1)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft1;
				else if((numbertypicalleft-1)==2)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft2;
				else if((numbertypicalleft-1)==3)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft3;
				else if((numbertypicalleft-1)==4)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft4;
				else if((numbertypicalleft-1)==5)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft5;
				else if((numbertypicalleft-1)==6)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft6;
				else if((numbertypicalleft-1)==7)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft7;
				else if((numbertypicalleft-1)==8)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft8;
				else if((numbertypicalleft-1)==9)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft9;
				else if((numbertypicalleft-1)==10)
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(numbertypicalleft-1)+"="+scoreutils.Typicalpointleft10;
				else lbllasmeasurement.text=angledescription2+" Main beam "+scoreutils.mainbeamrigth;
				btnRecordLeftTine.label="Measure "+angledescription1+" Tine "+numbertypicalleft;
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
			}
			
			protected function MeasureRigthTineBack_clickHandler(event:MouseEvent):void
			{
				if(numbertypicalrigth==1){
					if(parseInt(cmbletftypical.selectedItem)<=1){  currentState='RecordRigthMainBeam';  btnRecordLeftTine.label="Record "+angledescription2+" Main Beam ";}
					else{
						numbertypicalleft=parseInt(cmbletftypical.selectedItem)-1;
						currentState='RecordLeftTineLine';
						usermirrortypical.visible=true;
						btnRecordLeftTine.label="Record "+angledescription1+" Tine "+numbertypicalleft;
						if(numbertypicalleft>parseInt(cmbrigthtypical.selectedItem))  usermirrortypical.visible=false;
						var app:airbs=this.parentApplication as airbs;
						app.workpanel.panelprincipal.manageCropper.beginDraw();
					}
				}else{
					numbertypicalrigth--;
					cont--;
					currentState='RecordRigthTineLine';
					btnRecordLeftTine.label="Record "+angledescription2+" Tine "+numbertypicalrigth;
					usermirrortypical.visible=true;
					for(var i:int=0;i<vectorleft.length;i++){
						if(numbertypicalrigth==vectorleft.getItemAt(i)) usermirrortypical.visible=false;
					}
				}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function RecordRigthTineLineBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureRigthTine';
				if((numbertypicalrigth-1)==1)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth1;
				else if((numbertypicalrigth-1)==2)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth2;
				else if((numbertypicalrigth-1)==3)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth3;
				else if((numbertypicalrigth-1)==4)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth4;
				else if((numbertypicalrigth-1)==5)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth5;
				else if((numbertypicalrigth-1)==6)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth6;
				else if((numbertypicalrigth-1)==7)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth7;
				else if((numbertypicalrigth-1)==8)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth8;
				else if((numbertypicalrigth-1)==9)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth9;
				else if((numbertypicalrigth-1)==10)
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+(numbertypicalrigth-1)+"="+scoreutils.Typicalpointrigth10;
				else {
					var val:String;
					if(parseInt(cmbletftypical.selectedItem)-1==1) val=scoreutils.Typicalpointleft1;
					else if(parseInt(cmbletftypical.selectedItem)-1==2) val=scoreutils.Typicalpointleft2;
					else if(parseInt(cmbletftypical.selectedItem)-1==3) val=scoreutils.Typicalpointleft3;
					else if(parseInt(cmbletftypical.selectedItem)-1==4) val=scoreutils.Typicalpointleft4;
					else if(parseInt(cmbletftypical.selectedItem)-1==5) val=scoreutils.Typicalpointleft5;
					else if(parseInt(cmbletftypical.selectedItem)-1==6) val=scoreutils.Typicalpointleft6;
					else if(parseInt(cmbletftypical.selectedItem)-1==7) val=scoreutils.Typicalpointleft7;
					else if(parseInt(cmbletftypical.selectedItem)-1==8) val=scoreutils.Typicalpointleft8;
					else if(parseInt(cmbletftypical.selectedItem)-1==9) val=scoreutils.Typicalpointleft9;
					else if(parseInt(cmbletftypical.selectedItem)-1==10) val=scoreutils.Typicalpointleft10;
					
					lbllasmeasurement.text="Typical "+angledescription1+" Tine "+(parseInt(cmbletftypical.selectedItem)-1)+"="+val;
				}
				btnRecordLeftTine.label="Measure "+angledescription2+" Tine "+numbertypicalrigth;
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
				
			}
			
			protected function MeasureLeftCircunferenceBack_clickHandler(event:MouseEvent):void
			{
				
				if(numbercincumferenceleft==1){
					
					if(parseInt(cmbletftypical.selectedItem)<=1 && parseInt(cmbrigthtypical.selectedItem)<=1)  currentState='RecordRigthMainBeam';		
					else if(parseInt(cmbletftypical.selectedItem)<=1 && parseInt(cmbrigthtypical.selectedItem)>1){ currentState='RecordRigthTineLine'; numbertypicalrigth=parseInt(cmbrigthtypical.selectedItem)-1;  btnRecordLeftTine.label="Record "+angledescription2+" Tine "+numbertypicalrigth;   
						for(var i:int=0; i<vectorleft.length;i++){
							if(numbertypicalrigth==vectorleft.getItemAt(i)) usermirrortypical.visible=false;	
						}	
						
					}
					else if(parseInt(cmbletftypical.selectedItem)>1 && parseInt(cmbrigthtypical.selectedItem)<=1){ currentState='RecordLeftTineLine'; numbertypicalleft=parseInt(cmbletftypical.selectedItem)-1;  btnRecordLeftTine.label="Record "+angledescription1+" Tine "+numbertypicalleft;}
					else {currentState='RecordRigthTineLine'; numbertypicalrigth=parseInt(cmbrigthtypical.selectedItem)-1;  btnRecordLeftTine.label="Record "+angledescription2+" Tine "+numbertypicalrigth;}
					
				}else{
					numbercincumferenceleft--;
					cont--;
					currentState='RecordLeftCircunference';
					
					
					btnRecordLeftTine.label="Record "+angledescription1+" Circumference "+numbercincumferenceleft;
				}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function RecordLeftCircunferenceBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureLeftCircunference';
				if((numbercincumferenceleft-1)==1)
					lbllasmeasurement.text=angledescription1+" Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft1;
				else if((numbercincumferenceleft-1)==2)
					lbllasmeasurement.text=angledescription1+" Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft2;
				else if((numbercincumferenceleft-1)==3)
					lbllasmeasurement.text=angledescription1+" Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft3;
				else if((numbercincumferenceleft-1)==4)
					lbllasmeasurement.text=angledescription1+" Circumference "+(numbercincumferenceleft-1)+"="+scoreutils.Circumferenceleft4;
				else{
					var val:String;
					if(parseInt(cmbrigthtypical.selectedItem)==1) val=scoreutils.Typicalpointrigth1;
					else if(parseInt(cmbrigthtypical.selectedItem)==2) val=scoreutils.Typicalpointrigth2;
					else if(parseInt(cmbrigthtypical.selectedItem)==3) val=scoreutils.Typicalpointrigth3;
					else if(parseInt(cmbrigthtypical.selectedItem)==4) val=scoreutils.Typicalpointrigth4;
					else if(parseInt(cmbrigthtypical.selectedItem)==5) val=scoreutils.Typicalpointrigth5;
					else if(parseInt(cmbrigthtypical.selectedItem)==6) val=scoreutils.Typicalpointrigth6;
					else if(parseInt(cmbrigthtypical.selectedItem)==7) val=scoreutils.Typicalpointrigth7;
					else if(parseInt(cmbrigthtypical.selectedItem)==8) val=scoreutils.Typicalpointrigth8;
					else if(parseInt(cmbrigthtypical.selectedItem)==9) val=scoreutils.Typicalpointrigth9;
					else if(parseInt(cmbrigthtypical.selectedItem)==10) val=scoreutils.Typicalpointrigth10;
					lbllasmeasurement.text="Typical "+angledescription2+" Tine "+parseInt(cmbrigthtypical.selectedItem)+"="+val;
				}
				btnRecordLeftTine.label="Measure "+angledescription1+" Circunference "+numbercincumferenceleft;
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
			}
			
			protected function MeasureRigthCircumferenceBack_clickHandler(event:MouseEvent):void
			{
				if(numbercincumferencerigth==1){
					currentState='RecordLeftCircunference';
					numbercincumferenceleft=4;
					btnRecordLeftTine.label="Record "+angledescription1+" Circumference "+numbercincumferenceleft;
				}else{
					numbercincumferencerigth--;
					cont--;
					currentState='RecordRigthCircumference';
					usermirrortypical.visible=true;
					for(var i:int=0;i<circumferenceleft.length;i++){
						if(numbercincumferencerigth==circumferenceleft.getItemAt(i)) usermirrortypical.visible=false;
					}
					btnRecordLeftTine.label="Record "+angledescription2+" Circumference "+numbercincumferencerigth;
				}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function RecordRigthCircumferenceBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureRigthCircumference';
				if((numbercincumferencerigth-1)==1)
					lbllasmeasurement.text=angledescription2+" Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth1;
				else if((numbercincumferencerigth-1)==2)
					lbllasmeasurement.text=angledescription2+" Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth2;
				else if((numbercincumferencerigth-1)==3)
					lbllasmeasurement.text=angledescription2+" Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth3;
				else if((numbercincumferencerigth-1)==4)
					lbllasmeasurement.text=angledescription2+" Circumference "+(numbercincumferencerigth-1)+"="+scoreutils.Circumferencerigth4;
				else
					lbllasmeasurement.text=angledescription1+" Circumference 4="+scoreutils.Circumferenceleft4;
				
				btnRecordLeftTine.label="Measure "+angledescription2+" Circunference "+numbercincumferencerigth;
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
			}
			
			protected function MeasureAnormalPointsBack(event:MouseEvent):void
			{
				numbercincumferencerigth=4;
				currentState='RecordRigthCircumference';
				lbllasmeasurement.text=angledescription2+" Circumference 4"+"="+scoreutils.Circumferencerigth4;
				btnRecordLeftTine.label="Measure "+angledescription2+" Circunference "+numbercincumferencerigth;
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function MeasureLeftAnormalTineBack_clickHandler(event:MouseEvent):void
			{
				var app:airbs=this.parentApplication as airbs;		
				if(numberabnormalleft==1){
					currentState='MeasureAnormalPoints';
					btnRecordLeftTine.label="Measure Anormal Points";
					lbllasmeasurement.text=angledescription2+" Circumference 4 :"+scoreutils.Circumferencerigth4;
					app.workpanel.panelprincipal.manageCropper.endDraw();
				}else{
					numberabnormalleft--;
					cont--;
					currentState='RecordLefAbnormalTine';
					btnRecordLeftTine.label="Record "+angledescription1+" Abnormal Tine "+numberabnormalleft;
					
					app.workpanel.panelprincipal.manageCropper.beginDraw();
				}
				
			}
			
			protected function RecordLefAbnormalTineBack_clickHandler(event:MouseEvent):void
			{
				
				currentState='MeasureLeftAnormalTine';
				btnRecordLeftTine.label="Measure "+angledescription1+" Anormal Tine "+numberabnormalleft;
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
				
			}
			
			protected function MeasureRigthAnormalTineBack_clickHandler(event:MouseEvent):void
			{
				if(numberabnormalright==1){
					currentState='RecordLefAbnormalTine';
					numberabnormalleft=parseInt(cmbabnormalpointsleft.selectedItem);
					btnRecordLeftTine.label="Record "+angledescription1+" Abnormal Tine "+numberabnormalleft;
					
				}else{
					numberabnormalright--;
					cont--;
					currentState='RecordRigthAbnormalTine';
					btnRecordLeftTine.label="Record "+angledescription2+" Abnormal Tine "+numberabnormalright;
				}
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function RecordRigthAbnormalTineBack_clickHandler(event:MouseEvent):void
			{
				currentState='MeasureRigthAnormalTine';
				btnRecordLeftTine.label="Measure "+angledescription2+" Anormal Tine "+numberabnormalright;
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.panelprincipal.manageCropper.endDraw();
				
			}
			
			protected function CompleteScoringfinalBack_clickHandler(event:MouseEvent):void
			{
				var app:airbs=this.parentApplication as airbs;
				if(parseInt(cmbabnormalpointsrigth.selectedItem)==0){
					if(parseInt(cmbabnormalpointsleft.selectedItem)==0){
						currentState='MeasureAnormalPoints';
						btnRecordLeftTine.label="Measure "+angledescription1+" Anormal Tine";
						lbllasmeasurement.text="Measure "+angledescription2+" Circunference 4 "+scoreutils.Circumferencerigth4;
						app.workpanel.panelprincipal.manageCropper.endDraw();
					}else{
						numberabnormalleft=parseInt(cmbabnormalpointsleft.selectedItem);
						currentState='RecordLefAbnormalTine';
						btnRecordLeftTine.label="Record "+angledescription1+" Anormal Tine "+numberabnormalleft;
						app.workpanel.panelprincipal.manageCropper.beginDraw();
					}
					
				}else{
					numberabnormalright=parseInt(cmbabnormalpointsrigth.selectedItem);
					currentState='RecordRigthAbnormalTine';
					btnRecordLeftTine.label="Record "+angledescription2+" Anormal Tine "+numberabnormalright;
					app.workpanel.panelprincipal.manageCropper.beginDraw();
				}
			}
			protected function ViewInstructions_clickHandler(event:MouseEvent):void
			{
				var appDirectory:File = File.applicationDirectory;
				//var helpFile:File = appDirectory.resolvePath("pdf/Instructions.pdf");
				var helpFile:File = new File(File.applicationDirectory.url + "pdf/Instructions.pdf");
				//var helpFile:File = new File(File.applicationDirectory.url + "JavaScriptAPI.chm");
				trace(helpFile.nativePath);
				try
				{
					trace(helpFile);
					helpFile.openWithDefaultApplication();
					
					//filePath.text = helpFile.nativePath;
				}catch(e:Error){
					//filePath.text = e.message;
				}
			}
			
			protected function helpcircumference_clickHandler(event:MouseEvent):void
			{
				var appDirectory:File = File.applicationDirectory;
				//var helpFile:File = appDirectory.resolvePath("pdf/Instructions.pdf");
				var helpFile:File = new File(File.applicationDirectory.url + "pdf/Circumference.pdf");
				//var helpFile:File = new File(File.applicationDirectory.url + "JavaScriptAPI.chm");
				trace(helpFile.nativePath);
				try
				{
					trace(helpFile);
					helpFile.openWithDefaultApplication();
					trace("entre");
					//filePath.text = helpFile.nativePath;
				}catch(e:Error){
					//filePath.text = e.message;
					trace("hola");
				}
			}
			
			public function click_MeasureInsideSpread():void {
				currentState='RecorderInsideSpread';
				var app:airbs=this.parentApplication as airbs;
				
				if(grade!="0") imagebusckscorezoom.source="Image/INSSPR_22.jpg";
				else imagebusckscorezoom.source="Image/INSSPR_0.jpg";
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			public var adjustement:String;
			protected function CompleteScoring_clickHandler(event:MouseEvent):void
			{
				
				var app:airbs=this.parentApplication as airbs;
				adjustement=prefsXML.child("VelvetAdjustment").attribute("A").toString();
				
				try{
					
					saveAs("c:/tmp","logbuckscore.txt",log);
				}catch(errObject:Error){trace("no guardo");}
				
				app.workpanel.currentState='stateScoring';
				Alert.show("Is this deer in velvet", "Velvet Adjustement",
					Alert.YES | Alert.NO | Alert.CANCEL, this, app.workpanel.scoringpanel.alertListenerScoringFinal);
				
			}
			
			protected function ViewScoreSheet_clickHandler(event:MouseEvent):void
			{
				var app:airbs=this.parentApplication as airbs;
				app.workpanel.currentState='stateScoring';
				app.workpanel.scoringpanel.ViewScoreNoFinish_clickHandler();
				
			}
			
			protected function group1_addedToStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function MeasureRigthMainBeamBack_clickHandler(event:MouseEvent):void
			{
				currentState='RecordLeftMainBeamLine'; 
				btnRecordLeftTine.label="Record "+angledescription1+" Main Beam ";
				var app:airbs=this.parentApplication as airbs;
				
				app.workpanel.panelprincipal.manageCropper.beginDraw();
			}
			
			protected function NumberTypicalPointsBack_clickHandler(event:MouseEvent):void
			{
				if(grade!='90')
				{	currentState='RecorderInsideSpread';
					var app:airbs=this.parentApplication as airbs;
					app.workpanel.panelprincipal.manageCropper.beginDraw();
				}else currentState='RecorderInsideSpreadEstimate'; 
			}
			
			protected function eraselines_clickHandler(event:MouseEvent):void
			{
				var app:airbs=this.parentApplication as airbs; 
				app.workpanel.panelprincipal.manageCropper.erase();
				
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="scorephoto"/>
		<s:State name="positionphoto"/>
		<s:State name="referenceFeature"/>
		<s:State name="RecordEarWidth"/>
		<s:State name="RecordEyetoEyeWidth"/>
		<s:State name="MeasureInsideSpread"/>
		<s:State name="RecorderInsideSpread"/>
		<s:State name="RecordEyeballWidthFeature"/>
		<s:State name="NumberTypicalPoints"/>
		<s:State name="MeasureLeftMainBeam"/>
		<s:State name="RecordLeftMainBeamLine"/>
		<s:State name="MeasureRigthMainBeam"/>
		<s:State name="RecordRigthMainBeam"/>
		<s:State name="MeasureLeftTine"/>
		<s:State name="RecordLeftTineLine"/>
		<s:State name="MeasureRigthTine"/>
		<s:State name="RecordRigthTineLine"/>
		<s:State name="MeasureLeftCircunference"/>
		<s:State name="RecordLeftCircunference"/>
		<s:State name="MeasureRigthCircumference"/>
		<s:State name="RecordRigthCircumference"/>
		<s:State name="MeasureAnormalPoints"/>
		<s:State name="MeasureLeftAnormalTine"/>
		<s:State name="RecordLefAbnormalTine"/>
		<s:State name="MeasureRigthAnormalTine"/>
		<s:State name="RecordRigthAbnormalTine"/>
		<s:State name="CompleteScoringfinal"/>
		<s:State name="RecorderInsideSpreadEstimate"/>
	</s:states>
	
	<s:transitions>
		<s:Transition id="t1" autoReverse="true">
			<s:CrossFade
				target="{holder}" 
				duration="50" />
		</s:Transition>
	</s:transitions>
	
	<fx:Declarations>
		
		<mx:Zoom id="zoomProduct" zoomWidthTo="1.5" zoomHeightTo="1.5" zoomWidthFrom="1" zoomHeightFrom="1" originX="50" originY="30" />
		
		
		
	</fx:Declarations>
	
	
	
	
	
	<s:VGroup id="holder" width="100%" height="100%" gap="0">								
		<s:SkinnableContainer id="headpanelscore" width="100%" height="45" textAlign="left" skinClass="com.complexless.skins.spark.ToolbarSkin">
			<s:HGroup paddingLeft="6" paddingRight="6" width="100%" height="100%" verticalAlign="middle">
				<s:Label id="txtNamepaneltitle" width="100%" fontSize="20"
						 text=" Name"/>
				<s:Button label="Close" chromeColor="#8E0E0E" click="closebutton_buckscore()"
						  click.MeasureAnormalPoints="closebutton_buckscore3()"
						  click.NumberTypicalPoints="closebutton_buckscore2()"
						  alpha.scorephoto="9"/>
				<s:Button label="Back" chromeColor="#8E0E0E"
						  click.CompleteScoringfinal="CompleteScoringfinalBack_clickHandler(event)"
						  click.MeasureAnormalPoints="MeasureAnormalPointsBack(event)"
						  click.MeasureInsideSpread="BackMeasureInsideSpread_clickHandler(event)"
						  click.MeasureLeftAnormalTine="MeasureLeftAnormalTineBack_clickHandler(event)"
						  click.MeasureLeftCircunference="MeasureLeftCircunferenceBack_clickHandler(event)"
						  click.MeasureLeftMainBeam="currentState='NumberTypicalPoints'; numbertypicalleft=1; lbllasmeasurement.text='Inside Spread: '+ scoreutils.insidespread;"
						  click.MeasureLeftTine="MeasureLeftTineBack_clickHandler(event)"
						  click.MeasureRigthAnormalTine="MeasureRigthAnormalTineBack_clickHandler(event)"
						  click.MeasureRigthCircumference="MeasureRigthCircumferenceBack_clickHandler(event)"
						  click.MeasureRigthMainBeam="MeasureRigthMainBeamBack_clickHandler(event)"
						  click.MeasureRigthTine="MeasureRigthTineBack_clickHandler(event)"
						  click.NumberTypicalPoints="NumberTypicalPointsBack_clickHandler(event)"
						  click.positionphoto="button3_backeditphoto(event)"
						  click.RecordEarWidth="currentState='referenceFeature'; var app:airbs=this.parentApplication as airbs;  app.workpanel.panelprincipal.manageCropper.endDraw();"
						  click.RecorderInsideSpread="currentState='MeasureInsideSpread'; var app:airbs=this.parentApplication as airbs;  app.workpanel.panelprincipal.manageCropper.endDraw();"
						  click.RecorderInsideSpreadEstimate="BackMeasureInsideSpread_clickHandler(event)"
						  click.RecordEyeballWidthFeature="currentState='referenceFeature'; var app:airbs=this.parentApplication as airbs;  app.workpanel.panelprincipal.manageCropper.endDraw();"
						  click.RecordEyetoEyeWidth="currentState='referenceFeature'; var app:airbs=this.parentApplication as airbs;  app.workpanel.panelprincipal.manageCropper.endDraw();"
						  click.RecordLefAbnormalTine="RecordLefAbnormalTineBack_clickHandler(event)"
						  click.RecordLeftCircunference="RecordLeftCircunferenceBack_clickHandler(event)"
						  click.RecordLeftMainBeamLine="currentState='MeasureLeftMainBeam';  btnRecordLeftTine.label='Measure '+angledescription1+' Main Beam ';  var app:airbs=this.parentApplication as airbs;  app.workpanel.panelprincipal.manageCropper.endDraw(); "
						  click.RecordLeftTineLine="RecordLeftTineLineBack_clickHandler(event)"
						  click.RecordRigthAbnormalTine="RecordRigthAbnormalTineBack_clickHandler(event)"
						  click.RecordRigthCircumference="RecordRigthCircumferenceBack_clickHandler(event)"
						  click.RecordRigthMainBeam="currentState='MeasureRigthMainBeam'; lbllasmeasurement.text='Record '+angledescription2+' Main Beam:'+scoreutils.mainbeamleft;      btnRecordLeftTine.label='Measure '+angledescription2+' Main Beam ';    var app:airbs=this.parentApplication as airbs;  app.workpanel.panelprincipal.manageCropper.endDraw();"
						  click.RecordRigthTineLine="RecordRigthTineLineBack_clickHandler(event)"
						  click.referenceFeature="button3_referenceFeature(event)"
						  alpha.scorephoto="9" click.scorephoto="button3_backscorephoto(event)"/>
			</s:HGroup>
		</s:SkinnableContainer>
		<s:SkinnableContainer id="panelScoreSkin" width="100%" height="100%" skinClass="com.complexless.skins.spark.ContentCropperSkin2">
			<s:VGroup width="100%" height="100%" horizontalAlign="center"
					  paddingLeft="6" paddingRight="6"
					  height.MeasureLeftAnormalTine="668">
				
				<s:Label x="20"  y="20"  text="Score Deer" paddingTop="6"/>
				<s:VGroup includeIn="scorephoto">
					<s:Label text="State"/>
					<s:DropDownList id="cmbstate" width="150"/>
					<s:Label text="Deer Age"/>
					<s:DropDownList id="cmbage" width="150"/>
					
					<s:Group width="197" height="26">
						<s:Button x="97" y="1" label="Next"
								  click="scorephoto_clickHandler(event)"/>
					</s:Group>
					<mx:HRule width="200" height="0"/>
				</s:VGroup>
				<s:Label includeIn="positionphoto,referenceFeature" x="108" y="46"
						 text="Image Orientation"/>
				<s:Group includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureInsideSpread,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine,RecorderInsideSpread,RecorderInsideSpreadEstimate,positionphoto,referenceFeature"
						 width="100%" height="100%"
						 height.MeasureInsideSpread="130"
						 height.MeasureLeftAnormalTine="186"
						 height.RecordEarWidth="131"
						 height.RecorderInsideSpread="131"
						 height.RecordEyeballWidthFeature="131"
						 height.RecordEyetoEyeWidth="131">
					
					
					
					
					<s:VGroup includeIn="MeasureInsideSpread,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecorderInsideSpread,RecorderInsideSpreadEstimate" x="0" y="0" width="100%"
							  height="130" horizontalAlign="center"
							  textAlign="center" textAlignLast="center"
							  verticalAlign="middle">
						<s:Button id="tglearwidth" width="212" height="25"
								  label="Record Ear Width Feature" alpha="10" cornerRadius="10"
								  height.MeasureInsideSpread="25"
								  label.MeasureInsideSpread="Measure Inside Spread"
								  click.MeasureInsideSpread="click_MeasureInsideSpread(); "
								  height.RecordEarWidth="25"
								  click.RecordEarWidth="toggle_EarWidthHandler(event)"
								  label.RecorderInsideSpread="Record Inside Spread"
								  click.RecorderInsideSpread="toggle_RecorderInsideSpread(event)"
								  label.RecorderInsideSpreadEstimate="Estimate Inside Spread"
								  click.RecorderInsideSpreadEstimate="RecorderInsideSpreadEstimate_clickHandler(event)"
								  label.RecordEyeballWidthFeature="Record Eyeball Width Feature"
								  click.RecordEyeballWidthFeature="toggle_EarWidthHandler(event)"
								  height.RecordEyetoEyeWidth="25"
								  label.RecordEyetoEyeWidth="Record Eye to Eye Width"
								  click.RecordEyetoEyeWidth="toggle_EarWidthHandler(event)"/>
						<s:Button includeIn="RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecorderInsideSpread"
								  width="208" height="25" label="Erase Lines" alpha="10"
								  click="eraselines_clickHandler(event)" cornerRadius="10"
								  height.RecordEarWidth="25"
								  height.RecordEyetoEyeWidth="25"/>
					</s:VGroup>
					<s:VGroup includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
							  width="306" height="100%" horizontalAlign="center" >
						<s:Label text="Number of Left Typical Points"
								 text.CompleteScoringfinal=" Abnormal Points"
								 text.MeasureAnormalPoints="Number of Left Abnormal Points"
								 text.MeasureLeftAnormalTine="Left Abnormal Points"
								 text.MeasureLeftCircunference="Left Typical Points"
								 text.MeasureLeftMainBeam="Left Typical Points"
								 text.MeasureLeftTine="Left Typical Points"
								 text.MeasureRigthAnormalTine="Left Abnormal Points"
								 text.MeasureRigthCircumference="Left Typical Points"
								 text.MeasureRigthMainBeam="Left Typical Points"
								 text.MeasureRigthTine="Left Typical Points"
								 text.RecordLefAbnormalTine="Left Abnormal Points"
								 text.RecordLeftCircunference="Left Typical Points"
								 text.RecordLeftMainBeamLine="Left Typical Points"
								 text.RecordLeftTineLine="Left Typical Points"
								 text.RecordRigthAbnormalTine="Left Abnormal Points"
								 text.RecordRigthCircumference="Left Typical Points"
								 text.RecordRigthMainBeam="Left Typical Points"
								 text.RecordRigthTineLine="Left Typical Points"/>
						<s:DropDownList id="cmbletftypical"
										includeIn="NumberTypicalPoints"
										selectedIndex="0">
							<s:dataProvider>
								<mx:ArrayList>
									<fx:String>1</fx:String>
									<fx:String>2</fx:String>
									<fx:String>3</fx:String>
									<fx:String>4</fx:String>
									<fx:String>5</fx:String>
									<fx:String>6</fx:String>
									<fx:String>7</fx:String>
									<fx:String>8</fx:String>
									<fx:String>9</fx:String>
									<fx:String>10</fx:String>
								</mx:ArrayList>
							</s:dataProvider>	
						</s:DropDownList>	
						<s:TextInput id="txtTypicalLeftPonitsRigthMain"
									 includeIn="MeasureLeftCircunference,MeasureLeftTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine"
									 editable.MeasureRigthMainBeam="false"/>
						<s:TextInput id="txttypicalleft"
									 includeIn="MeasureLeftMainBeam"
									 editable="false"/>
						<s:TextInput includeIn="RecordLeftMainBeamLine" editable="false" id="txtRecordMainLeftPoints"/>
						<s:TextInput id="txtTypicalLeftRecordRigth"
									 includeIn="RecordRigthMainBeam"
									 editable="false"/>
						<s:TextInput id="txtTypicalLeftRecordLeftTine"
									 includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
									 editable.RecordLeftTineLine="false"/>
						<s:DropDownList id="cmbabnormalpointsleft" includeIn="MeasureAnormalPoints"
										selectedIndex="0">
							<s:dataProvider>
								<mx:ArrayList>
									<fx:String>0</fx:String>
									<fx:String>1</fx:String>
									<fx:String>2</fx:String>
									<fx:String>3</fx:String>
									<fx:String>4</fx:String>
									<fx:String>5</fx:String>
									<fx:String>6</fx:String>
									<fx:String>7</fx:String>
									<fx:String>8</fx:String>
									<fx:String>9</fx:String>
									<fx:String>10</fx:String>
									<fx:String>11</fx:String>
									<fx:String>12</fx:String>
									<fx:String>13</fx:String>
									<fx:String>14</fx:String>
									<fx:String>15</fx:String>
									<fx:String>16</fx:String>
									<fx:String>17</fx:String>
									<fx:String>18</fx:String>
									<fx:String>19</fx:String>
									<fx:String>20</fx:String>
								</mx:ArrayList>
							</s:dataProvider>
							
							
						</s:DropDownList>	
						<s:TextInput id="txtleftanormalpoints"
									 includeIn="MeasureLeftAnormalTine,RecordLefAbnormalTine,MeasureRigthAnormalTine,RecordRigthAbnormalTine,CompleteScoringfinal"/>
						<s:Label text="Number of Rigth Typical Points"
								 text.CompleteScoringfinal="Rigth Abnormal Points"
								 text.MeasureAnormalPoints="Number of Rigth Abnormal Points"
								 text.MeasureLeftAnormalTine="Rigth Abnormal Points"
								 text.MeasureLeftCircunference="Rigth Typical Points"
								 text.MeasureLeftMainBeam="Rigth Typical Points"
								 text.MeasureLeftTine="Rigth Typical Points"
								 text.MeasureRigthAnormalTine="Rigth Abnormal Points"
								 text.MeasureRigthCircumference="Rigth Typical Points"
								 text.MeasureRigthMainBeam="Rigth Typical Points"
								 text.MeasureRigthTine="Rigth Typical Points"
								 text.RecordLefAbnormalTine="Rigth Abnormal Points"
								 text.RecordLeftCircunference="Rigth Typical Points"
								 text.RecordLeftMainBeamLine="Rigth Typical Points"
								 text.RecordLeftTineLine="Rigth Typical Points"
								 text.RecordRigthAbnormalTine="Rigth Abnormal Points"
								 text.RecordRigthCircumference="Rigth Typical Points"
								 text.RecordRigthMainBeam="Rigth Typical Points"
								 text.RecordRigthTineLine="Rigth Typical Points"/>
						<s:TextInput id="txtrigthanormalpoints"
									 includeIn="CompleteScoringfinal,MeasureRigthAnormalTine,RecordLefAbnormalTine,RecordRigthAbnormalTine,MeasureLeftAnormalTine"/>
						<s:DropDownList id="cmbabnormalpointsrigth"
										includeIn="MeasureAnormalPoints"
										selectedIndex="0"> 
							<s:dataProvider>
								<mx:ArrayList>
									<fx:String>0</fx:String>
									<fx:String>1</fx:String>
									<fx:String>2</fx:String>
									<fx:String>3</fx:String>
									<fx:String>4</fx:String>
									<fx:String>5</fx:String>
									<fx:String>6</fx:String>
									<fx:String>7</fx:String>
									<fx:String>8</fx:String>
									<fx:String>9</fx:String>
									<fx:String>10</fx:String>
									<fx:String>11</fx:String>
									<fx:String>12</fx:String>
									<fx:String>13</fx:String>
									<fx:String>14</fx:String>
									<fx:String>15</fx:String>
									<fx:String>16</fx:String>
									<fx:String>17</fx:String>
									<fx:String>18</fx:String>
									<fx:String>19</fx:String>
									<fx:String>20</fx:String>
								</mx:ArrayList>
							</s:dataProvider>
						</s:DropDownList>
						<s:TextInput id="txtTypicalRigthRecordLeftTine"
									 includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
									 editable.RecordLeftTineLine="false"/>
						<s:TextInput id="txtTypicalRigthRecordRigth"
									 includeIn="RecordRigthMainBeam"
									 editable="false"/>
						<s:TextInput id="txtTypicalRigthPonitsRigthMain"
									 includeIn="MeasureLeftCircunference,MeasureLeftTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine"
									 editable.MeasureRigthMainBeam="false"/>
						<s:TextInput id="txtRecordMainRigthPoints"
									 includeIn="RecordLeftMainBeamLine"
									 editable="false"/>
						<mx:HRule includeIn="MeasureLeftAnormalTine,MeasureRigthAnormalTine,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthTineLine"
								  width="267"
								  />
						<s:TextInput id="txttypicalrigth"
									 includeIn="MeasureLeftMainBeam"
									 editable="false"/>
						<s:DropDownList id="cmbrigthtypical"
										includeIn="NumberTypicalPoints"
										chromeColor="#323232"
										selectedIndex="0">
							<s:dataProvider>
								<mx:ArrayList>
									<fx:String>1</fx:String>
									<fx:String>2</fx:String>
									<fx:String>3</fx:String>
									<fx:String>4</fx:String>
									<fx:String>5</fx:String>
									<fx:String>6</fx:String>
									<fx:String>7</fx:String>
									<fx:String>8</fx:String>
									<fx:String>9</fx:String>
									<fx:String>10</fx:String>
								</mx:ArrayList>
							</s:dataProvider>
						</s:DropDownList>	
						<mx:HRule includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftCircunference,MeasureLeftTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints"
								  width="268" height="6"
								  
								  />
						<s:Button id="btnRecordLeftTine"
								  includeIn="MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
								  width="144" label="Measure Main Beams"
								  x.MeasureAnormalPoints="30" width.MeasureAnormalPoints="246"
								  label.MeasureAnormalPoints="Continue Measuring Abnormal Points?"
								  alpha.MeasureAnormalPoints="8"
								  click.MeasureAnormalPoints="MeasureAnormalPoints_clickHandler(event)"
								  x.MeasureLeftAnormalTine="52" width.MeasureLeftAnormalTine="213"
								  label.MeasureLeftAnormalTine="Measure Left Abnormal Tine 1"
								  alpha.MeasureLeftAnormalTine="8"
								  click.MeasureLeftAnormalTine="MeasureLeftAnormalTine_clickHandler(event)"
								  x.MeasureLeftCircunference="47"
								  width.MeasureLeftCircunference="213"
								  label.MeasureLeftCircunference="Measure Left Circumference 1"
								  alpha.MeasureLeftCircunference="8"
								  click.MeasureLeftCircunference="MeasureLeftCircunference_clickHandler(event)"
								  x.MeasureLeftMainBeam="69" width.MeasureLeftMainBeam="188"
								  label.MeasureLeftMainBeam="Measure Letf Main Beam"
								  alpha.MeasureLeftMainBeam="8"
								  click.MeasureLeftMainBeam="LeftMainBeam_clickHandler(event)"
								  width.MeasureLeftTine="188"
								  label.MeasureLeftTine="Measure Left Tine 1 "
								  alpha.MeasureLeftTine="8"
								  click.MeasureLeftTine="MeasureLeftTine_clickHandler(event)"
								  x.MeasureRigthAnormalTine="46" width.MeasureRigthAnormalTine="232"
								  label.MeasureRigthAnormalTine="Measure Right Abnormal Tine"
								  alpha.MeasureRigthAnormalTine="8"
								  click.MeasureRigthAnormalTine="MeasureRigthAnormalTine_clickHandler(event)"
								  width.MeasureRigthCircumference="213"
								  label.MeasureRigthCircumference="Measure Right Circumference 1"
								  alpha.MeasureRigthCircumference="8"
								  click.MeasureRigthCircumference="MeasureRigthCircumference_clickHandler(event)"
								  x.MeasureRigthMainBeam="59" width.MeasureRigthMainBeam="188"
								  label.MeasureRigthMainBeam="Measure Rigth Main Beam"
								  alpha.MeasureRigthMainBeam="8"
								  click.MeasureRigthMainBeam="MeasureRigthMainBeam_clickHandler(event)"
								  width.MeasureRigthTine="188"
								  label.MeasureRigthTine="Measure Rigth Tine 1 "
								  alpha.MeasureRigthTine="8"
								  click.MeasureRigthTine="MeasureRigthTine_clickHandler(event)"
								  x.NumberTypicalPoints="65" width.NumberTypicalPoints="188"
								  height.NumberTypicalPoints="25" alpha.NumberTypicalPoints="8"
								  click.NumberTypicalPoints="TypicalPoints_clickHandler(event)"
								  width.RecordLefAbnormalTine="213"
								  label.RecordLefAbnormalTine="Record left Abnormal Tine 1"
								  alpha.RecordLefAbnormalTine="8"
								  click.RecordLefAbnormalTine="RecordLefAbnormalTine_clickHandler(event)"
								  x.RecordLeftCircunference="50" width.RecordLeftCircunference="213"
								  label.RecordLeftCircunference="Recorder Left Circumference 1"
								  alpha.RecordLeftCircunference="8"
								  click.RecordLeftCircunference="RecordLeftCircunference_clickHandler(event)"
								  x.RecordLeftMainBeamLine="66" width.RecordLeftMainBeamLine="188"
								  label.RecordLeftMainBeamLine="Record Left Main Beam"
								  alpha.RecordLeftMainBeamLine="8"
								  click.RecordLeftMainBeamLine="RecordLeftMainBeamLine_clickHandler(event)"
								  width.RecordLeftTineLine="188"
								  label.RecordLeftTineLine="Record Left Tine 1"
								  alpha.RecordLeftTineLine="8"
								  click.RecordLeftTineLine="RecordLeftTineLine_clickHandler(event)"
								  x.RecordRigthAbnormalTine="37" width.RecordRigthAbnormalTine="213"
								  label.RecordRigthAbnormalTine="Record Right Abnormal Tine"
								  alpha.RecordRigthAbnormalTine="8"
								  click.RecordRigthAbnormalTine="RecordRigthAbnormalTine_clickHandler(event)"
								  width.RecordRigthCircumference="213"
								  label.RecordRigthCircumference="Recorder Right Circumference 1 "
								  alpha.RecordRigthCircumference="8"
								  click.RecordRigthCircumference="RecordRigthCircumference_clickHandler(event)"
								  width.RecordRigthMainBeam="188"
								  label.RecordRigthMainBeam="Record Right Main Beam"
								  alpha.RecordRigthMainBeam="8"
								  click.RecordRigthMainBeam="RecordRigthMainBeam_clickHandler(event)"
								  width.RecordRigthTineLine="188"
								  label.RecordRigthTineLine="Record Right Tine 1"
								  alpha.RecordRigthTineLine="8"
								  click.RecordRigthTineLine="RecordRigthTineLine_clickHandler(event)"/>
						<s:Button includeIn="RecordLeftMainBeamLine" x="68"
								  width="188" label="Erase Lines" alpha="8"
								  click="eraselines_clickHandler(event)"/>
						<s:Button includeIn="RecordLefAbnormalTine,RecordRigthAbnormalTine"
										width="180" label="Erase Lines" alpha="8"
										click="eraselines_clickHandler(event)"
										width.RecordLefAbnormalTine="187"/>
						<s:Button id="usermirrortypical"
								  includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
								  width="144" label="Use Mirror Value" alpha="8"
								  width.RecordLeftCircunference="213"
								  click.RecordLeftCircunference="RecordLeftCircunferenceMirror_clickHandler(event)"
								  width.RecordLeftTineLine="188"
								  click.RecordLeftTineLine="RecordLeftTineLineMirror_clickHandler(event)"
								  width.RecordRigthCircumference="213"
								  click.RecordRigthCircumference="RecordRigthCircumferenceMirror_clickHandler(event)"
								  width.RecordRigthTineLine="188"
								  click.RecordRigthTineLine="RecordRigthTineLineMirror_clickHandler(event)"/>
						<s:Button includeIn="RecordLeftCircunference,RecordLeftTineLine,RecordRigthCircumference,RecordRigthTineLine"
								  width="144" label="Erase Lines" alpha="8"
								  click="eraselines_clickHandler(event)"
								  width.RecordLeftCircunference="213"
								  width.RecordLeftTineLine="188"
								  width.RecordRigthCircumference="213"
								  width.RecordRigthTineLine="188"/>
						<s:Button includeIn="RecordLeftCircunference,RecordRigthCircumference"
										width="174" label="Help" alpha="8"
										click="helpcircumference_clickHandler(event)"
										width.RecordLeftCircunference="213"
										width.RecordRigthCircumference="213"/>
						<mx:HRule includeIn="RecordRigthMainBeam" x="0"
								  y="96" width="267" height="2"/>
						<s:Button includeIn="RecordRigthMainBeam" x="74"
								  y="127" width="158" label="Erase Lines"
								  alpha="8" 
								  click="eraselines_clickHandler(event)"/>
						<mx:HRule includeIn="RecordLeftMainBeamLine" x="0"
								  y="97" width="268"/>
						<mx:HRule includeIn="MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
								  width="267" height="5"
								  />
						<s:Button includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
								  width="187" height="25" label="Complete Scoring" alpha="8"
								  click="CompleteScoring_clickHandler(event)" fontSize="18"
								  fontStyle="normal" fontWeight="normal"
								  height.NumberTypicalPoints="25"/>
						
						<mx:HRule includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftAnormalTine,MeasureLeftCircunference,MeasureLeftMainBeam,MeasureLeftTine,MeasureRigthAnormalTine,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
								  width="267" height="5"
								  />
						<s:VGroup includeIn="CompleteScoringfinal,MeasureAnormalPoints,MeasureLeftCircunference,MeasureRigthCircumference,MeasureRigthMainBeam,MeasureRigthTine,NumberTypicalPoints,MeasureLeftTine"
								  width="306"
								  height="133"
								  horizontalAlign="center"
								  verticalAlign.NumberTypicalPoints="top">
							<s:Label text="Last Measurement&#xd;"/>
							<s:Label id="lbllasmeasurement"
									 text.MeasureRigthMainBeam="Rigth Main Beam ="
									 text.NumberTypicalPoints="Inside Spread="/>
							<s:Button width="188" height="25" label="View ScoreSheet"
									  alpha="8"
									  click="ViewScoreSheet_clickHandler(event)"
									  fontSize="18"/>
							<s:Button width="186" height="25" label="View Instructions"
									  alpha="8"
									  click="ViewInstructions_clickHandler(event)"
									  fontSize="18"/>
						</s:VGroup>
						
						
						<s:Image id="imagezoomscoring"
								 includeIn="MeasureLeftAnormalTine,MeasureLeftMainBeam,MeasureRigthAnormalTine,RecordLefAbnormalTine,RecordLeftCircunference,RecordLeftMainBeamLine,RecordLeftTineLine,RecordRigthAbnormalTine,RecordRigthCircumference,RecordRigthMainBeam,RecordRigthTineLine"
								 width="187" height="113" click="launchPopUp(event)"
								 rollOut="doZoomProduct(event)"
								 rollOver="doZoomProduct(event)" scaleX="1"
								 scaleY="1" source="Image/MAINBM_0.jpg"
								 source.MeasureLeftAnormalTine="Image/ABNTIN_0.jpg"
								 source.MeasureRigthAnormalTine="Image/ABNTIN_0.jpg"
								 source.RecordLefAbnormalTine="Image/ABNTIN_0.jpg"
								 source.RecordLeftCircunference="Image/CRCFRN_0.jpg"
								 horizontalCenter.RecordLeftMainBeamLine="4"
								 source.RecordLeftTineLine="Image/TYPTIN_0.jpg"
								 source.RecordRigthAbnormalTine="Image/ABNTIN_0.jpg"
								 source.RecordRigthCircumference="Image/CRCFRN_0.jpg"
								 source.RecordRigthTineLine="Image/TYPTIN_0.jpg"/>
						
					</s:VGroup>
					<s:VGroup includeIn="positionphoto" x="0" y="0" width="306"
							  height="635" horizontalAlign="center">
						<s:HGroup width="305" height="149" horizontalAlign="center"
								  verticalAlign="middle">
							<s:Group includeIn="positionphoto" x="71" width="144"
									 height="123">
								<s:Image id="imageposition" x="10" y="7"
										 width="133" height="107"
										 source="Image/0_RL.png"/>
							</s:Group>
							<!-- <s:Label id="lblpositionphoto" includeIn="positionphoto"
							rotation="90" text="Zero Degrees"/> -->
						</s:HGroup>
						<s:HGroup y="141" width="306" height="34"
								  horizontalAlign="center" horizontalCenter="0">
							<!--<s:Button width="32" height="28"
							click="btnback_backphoto(event)" cornerRadius="30"
							icon="Image/back.png"/> -->
							<s:Button label="Left" click="btnback_backphoto(event)"
									  name="Left"/>
							<s:Spacer width="80" height="33"/>
							<!--<s:Button width="29" height="28" alpha="1" blendMode="layer"
							click="btnnext_nextphoto(event)" cornerRadius="30"
							icon="Image/next.png" name="btnnext"/> -->
							<s:Button click="btnnext_nextphoto(event)" label="Right" name="Right" />
						</s:HGroup>
						
						<s:Label id="lblpositionphoto" includeIn="positionphoto"
								 text="Zero Degrees"/>
						
						<s:Button x="63" y="173" width="156" height="33"
								  label="Lock in View" alpha="4"
								  click="button4_positionphoto(event)"
								  horizontalCenter="10" name="btnback"/>
					</s:VGroup>
					<s:VGroup includeIn="referenceFeature" x="0" y="10" width="306"
							  height="274" horizontalAlign="center">
						
						<s:HGroup x="69" y="337" width="208" height="210" alpha="10"
								  verticalAlign="middle">
							<mx:List id="birdlist" width="158" height="204"
									 creationComplete="birdlist_complete(event)"
									 itemRenderer="mx.controls.Image" rowCount="2"
									 rowHeight="100" selectedIndex="0"
									 verticalAlign="middle">	
							</mx:List>
							<s:VGroup width="37" height="199" horizontalAlign="center"
									  verticalAlign="middle">
								<s:Label id="lblEarWidth" rotation="90" text="Ear Width"
										 verticalAlign="top"/>
								<s:Spacer width="10" height="26"/>
								<s:Label id="lblEyetoEyewidth" rotation="90"
										 text="Eye to Eye width" verticalAlign="bottom"/>
							</s:VGroup>
						</s:HGroup>
						<s:Group x="0" y="304" width="267" height="55">
							<s:Button width="100" height="31" label="Start"
									  click="selectiontypefeature_clickHandler(event)"
									  cornerRadius="5" horizontalCenter="1"/>
						</s:Group>
					</s:VGroup>
					
				</s:Group>
				<s:Image id="imagebusckscorezoom"
						 includeIn="MeasureInsideSpread,RecordEarWidth,RecordEyeballWidthFeature,RecordEyetoEyeWidth,RecorderInsideSpread"
						 width="196" height="117" click="launchPopUp2(event)"
						 rollOut="doZoomProduct(event)"
						 rollOver="doZoomProduct(event)" scaleX="1" scaleY="1"
						 source.MeasureInsideSpread="Image/INSSPR_0.jpg"
						 source.RecordEarWidth="Image/REFFTR_001.png"
						 source.RecorderInsideSpread="Image/INSSPR_0.jpg"
						 source.RecordEyeballWidthFeature="Image/REFFTR_005.png"
						 source.RecordEyetoEyeWidth="Image/REFFTR_002.png"/>
			</s:VGroup>
		</s:SkinnableContainer>
	</s:VGroup>
	
</s:SkinnableContainer>